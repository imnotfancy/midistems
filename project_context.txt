# Introduction

This file was automatically generated by the ProjectContextGenerator script.
It scans the current codebase, excludes certain files/directories (e.g. binary files, large files, or those explicitly ignored),
and includes the content of text-based files that fit within a specified size limit.

Below is a tree view of all files (showing included or excluded status), followed by the content of included files.
Finally, a summary provides the total number of files included/excluded and the total size of included content.

audio_melodia_flutter/
   .flutter-plugins [Included]
   .flutter-plugins-dependencies [Included]
   .gitignore [Included]
   .metadata [Included]
   README.md [Included]
   analysis_options.yaml [Included]
   audio_melodia_flutter.iml [Included]
   devtools_options.yaml [Included]
   pubspec.lock [Included]
   pubspec.yaml [Included]
   script4.py [Excluded: ignored by name/dir]

---
## Included Files Content

// File: .dart_tool\flutter_build\44d21c69a882f08a635e4e2d3f96797b\.filecache
----------------------------------------
{"version":2,"files":[{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\extensions\\int_to_hexstring.dart","hash":"73cb6deeb88fdcc320cf8e089d51531d"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\filter_chip.dart","hash":"7b62eb0ab2c5eebb74cb9830db58dbf2"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\dropdown_menu_theme.dart","hash":"89279f0a997fc74d790892ecfb894eb8"},{"path":"C:\\flutter\\packages\\flutter\\lib\\rendering.dart","hash":"de159249f2567411616f741dc19a7317"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\paragraph.dart","hash":"74575d6b9581ed5e99ce154012a277e4"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\notification_listener.dart","hash":"ace1af10f05915f711ae44372e6862fa"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\view.dart","hash":"348756f557453aa6a59d2f754e1839a8"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iaudioclient3.dart","hash":"025a4f4e26446bf3da88ee7d3cf3d0f2"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\dart_plugin_registrant.dart","hash":"6c49f36c204d9c39ed8344462e4342f9"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\bottom_navigation_bar_theme.dart","hash":"75b9c1779a7340c6547ca36854566e0d"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\gestures\\lsq_solver.dart","hash":"c76aba086f5653df25d6b7698b8d85f0"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\stack.dart","hash":"6d14fd39dfef5b30d204b9fbf19f95f5"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\source_span-1.10.0\\LICENSE","hash":"e9f463669bd6dfea2166dcdcbf392645"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\characters-1.3.0\\lib\\src\\characters_impl.dart","hash":"3bb0652e163327c58784ce2a2b882a7c"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\file_picker-6.2.1\\lib\\src\\windows\\file_picker_windows_ffi_types.dart","hash":"61b775a84b287f0d0631b422b301ade0"},{"path":"C:\\flutter\\packages\\flutter\\lib\\cupertino.dart","hash":"f7f1054eac95be1f773acf9de3f8fa90"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationnotcondition.dart","hash":"6aa37695d4ecfd1cd9514e2758da9f5c"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ishelllink.dart","hash":"8b90b8fa4eae6234d9cdad3987f9faf3"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\selection_area.dart","hash":"8c8e376b1f1907139b4cc2a77ec40ff9"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\drawer_header.dart","hash":"ae9dbf31746490c96903a18b869aadd1"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\gestures\\drag_details.dart","hash":"fe6d589e79d080334b661f0861e25191"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\services\\text_editing.dart","hash":"971e19843c122686585b3ed5fb15edb5"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\painting\\box_decoration.dart","hash":"2e82a8f176ae875723e9b4c33f956c13"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\services\\autofill.dart","hash":"b712ccf274e1965ba296f5e95416fe0c"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\typography.dart","hash":"f0a6c2c82fbb26b2048a287314e16723"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\sliver.dart","hash":"70a64a732511203f21a08dae3b31c73c"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\idispatch.dart","hash":"04722e21ad1b67baca7f75a984b0d2f6"},{"path":"C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\include\\flutter\\method_codec.h","hash":"c99d5058f618dbe25fb990aac68e0cf8"},{"path":"C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\flutter_view_controller.cc","hash":"af8149cbc838de5391f2db0ed58e2ae6"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\button_style_button.dart","hash":"e6fe3e33d2cfaddd77eea1d11e14243f"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ipersist.dart","hash":"98911449216f1b1c1b092954bd6cebc5"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\gestures\\converter.dart","hash":"74f4c0a620b1c4ad63da4929145d9f42"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\text_selection_toolbar_anchors.dart","hash":"5f6e776eee0d981c019ec748223ccbee"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\scheme\\scheme_tonal_spot.dart","hash":"75f947f0ba87a0789a3ef91542bbc82c"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\divider.dart","hash":"d7223c3719de78eebad967d581c78afd"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\animated_icons\\data\\menu_close.g.dart","hash":"e6311d4728a75edc5866998cd9fcfe96"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\painting\\image_cache.dart","hash":"dc96d8fe58eb40b6dd7141530390247f"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\api_ms_win_core_apiquery_l2_1_0.g.dart","hash":"153449b4c65c20e74489d7853e4ee4ca"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\flex.dart","hash":"a5a4188942d047911977bd2c4e62cc9d"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\painting\\fractional_offset.dart","hash":"31536de0cf8c179f5d3a157a383853ee"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\banner_theme.dart","hash":"0a6c208a7cc6ff0f52ca7ff3f7d1e40c"},{"path":"C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\include\\flutter\\plugin_registrar.h","hash":"bbcac5a5b3f65a8ff330ce8e26998287"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\menu_style.dart","hash":"dab4500e9b0bd7c989e934028382d55c"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\painting\\decoration_image.dart","hash":"7ae5ac95d2335d3e6d414e4eb7591228"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\scheduler\\binding.dart","hash":"44a49fff6e3307b5b7dc7b28fec8d559"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\layout_builder.dart","hash":"07d3dd77eba249c98ad68e03038206db"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\imetadatatables2.dart","hash":"bb9a6b8b9225608821735003ffdc8a5e"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\button_bar_theme.dart","hash":"66f2e40c42e8db6b6ea0e1235270515f"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\window_manager-0.3.9\\lib\\src\\widgets\\virtual_window_frame.dart","hash":"800045f96a2df55b991bba18695e2c9b"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\tooltip.dart","hash":"ad7a0d8554e1cabf6530487c93e0dcc1"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\painting\\decoration.dart","hash":"4c6bcdf727cb9cbdac7621ac48198d26"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\services\\keyboard_maps.g.dart","hash":"9bbdb2b8645420b0dab017ab8a9126a7"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ienumidlist.dart","hash":"043bb1fa01132048a01458c6977636f5"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iappxmanifestproperties.dart","hash":"3ec463d588e64344f9c833041d4c2e74"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\icon_button.dart","hash":"18dc29748f8511a8ab75e9bf213d01b6"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\file_picker-6.2.1\\lib\\src\\utils.dart","hash":"e8a69ba604a31392f0e4185dc259a5ee"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationproxyfactorymapping.dart","hash":"ce859dde3195c55b2efccee1bdc51a60"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\flutter_midi-1.1.0\\LICENSE","hash":"13a9f94729ddec7a08062b27880d8c68"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\popup_menu.dart","hash":"3b71578d61beed4e9f7c12adf7176c8c"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\display_feature_sub_screen.dart","hash":"c249f78dd9406efb6956af4486ff1639"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\ffi-2.1.3\\LICENSE","hash":"d2e1c26363672670d1aa5cc58334a83b"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\tooltip_visibility.dart","hash":"0faa933d622ae839fc4fcf8ce3439ea6"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\feedback.dart","hash":"fc18de161858c5173701202cea00559b"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\lints-5.1.1\\LICENSE","hash":"4cb782b79f6fc5792728e331e81a3558"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\vector_math-2.1.4\\lib\\src\\vector_math_64\\error_helpers.dart","hash":"39221ca00f5f1e0af7767613695bb5d2"},{"path":"C:\\flutter\\bin\\cache\\pkg\\sky_engine\\LICENSE","hash":"07be594331898d1cdfa3d593809e439f"},{"path":"C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\include\\flutter\\event_channel.h","hash":"8d92b22b136f8165f953f2179f464dfc"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ienumspellingerror.dart","hash":"c2b3370ba518e83a18e0be246f0e2ed4"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\adapter.dart","hash":"f000fa0783142670ffdc6037e76f0bb9"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\annotated_region.dart","hash":"a05b35e402965727a6b38bfc20b6ea15"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\painting\\linear_border.dart","hash":"dccea2e51f83ecc016a1eb377f9e1c91"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\services\\system_channels.dart","hash":"85371fca3ff62a5292c3cde9c2db273e"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\desktop_text_selection.dart","hash":"1578c11ca57f922c046c6f48f3e822b2"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iappxmanifestreader.dart","hash":"bcd1f230f11ee46b0ed40d340d9591c9"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\extensions\\unpack_utf16.dart","hash":"cfab296797450689ec04e7984e7d80e3"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\image_filter.dart","hash":"082279eddd3ecbf4cf4cd9e5b79cc91f"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\winscard.g.dart","hash":"77ba184cb297cb10af7a4e645e26b0ef"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\carousel.dart","hash":"03290a77de60d1938a5419ca28e0c9a3"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\tab_bar_theme.dart","hash":"802ccedc203bfc23144dbb1905e0730d"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\text_field.dart","hash":"5b488752ca5b7d6ba586a6a4d062cd36"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\services\\haptic_feedback.dart","hash":"9c22a82a905c0c4467f302f10d337c1e"},{"path":"C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\build\\flutter_assets\\NOTICES.Z","hash":"b9700dc8a7f0256a7bb44b9c234b1c23"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\vector_math-2.1.4\\lib\\src\\vector_math_64\\aabb3.dart","hash":"257ca4608e7d75f1db8d4c3ab710ac70"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\grid_tile.dart","hash":"08e8b12560cc4d70b1db6cae8905ed3a"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\sliver_list.dart","hash":"fdbeaa39b664f6fbef06b3e56c317cdc"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\icon_data.dart","hash":"92f15623a771bdb91623beadc6ad1a4d"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\vector_math-2.1.4\\lib\\src\\vector_math_64\\matrix3.dart","hash":"447b270ddd29fa75f44c389fee5cadd1"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\text_selection_toolbar.dart","hash":"6a5fb31099e1a0a55e279cc88a49f869"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\platform_menu_bar.dart","hash":"9d2eee67f6cd2ef4617277bd058ef797"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\page_view.dart","hash":"1c6b1474b9b0c0c8d119169904f41ce0"},{"path":"C:\\flutter\\packages\\flutter\\lib\\foundation.dart","hash":"bbf382866dfe5839f5fd524e1bcfba6b"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\matcher-0.12.16+1\\LICENSE","hash":"e9f463669bd6dfea2166dcdcbf392645"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\fl_chart-0.66.2\\LICENSE","hash":"b3896c42c38a76b4ed9d478ca19593e4"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\collection-1.19.0\\lib\\src\\iterable_extensions.dart","hash":"5843b4750179f6099d443212b76f04a2"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iaudiosessioncontrol.dart","hash":"db4827f3013417baab4977d3f19afb1b"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\services\\predictive_back_event.dart","hash":"5a74670bf67f1bd87eda93d4f03fd38f"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ienummoniker.dart","hash":"d80a4e0d1a5fe4aba72f8df70e8b660d"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\_capabilities_io.dart","hash":"0b279dcbda1933bafe0bd7d322e2000f"},{"path":"C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\include\\flutter\\dart_project.h","hash":"1bfa7371e8772f37681a97622f1d71c4"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\app_bar.dart","hash":"ff126fe6a01cdd6a8b2135f103cc1cb5"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\app.dart","hash":"c4c4bd8e07f912e6829d0f9c85df3e73"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\window_manager-0.3.9\\lib\\src\\widgets\\window_caption.dart","hash":"8daf68f75a19aedaac5bc7faa4cef2f3"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationvirtualizeditempattern.dart","hash":"9583f92189dde339b1884f57e7b2f9b0"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider_linux-2.2.1\\lib\\path_provider_linux.dart","hash":"b48ba72a2d5d084d297c3d78e351036e"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\quantize\\quantizer_map.dart","hash":"b6bcae6974bafba60ad95f20c12c72b9"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\file_picker-6.2.1\\lib\\src\\linux\\kdialog_handler.dart","hash":"c88884bcdfaaa2b449b5c116bd19422d"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\services\\clipboard.dart","hash":"cf4765eda606ec7c93129987a7b9f467"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iaudiosessionmanager.dart","hash":"487d0d91f9dc55efcbc2a686bbf46b8d"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\filled_button_theme.dart","hash":"ac7b5ec3363036cb9b72ad279b3632d3"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\painting\\shape_decoration.dart","hash":"64bef592badb8d57cb09c05fb0c76cc5"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomation4.dart","hash":"beb5454dc4d32af79b6177c6ef646714"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ifileisinuse.dart","hash":"5abf40e886af8feb42ccc62d31044f48"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\search.dart","hash":"71792db426dbdf014d798add6baf0a84"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\constants_nodoc.dart","hash":"caaa469735f17387a68b3b8964cfe18a"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\vector_math-2.1.4\\lib\\src\\vector_math_64\\quad.dart","hash":"739bb2e85022ddfb653590b93216942a"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iwbemcontext.dart","hash":"659397ba2b8ba2809c7855a21f2f60b2"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationexpandcollapsepattern.dart","hash":"4a909f493f4dd8dfb93d3a3d4843bd77"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\arc.dart","hash":"e70000bf4405dc60eff2da33c096d7ba"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\painting\\star_border.dart","hash":"1a497614f0ada83403f1b356dceb0fc8"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\implicit_animations.dart","hash":"f205ff9eec124faa7b02e6551b7fd631"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationproxyfactory.dart","hash":"7068099dc46731641110788c3b3e1bdc"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\context_menu.dart","hash":"da83da0ebcda66761450f830150bc529"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\divider_theme.dart","hash":"e35a2cbb5404ae6e9de304ea27cb552a"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\draggable_scrollable_sheet.dart","hash":"2c5e68dfdd6a069cf613e539e2da5d24"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path-1.9.0\\lib\\src\\characters.dart","hash":"43268fa3ac45f3c527c72fc3822b9cb2"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\observer_list.dart","hash":"387236f694dff79733084498c52038ba"},{"path":"C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\build\\flutter_assets\\packages/window_manager/images/ic_chrome_minimize.png","hash":"4282cd84cb36edf2efb950ad9269ca62"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iaudioclock.dart","hash":"7c32424ef2aaa2f268fe177af2d4731f"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationtextrange.dart","hash":"8f76417391b910fe0956d6404b59e144"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iwebauthenticationcoremanagerinterop.dart","hash":"da6fd295116b361d1a0258580d3db629"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\bottom_navigation_bar.dart","hash":"33dd8457b8d5e71c4c375acf8f6e2654"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\diagnostics.dart","hash":"b29b21a1f3c62c0fa77ded7b6d53fe4d"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\material_state_mixin.dart","hash":"2ce77f3493d9ffbe36ca1913ffa684b8"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\ntdll.g.dart","hash":"80549b960bc9c7fd9dad05aa69b7d9b2"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\widget_span.dart","hash":"7a54d34195b3233cdeefde3e98d5eac9"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\mergeable_material.dart","hash":"a0308b2c60e596d8d584f41cbc00ddc1"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\package_config-2.1.1\\LICENSE","hash":"d2e1c26363672670d1aa5cc58334a83b"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\debug.dart","hash":"61eb2619c9992fe3ed9694462cf005f8"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\card_theme.dart","hash":"fd9ef2d2e4dae856651e05a2a6ec1f63"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\painting\\stadium_border.dart","hash":"071cfd76b80374973cf6bf48876490aa"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\thumb_painter.dart","hash":"fd538a76c2981f47baaf50b2f8fe91f5"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\physics\\gravity_simulation.dart","hash":"870a874a6635a84a96e2ae37a78c0820"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iprovideclassinfo.dart","hash":"c90759e0e90f88fd2b4f177ec55cb4f4"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\two_dimensional_scroll_view.dart","hash":"d6d40aa3365829428ed28a579c3f7e6a"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\provider-6.1.2\\lib\\src\\value_listenable_provider.dart","hash":"bbd255fe46712b372dfe3b99cb340068"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\quantize\\src\\point_provider_lab.dart","hash":"6566a35ff0dea9376debf257bdb08fba"},{"path":"C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\plugin_registrar.cc","hash":"dfab43e95bc4052d580af32cd8c7c91a"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\selection.dart","hash":"6c8da04dbf0c874b0079933d8c805cdf"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\color_scheme.dart","hash":"922114742817940a9fbc560c67208459"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\characters-1.3.0\\lib\\characters.dart","hash":"188d03c92376ce139ce247b0f9b0946e"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\setupapi.g.dart","hash":"ec1ebd4c36e474539966b09b9d152fd0"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iaudiosessionmanager2.dart","hash":"0aea2ad4289b60950d9a467b0e03e80e"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\screen_retriever-0.1.9\\lib\\src\\screen_listener.dart","hash":"ebeae83eb9ccc8b5ba1d31b0cfb53f03"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iappxmanifestreader2.dart","hash":"a109a0fbd62a37b4cf3b416da4411578"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\gestures\\resampler.dart","hash":"b168e7f9a027f1d58d126472929300c6"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\sliding_segmented_control.dart","hash":"549517ea589b74d9e07d4495e26e0bbf"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iaudioclient.dart","hash":"e3cf86a21b6646a68ce37d952b5ecf5c"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider_linux-2.2.1\\lib\\src\\get_application_id.dart","hash":"32f5f78e5648f98d8b602c6233aa4fc5"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\dynamiccolor\\material_dynamic_colors.dart","hash":"81bf43e01741bf8b9df15ec37ffbc9ea"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\gestures\\monodrag.dart","hash":"d0e444db0f838c4776afee5b98c845d0"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\hct\\viewing_conditions.dart","hash":"cb0d5b80330326e301ab4d49952b2f34"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\provider-6.1.2\\LICENSE","hash":"753206f0b81e6116b384683823069537"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ishellitemresources.dart","hash":"6f452535b56a9cdc6bc36bd647963dca"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\size_changed_layout_notifier.dart","hash":"2b25f08ee6552ace87c0219a40104d71"},{"path":"C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\flutter_messenger.h","hash":"df550a994131e0f9e04587400a1bf6dc"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\text_form_field_row.dart","hash":"bbe955412891750438ad423a96f5ef64"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\raw_keyboard_listener.dart","hash":"5588e04d2462fa3c03dc939826b0c8d1"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\painting\\image_decoder.dart","hash":"7c562abf5bd2819e159d8b62b633bd68"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ifilesavedialog.dart","hash":"a629548f10bfeaa42dfecec77c11b6f7"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\collection-1.19.0\\lib\\src\\wrappers.dart","hash":"21e56afda1f096f0425a34987708ed56"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\navigation_drawer_theme.dart","hash":"99279951f4a4e11373ee3b14936c7eb3"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\crypt32.g.dart","hash":"6848c6ac5c6c2b1b40f3dd8ec0bbe31c"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\bottom_app_bar_theme.dart","hash":"64288b7c30e61bbfe84d9baf66f08c8c"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\user32.g.dart","hash":"e2d16ea1496afeed39828f05f60debd2"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ivirtualdesktopmanager.dart","hash":"83c5918696d44ca1be713318a4f5a6db"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationwindowpattern.dart","hash":"0d790476d9ddbae00b9e3f0076902498"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\services\\text_layout_metrics.dart","hash":"dc64ebb08fcf29bdc05884be98af7daf"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\material_state.dart","hash":"43fb67a95ca01df6e30ae173cb8b33b1"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationscrollpattern.dart","hash":"106d1bdb4f9d839cf4a65252635f965c"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ishellitemarray.dart","hash":"40abc849ae2322b6e6a63d567f952f1d"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\scheme\\scheme_fidelity.dart","hash":"553c5e7dc9700c1fa053cd78c1dcd60a"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\scroll_view.dart","hash":"a52c78806acbf2086461eddef9debc70"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\basic.dart","hash":"443f13b86008c5d27f31f673efcc3267"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\tab_scaffold.dart","hash":"59ce9f77f19f81edc23711c654702038"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\flutter_plugin_android_lifecycle-2.0.24\\LICENSE","hash":"a60894397335535eb10b54e2fff9f265"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\navigation_bar.dart","hash":"8f3a150dad1ebce992fcd7279b087d21"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path-1.9.0\\lib\\src\\style.dart","hash":"bfb39b98783e4013d9fe5006de40874d"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ierrorinfo.dart","hash":"aeb565e28b1e55ec3794a6b88d975aa5"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\outlined_button_theme.dart","hash":"ff00114af99315cf1ab0d63e81be0fae"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\text_theme.dart","hash":"6b87886fa93ca01768c7db20d34bb3b0"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\isensormanager.dart","hash":"bf3a7e591cc9c80a09c1843209bdafdf"},{"path":"C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\flutter_windows.dll.exp","hash":"da9ab4592ee781951a89bca7c975e8df"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\services\\live_text.dart","hash":"d970423c6488cba52d3585e0221e57ba"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\input_decorator.dart","hash":"bdbbb8551f60548401d6b10b9dba71dc"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\_platform_selectable_region_context_menu_io.dart","hash":"0582a8b20dfce1c8219289afbf0c0e09"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\boolean_selector-2.1.1\\LICENSE","hash":"83228a1ae32476770262d4ff2ac6f984"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\istream.dart","hash":"752db229137baa4ff1a3eccbe3cf69b8"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\texture.dart","hash":"8a9b22d6d62b5cdc288ea7a7f6b1ffe5"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\magnifier.dart","hash":"3e12b857d02fdda256ac8acbe87d960e"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\bitfield.dart","hash":"d540f5a7e71095a9b49cd7ef8ba54bb4"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\xdg_directories-1.1.0\\lib\\xdg_directories.dart","hash":"737107f1a98a5ff745dd4e3236c5bb7b"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\route.dart","hash":"23b017d9696c65517572ade1df6eba69"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\shadows.dart","hash":"7848fb52b88d8e30f0c2e9b6228525bc"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\utils\\color_utils.dart","hash":"0938e0447f447ceb7d16477a0213ce2c"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\painting\\image_provider.dart","hash":"32054e55ef3aedcd41e364b791ab40d1"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\stack_trace-1.12.0\\LICENSE","hash":"3c68a7c20b2296875f67e431093dd99e"},{"path":"C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\include\\flutter\\texture_registrar.h","hash":"974eeb3b01b785fd5e525eeb19dd7780"},{"path":"C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\flutter_export.h","hash":"b2ed4295b5e5adeccba5139e3328839d"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ispeechvoice.dart","hash":"e4db97d8d7acb9a9585f38b0df246277"},{"path":"C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\lib\\ui\\app.dart","hash":"b59e999b9678f594a3b8c701bdbea962"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\checkbox_list_tile.dart","hash":"e06fca5a0394aa7e3012563ff54e20e0"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\checkbox_theme.dart","hash":"c90dfeda5662e78ac469a20444c807ca"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\combase.dart","hash":"10ffd776cef80532a293c5673825e655"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\animated_size.dart","hash":"a73cb055124ccdbd41dc97e9c4d05191"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\scroll_physics.dart","hash":"99248376b2bf36c7eb7ae5934cefbae3"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\list_tile_theme.dart","hash":"37cd874a940881634437bb35ab857556"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\uuid-4.5.1\\LICENSE","hash":"fb92f0b8decb7b59a08fe851e030948d"},{"path":"C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\.dart_tool\\flutter_build\\44d21c69a882f08a635e4e2d3f96797b\\native_assets.yaml","hash":"e7fd2fda36f01436b831ca47fe61fec3"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path-1.9.0\\lib\\src\\utils.dart","hash":"8a7e3b181572ed50e923e5dc05a7533d"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\equatable-2.0.7\\LICENSE","hash":"612951585458204d3e3aa22ecf313e49"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\semantics\\semantics_service.dart","hash":"2b56d2e2d43e189c29cdf7b550bb8cab"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\vector_math-2.1.4\\lib\\src\\vector_math_64\\sphere.dart","hash":"63473e31f03ea66a38affa41fd783752"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\scheduler\\debug.dart","hash":"472f1e91aee127d81e69f84077ec8d15"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\painting\\flutter_logo.dart","hash":"fafec099d30811a6f9c891fb2e32cef5"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\button_theme.dart","hash":"1717d85af1439d56bdfc2dabe531b8a6"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\banner.dart","hash":"8d511fa4a89334dcb252fc8ae9953479"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\inetworkconnection.dart","hash":"51bc9f87faab4993239b12e26047c819"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\vector_math-2.1.4\\lib\\src\\vector_math_64\\aabb2.dart","hash":"f8fb1733ad7ae37b3d994f6f94750146"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\spell_check.dart","hash":"f09bfe5349c4d6ae49a5d093ce9d8b58"},{"path":"C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\build\\flutter_assets\\FontManifest.json","hash":"dc3d03800ccca4601324923c0b1d6d57"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\provider-6.1.2\\lib\\src\\reassemble_handler.dart","hash":"17dd5087a9b407563f662fc112624260"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\provider-6.1.2\\lib\\src\\change_notifier_provider.dart","hash":"3ce0eeefa3058c1955fb1f435ce9928b"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\ffi-2.1.3\\lib\\src\\allocation.dart","hash":"7c8e196c6c96efaadb0e605ec3cb1cce"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\scrollbar.dart","hash":"99fd90c931371f761b8d1b1265460e7f"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\annotations.dart","hash":"b98145bd156a782be220cb3f652ba0a4"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\flexible_space_bar.dart","hash":"1b68a5a0d959cb0874c7ec1d57eee204"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\form_row.dart","hash":"33d98f0a91d79a14d7f56d8c9c06ce0c"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\advapi32.g.dart","hash":"e88da16e1dcd78ac58401bf0c3134c89"},{"path":"C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\include\\flutter\\standard_message_codec.h","hash":"d037e411536f03280ce015fedd7d5c2e"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\table.dart","hash":"7c35678c36fe8de28cfa6384558d8dbf"},{"path":"C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\byte_buffer_streams.h","hash":"60ca7398439e373be1de109854080852"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\collection-1.19.0\\lib\\src\\list_extensions.dart","hash":"9f8b50d98e75350b41d40fee06a9d7ed"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\image.dart","hash":"bf7acebb230ddf490625b2cf8e743e2b"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\services\\mouse_cursor.dart","hash":"19a48bb0fdc91f4bb4b02ac591e52875"},{"path":"C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\include\\flutter\\flutter_view_controller.h","hash":"61e006b2f1a468a4e9f426352808b1f9"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\key.dart","hash":"26c5d3b0b3aa11fa45df82b9fe2a0388"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\icon_theme.dart","hash":"68a0f7290f162350227a7a69eabb6f3b"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\dual_transition_builder.dart","hash":"87ce2c595f6f4415633ebb4f8baf9c1b"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\logging-1.3.0\\LICENSE","hash":"d26b134ce6925adbbb07c08b02583fb8"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\gestures\\pointer_router.dart","hash":"c73badf5156e45c15d8737e32844597a"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\collection-1.19.0\\lib\\src\\combined_wrappers\\combined_iterator.dart","hash":"6c54f90e0db5f42a13be6b3efeb4a04d"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\painting\\_network_image_io.dart","hash":"dc18942dbbb12b9ef308569bb6dc07de"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationobjectmodelpattern.dart","hash":"db8a81e510b416095ef477688165eee5"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ishellservice.dart","hash":"b7690366684d9173683d36992173f7a6"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationelement4.dart","hash":"a212841ba1b80a845ce3756241645d58"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\gestures\\events.dart","hash":"fb9b6486b247c0214f3f09375cf29e2e"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\gestures\\arena.dart","hash":"97248f2ca49fd5ec6acc129f1eaed40f"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\dispatcher.dart","hash":"44c4e1de5f30ee41e94e0017dbd5f035"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\snack_bar_theme.dart","hash":"33eac25cb4c27b0dcda0a4952c4685d7"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationelement5.dart","hash":"e053a966b20fda12dc7d24e0f56c845a"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\physics\\utils.dart","hash":"670717573525d5e0518a4063c6fd9231"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\navigation_drawer.dart","hash":"39c2ed3b6f1f3bfad95577df113d3527"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\immdevice.dart","hash":"545e435076682f57181d79d48821ae5d"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider_foundation-2.4.1\\lib\\messages.g.dart","hash":"3f45d05cfb9a45bf524af2fa9e8fb6e6"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\text_selection_toolbar_button.dart","hash":"7cd7e722df86724dfebbd5ec0ada9097"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\wtsapi32.g.dart","hash":"d6db794e2f414caa48650e6bc2396e6d"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationspreadsheetitempattern.dart","hash":"f1cfa3a69ee743157de8de4ccdf51b58"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\autocomplete.dart","hash":"bdf0a9e4668e4ebcad7d9a3f8d3dbeb7"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\painting\\notched_shapes.dart","hash":"b259ece4ff8ce05e9b1bcaf0415fe1b6"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ipersiststream.dart","hash":"7c0ee8dc84c442f69b0970bb8534d740"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ibindctx.dart","hash":"3af3fd07f4a1feeb62307f54d5bd0aaf"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\decorated_sliver.dart","hash":"ac504413ac252d4facd173131a205b9f"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\services\\raw_keyboard_ios.dart","hash":"e5dfdce2a4625bd54ba39a9d4db60d2a"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\scroll_notification.dart","hash":"73622a69d8741d566c6f929e31f65a4d"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\context_menu_controller.dart","hash":"b1ac6c9a9a7a04cd140060d4f93dc1fe"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\collection-1.19.0\\lib\\src\\equality.dart","hash":"46e577ec532e21029e9cee153d7ca434"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\action_icons_theme.dart","hash":"4932099c2a6b8ae8b74ede9a615b447c"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\picker.dart","hash":"cf58cb45948b8d1ff8d157f342d895b2"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\ink_ripple.dart","hash":"204418884d1e655617fe131a7af13d5a"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iwinhttprequest.dart","hash":"b44c83e3276e2ebad7c43ed8d7beae72"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\radio_theme.dart","hash":"99ec0197ee2762a7a084fb8f83c2adcd"},{"path":"C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\build\\flutter_assets\\fonts/MaterialIcons-Regular.otf","hash":"e7069dfd19b331be16bed984668fe080"},{"path":"C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\include\\flutter\\method_result_functions.h","hash":"94ee873a52f9a1b83c4194a577fce23b"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider_linux-2.2.1\\lib\\src\\path_provider_linux.dart","hash":"8ac537f4af05ad812e8cd29f077aee24"},{"path":"C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\flutter_windows.dll.pdb","hash":"4fb23927dd7efa1e4e65aa233e63e084"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\immnotificationclient.dart","hash":"1cf0553fea22eee05a0cbb29e299760a"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\viewport.dart","hash":"8a469af03823d225decc71e75b4f909c"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationrangevaluepattern.dart","hash":"f90b22ce5704e97441e7e2265d0119e7"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\snack_bar.dart","hash":"de1cf28feb5e5069cae822e8fa02fca5"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider_android-2.2.15\\lib\\messages.g.dart","hash":"3e127bbafbce223b6d416d5cca517df7"},{"path":"C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\flutter_windows.dll.lib","hash":"a5ad31e0f09450d568f76661c7e2c286"},{"path":"C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\include\\flutter\\flutter_view.h","hash":"6b62107a4942646f116acc63ead2fe16"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\animated_icons\\data\\pause_play.g.dart","hash":"a39036e6e7861dbb8dde953722ccef25"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider-2.1.5\\LICENSE","hash":"a60894397335535eb10b54e2fff9f265"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ienumstring.dart","hash":"e7c7233769f55e718ce22082f70db721"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\winrt_helpers.dart","hash":"e2f61b143b6eaca3f6291b32388812df"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\animation\\animations.dart","hash":"8bfc94f73060d5f1224472caa792b8b8"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\sliver_persistent_header.dart","hash":"c53090ab624be42bf2355926a903a034"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\painting\\geometry.dart","hash":"b79bd48d58944618e0ef1f4f5d204a9c"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\flutter_bloc-8.1.6\\LICENSE","hash":"0dc6cec7b4ef07b48069a9ff484a8ffe"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\list_tile.dart","hash":"fcd2bc3a00d0e7de6c498109ffe95a07"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\glob-2.1.3\\LICENSE","hash":"e9f463669bd6dfea2166dcdcbf392645"},{"path":"C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\include\\flutter\\flutter_view.h","hash":"6b62107a4942646f116acc63ead2fe16"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\data_table_source.dart","hash":"bdd3a31817dfc052c506f3a7e2556fcb"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\nav_bar.dart","hash":"15d7f1a7aed94123635737479c2956a0"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\two_dimensional_viewport.dart","hash":"da158fa37cde951754a18e969f569e29"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\filled_button.dart","hash":"d7efb3cc784a7c2526ef94b353ee0845"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\spacer.dart","hash":"ac4298690945913eebe3982ab06e52ce"},{"path":"C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\pubspec.yaml","hash":"22db5c8de39db345a4194bed765ead1f"},{"path":"C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\flutter_windows.dll","hash":"809cba5e7deeef4989d56ee18e75bbd7"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\chip.dart","hash":"c8c3c692c4418dae54fe1e830cd4378d"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\page_transitions_theme.dart","hash":"b0a92f0ae1bab2ddfd1b64be675e9f4a"},{"path":"C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\include\\flutter\\byte_streams.h","hash":"9d19b63eca625e8a7c4d37c63dd32c54"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\navigation_toolbar.dart","hash":"494669a07dc9803f9dc8573c081f3084"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\gestures\\eager.dart","hash":"da8ba17f9e25e960c8449fe98007f50e"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\error.dart","hash":"6e464838b7c90601558fafb4828a146f"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\sliver.dart","hash":"bd09fd6d93e09b6bf66387eaba635795"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationtextpattern.dart","hash":"6e8a57cfea32b9c9f29b229edeacbd6b"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationelement2.dart","hash":"a67676334dcb7629a485b52714780808"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationdockpattern.dart","hash":"e05a31b36d602ae06ddd1979c05df7a1"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\mouse_tracker.dart","hash":"4fe1ba752f6c3911ab5173a76c415893"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\structs.dart","hash":"b51cea8017e3cbb294fe3b8066265c7e"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\selectable_text.dart","hash":"e6a6aeeef7b8f50db0595e907bfc2f22"},{"path":"C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\build\\flutter_assets\\packages/window_manager/images/ic_chrome_close.png","hash":"75f4b8ab3608a05461a31fc18d6b47c2"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\user_accounts_drawer_header.dart","hash":"bcb87612b1f2033d529fa36128001f1f"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider_android-2.2.15\\lib\\path_provider_android.dart","hash":"eb368258f0f9fe56110bdc238488af97"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path-1.9.0\\lib\\src\\path_exception.dart","hash":"b062a8e2dade00779072d1c37846d161"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\system_context_menu.dart","hash":"cc4964be8543fc1ef3be2e36fa7dc449"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\vector_math-2.1.4\\lib\\src\\vector_math_64\\matrix2.dart","hash":"7f164e577cfcf8c8295947195cde2a7c"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationtogglepattern.dart","hash":"b3d8ffb1e79fe86169ef197e01c7c79c"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\collection-1.19.0\\lib\\src\\combined_wrappers\\combined_list.dart","hash":"5b894ae18be3e2442a34288833184ca9"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\undo_history.dart","hash":"84dda94c7115a229817d893bba6cd260"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationproxyfactoryentry.dart","hash":"34f1383424d8e23bc3463188bcf19dcc"},{"path":"C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\include\\flutter\\encodable_value.h","hash":"8e585909beef7c6d2fdd2293af8420c4"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\ffi-2.1.3\\lib\\src\\utf16.dart","hash":"07d628617431f09942070c95c65d241f"},{"path":"C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\flutter_plugin_registrar.h","hash":"ce7b5b373915b978789bd3353a78bb44"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\utils\\math_utils.dart","hash":"e4ee21048ab83cc50d61ac3784afa9f5"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\file-7.0.1\\LICENSE","hash":"1bc3a9b4f64729d01f8d74a883befce2"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\collection-1.19.0\\lib\\src\\union_set.dart","hash":"0073f703be7f7ddbd7f04d1b740f35c6"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\overlay.dart","hash":"b9266022a984609da99cdc7575845b4c"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\screen_retriever-0.1.9\\LICENSE","hash":"3edc064d56e88851904686bbd1705e47"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\meta-1.15.0\\lib\\meta.dart","hash":"8042ca366a626884c0e89628875af940"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\app_lifecycle_listener.dart","hash":"40bcde54f6fdfd7dfc4e68b050122987"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\functions.dart","hash":"a12fc767bd933ecc3bbdd69f597ed3cf"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\painting\\basic_types.dart","hash":"617a7299a6876bd2896d2aa0c2f845ce"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider-2.1.5\\lib\\path_provider.dart","hash":"e08429988b4639fb29cd66bfdc497d90"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\physics\\tolerance.dart","hash":"454f11813e43a193cf6fa422fc834104"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\LICENSE","hash":"3b954371d922e30c595d3f72f54bb6e4"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\file_picker-6.2.1\\lib\\src\\linux\\qarma_and_zenity_handler.dart","hash":"1f8496075241f2e89a0df5de82022f26"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ishellfolder.dart","hash":"a1616e35cb9fc80b351d84aea1626b36"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\nested-1.0.0\\LICENSE","hash":"753206f0b81e6116b384683823069537"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\tab_indicator.dart","hash":"79a40e88699dcb8faa97ae847f869f00"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\_timeline_io.dart","hash":"2b2385e013688dc5ccafac580f8f6999"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iaudiosessioncontrol2.dart","hash":"18ce35bef6b656745428776b3aaaf4ca"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\services\\raw_keyboard_linux.dart","hash":"a04e00aee9f371d41cf413e644823901"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\string_scanner-1.3.0\\LICENSE","hash":"e9f463669bd6dfea2166dcdcbf392645"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\_platform_io.dart","hash":"34db9d7c9ebc27ae8cf7b0284f83365e"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\time.dart","hash":"d355a4d910ba42786220a7ac724dce8c"},{"path":"C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\include\\flutter\\flutter_engine.h","hash":"75124e51d0da32a2adb9afb1099f17cc"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\provider-6.1.2\\lib\\src\\selector.dart","hash":"6a72a2ba15880cab1e1d9a28a94f1a2d"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\services\\message_codec.dart","hash":"395feb1e3c41a7e8086f80d26775c95f"},{"path":"C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\icudtl.dat","hash":"692337664e861ad322138061132dddc6"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\collection-1.19.0\\LICENSE","hash":"39062f759b587cf2d49199959513204a"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\floating_action_button.dart","hash":"645dbc586e5292c99cd46991412d2e89"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\text_selection_theme.dart","hash":"d6a363bef9b8a8ecea3052c28c5c5146"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\magnifier.dart","hash":"f0f00e72e2a309327e0e0468887e7315"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ispeechaudioformat.dart","hash":"36145af4fe8f10df91f98b13659a7b23"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider_windows-2.3.0\\lib\\src\\guid.dart","hash":"55bb53dd4f9ed89c9ff88c204b59293c"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\navigation_rail.dart","hash":"f6119810bfa347886bb08f6ed6168017"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\predictive_back_page_transitions_builder.dart","hash":"2e5d93dfd0e1e6ac7f95e2f609bf2c81"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\binding.dart","hash":"b70467cc385d9e6114403574d2f4fc2b"},{"path":"C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\.dart_tool\\flutter_build\\dart_plugin_registrant.dart","hash":"d4aff2bf50f7d4c8de90a384ef2035a9"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\painting\\inline_span.dart","hash":"6b0bdadf0113f2cf1ea049d096153df0"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\bstr.dart","hash":"af04c2a11aa95d2e4b86600b33d0957c"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\ffi-2.1.3\\lib\\ffi.dart","hash":"ae66b0cbdfe2e2a5a99c5dfa48fd5399"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\scroll_configuration.dart","hash":"a00f7da90c85736a52cd5ff63991ebd7"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\services\\debug.dart","hash":"624431304ab3076b73b09e0b33e35e4f"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\dialog_theme.dart","hash":"1f0bbeac096fa8cb1e547e27d4a6e09c"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\sliver_layout_builder.dart","hash":"f255aed97911507289cb6f5da97da9e0"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\api_ms_win_ro_typeresolution_l1_1_0.g.dart","hash":"872e5481eca8f8f757d139b5e4988053"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ispellchecker.dart","hash":"b868a7ab9e1be413c489dc9958bf907b"},{"path":"C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\readme","hash":"356d1b411dcfb0ce19032375e169a96e"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iclassfactory.dart","hash":"cd0faf95b7346ac8469c545bef368396"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\colors.dart","hash":"1dedcfc721ff198bfddbf5e90e14769b"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\segmented_button.dart","hash":"d2b7f722c662ed9c5e1ebf87fc18416e"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\shared_app_data.dart","hash":"c312ce71f146965cc9fce898eaf8dfc9"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\immendpoint.dart","hash":"08f987c2f95b3e2a51c435bd8e8c588f"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\characters-1.3.0\\lib\\src\\grapheme_clusters\\constants.dart","hash":"9f9b79f577d9fdf4f20c17a26a2f1d57"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\vector_math-2.1.4\\lib\\src\\vector_math_64\\vector4.dart","hash":"299bd3979d7999412945ac4e3199cdcf"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider_platform_interface-2.1.2\\LICENSE","hash":"a60894397335535eb10b54e2fff9f265"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\api_ms_win_ro_typeresolution_l1_1_1.g.dart","hash":"902f4e12222d1e5b34d0ec77b2628f25"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\search_view_theme.dart","hash":"11633fb39bbd1a95bbcae50aeb2f657b"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider_platform_interface-2.1.2\\lib\\path_provider_platform_interface.dart","hash":"09b3f3b1ef14ce885c016f2eba98f3da"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\animated_size.dart","hash":"a5e824b3eedf3261e95c1143c4e9b157"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\media_query.dart","hash":"9a11428dbc3420053cee3d1bad29fa66"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ispnotifysource.dart","hash":"c126b73764228fafd6b80ed5e2d7ff0f"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\services\\asset_bundle.dart","hash":"ed6111dffc74b8cd4cf2ad7195512349"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationinvokepattern.dart","hash":"1d7963ea64a6b7059dc1f694f23f0b98"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\provider-6.1.2\\lib\\src\\provider.dart","hash":"a7efec55c58055a03130c41bdab65496"},{"path":"C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\readme","hash":"356d1b411dcfb0ce19032375e169a96e"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\checkbox.dart","hash":"3c7d59c7a67c9e8eba555d361c36cca6"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\rometadata.g.dart","hash":"cad4664b0591b1060e3eb77fc3cfdfd9"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\services\\raw_keyboard_android.dart","hash":"15fca68e23a9c248049f847c1fb4ecb6"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\pop_scope.dart","hash":"6dc0c45175212bb5e5ce131e28fa7d30"},{"path":"C:\\flutter\\packages\\flutter_tools\\lib\\src\\build_system\\targets\\native_assets.dart","hash":"e1e2bfa907107c49241169594268d17d"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationgriditempattern.dart","hash":"f558b0876d2ee3eb7fc5b350a5ef85e7"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\provider-6.1.2\\lib\\src\\inherited_provider.dart","hash":"37d8bb0465f404f16623cc756b2f224b"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\form_section.dart","hash":"c70cac9a1261b64861fb51c0f0519c0b"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationtextpattern2.dart","hash":"7c3e512b5c20c07ddded2fb71eadd848"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\services\\binary_messenger.dart","hash":"67cead210557633927b538693d93a8eb"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iappxmanifestpackageid.dart","hash":"74afb02c8643f153de3fb64ad8a466a6"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\animated_icons\\data\\close_menu.g.dart","hash":"1f699fda56a8ea482e6bb4911849a5cb"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\spell_check_suggestions_toolbar.dart","hash":"f3a2a87e2b666b138fed19428dbc28f3"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\services\\deferred_component.dart","hash":"7cb404d051d483abbff448707069ad18"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationpropertycondition.dart","hash":"82e0e5b8ffeefc064a87f7990e0585b0"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\slotted_render_object_widget.dart","hash":"5851efca699e1485dd117936a260337b"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\gestures\\force_press.dart","hash":"23aacfec6ae252d6dfd6e205b00c385f"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\nested-1.0.0\\lib\\nested.dart","hash":"5c621d343831cbb9619557942e6b7d9f"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\fade_in_image.dart","hash":"1e59a7638a8f73d60d63296be7d9b008"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\platform-3.1.6\\lib\\src\\testing\\fake_platform.dart","hash":"f1a57183b9d9b863c00fcad39308d4c1"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\scheme\\scheme_expressive.dart","hash":"be096140df774ec827218c6fe69b80e5"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\no_splash.dart","hash":"f0c59c9b18125a83e52afaba0ac60f71"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\term_glyph-1.2.1\\LICENSE","hash":"901fb8012bd0bea60fea67092c26b918"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider_android-2.2.15\\LICENSE","hash":"a60894397335535eb10b54e2fff9f265"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\bottom_sheet_theme.dart","hash":"3fe2706914ad17c39b43be4941cd6de7"},{"path":"C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\plugin_registrar.cc","hash":"dfab43e95bc4052d580af32cd8c7c91a"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\painting\\circle_border.dart","hash":"ef059aa370903d40abcfbcb845bb6532"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\gestures\\multitap.dart","hash":"b9512ce445b44934defc0f52ac54e359"},{"path":"C:\\flutter\\packages\\flutter\\lib\\semantics.dart","hash":"a9d4e4b3f6357c540f77101737a25e4e"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\extensions\\list_to_blob.dart","hash":"56d7144236503f311a7d9a966eaf2fbd"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\desktop_text_selection_toolbar_button.dart","hash":"13626b33f6c9e00af53759a1d6cb3882"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationorcondition.dart","hash":"037c1b4cc41d0a66ea6134bf054ac095"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iwbemlocator.dart","hash":"0183b13f6e13fe4c255b09236e142882"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationelement.dart","hash":"ce305fb96ca9a74ff549e6ff91795e10"},{"path":"C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\build\\flutter_assets\\packages/window_manager/images/ic_chrome_unmaximize.png","hash":"4a90c1909cb74e8f0d35794e2f61d8bf"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\painting\\box_shadow.dart","hash":"cc7ffd6974211ac25c9711689d3b8400"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\date_picker_theme.dart","hash":"4aa4347adeb3288717eb12cdc500ca9c"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\magnification.g.dart","hash":"e950e207ecdcf1d767721554751c6673"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\wlanapi.g.dart","hash":"29247603a535c298681d43412512fd53"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\stack_frame.dart","hash":"ecea94a67645c8c6f2f2c2befdba5797"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationtexteditpattern.dart","hash":"7b53b9344345e99b1ec1c1e6247b0f78"},{"path":"C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\flutter_plugin_registrar.h","hash":"ce7b5b373915b978789bd3353a78bb44"},{"path":"C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\include\\flutter\\engine_method_result.h","hash":"bd234e0cb49f374af1858db77ef6f8a6"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\services\\mouse_tracking.dart","hash":"9bf9f497e71504dab15bb024be56ce1c"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iappxfilesenumerator.dart","hash":"ffc5c2e273fa5a533521f5e67f6e183f"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\sliver_grid.dart","hash":"7553fd67cfc34993a2cbb1e2b56021b7"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\ink_splash.dart","hash":"52fcb3f4a2ab54da9f5308e559bf8c1a"},{"path":"C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\.dart_tool\\flutter_build\\44d21c69a882f08a635e4e2d3f96797b\\program.dill","hash":"59b0e3a5dd3c53d26f64955df29ba144"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomation3.dart","hash":"c5d7abe9da153df1f3d9d7754b91c0fb"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\about.dart","hash":"0e0901d74e3b66a8d7395afece8eafaa"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\sliver_multi_box_adaptor.dart","hash":"5b5f6dd7874b80a96edd8bfd5554c85e"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\xinput1_4.g.dart","hash":"110291e1a5dee5de6d06425145c9f53c"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\ink_highlight.dart","hash":"080021219b8d99a3f45f177f7c011689"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\api_ms_win_core_winrt_l1_1_0.g.dart","hash":"41bc035ab11c30618d860e3d24e2c4ef"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iwbemclassobject.dart","hash":"fa0457adc89723d08bb20eddf3e89555"},{"path":"C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\include\\flutter\\method_call.h","hash":"dbca77cccacce0fe72b9a51e2f0e36f1"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\dialog.dart","hash":"1d1d0a67f0f70ea092507986657041e9"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\gestures\\tap_and_drag.dart","hash":"d67821b66a2c89caa5ce02a5a584d02f"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\platform-3.1.6\\lib\\platform.dart","hash":"cbf041463d4a85115a79934eafe8e461"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\painting\\beveled_rectangle_border.dart","hash":"6e9369c157f34f7559579cee1f30b933"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider_windows-2.3.0\\LICENSE","hash":"a60894397335535eb10b54e2fff9f265"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\text_selection_toolbar_layout_delegate.dart","hash":"a384df45eb810f3784e52458ba693b1d"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\file_picker-6.2.1\\lib\\src\\file_picker_result.dart","hash":"09d3e52abd93ee570d1da4b969b50a71"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\collection-1.19.0\\lib\\src\\unmodifiable_wrappers.dart","hash":"ea7c9cbd710872ba6d1b93050936bea7"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\app.dart","hash":"15348b8318077889ef48af7fd360e3d6"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider_windows-2.3.0\\lib\\src\\folders.dart","hash":"4bd805daf5d0a52cb80a5ff67f37d1fd"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\itypeinfo.dart","hash":"2fe7a01e6cccd3fc371fd2d730935afe"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\scaffold.dart","hash":"23c281553020294b0d0b362055cd6532"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomation2.dart","hash":"34d140191c4affc37f3716de1b46854a"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\outlined_button.dart","hash":"89d9725151845780e6ab907034a8d87c"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\api_ms_win_core_winrt_string_l1_1_0.g.dart","hash":"bb40d6ae10f99afb1b498e44b75f9a3b"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\button_style.dart","hash":"e9b8b2f72c1b05a3f6d26b4ec3cd7c1d"},{"path":"C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\include\\flutter\\method_codec.h","hash":"c99d5058f618dbe25fb990aac68e0cf8"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\slider.dart","hash":"b67c452135251581ea39ca220a3dc326"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\image.dart","hash":"2e66abe58a6cd5b05adaa08aab35773d"},{"path":"C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\include\\flutter\\plugin_registrar_windows.h","hash":"638c6d51c16137571be269b9754e378d"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\painting\\placeholder_span.dart","hash":"06fc4cae1d1668906f5e4b931b70a5f7"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\text.dart","hash":"f5820ed92a76bbb5a33c3b0149db5190"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\scheduler\\service_extensions.dart","hash":"5af5a2fb59f9c015abbda254a35ea7a6"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\painting\\edge_insets.dart","hash":"569c61e8718e8fad8eb64bf91adef33b"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\isensordatareport.dart","hash":"50a6a93f5f53543a005e436586f9e24b"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\gestures\\drag.dart","hash":"331e0eb256b0b35c78d828a89df5d98f"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\constants_metadata.dart","hash":"4d74fe38db99d0b2b135f8d4f81d6721"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\services\\raw_keyboard_macos.dart","hash":"e1886dc8e1edb2fda48b8a8d497ec379"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\services\\font_loader.dart","hash":"e98b1a4d5852efe3fd90f32f1d1175ad"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\dwmapi.g.dart","hash":"607cef6a651964e0339d2e09df046c09"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\constants.dart","hash":"c2d786aa36eaa6d2b8ac8b0149099d99"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iwbemservices.dart","hash":"58ebbd139a7de7bef2e2e646cdb00d7e"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\change_notifier.dart","hash":"0eba84d1e22dc75e2435132f46b03e75"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\constants.dart","hash":"310649eda1830de4f669332f93865282"},{"path":"C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\include\\flutter\\method_result.h","hash":"5445f6084c75f39e3193bf9b9c7cf9fa"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\service_extensions.dart","hash":"20eb6d7f0dac2a803c6623a3beb6838c"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationtableitempattern.dart","hash":"d004b4e52622f42ec84eea09ede49f43"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\sliver_fill.dart","hash":"15e1a561d8ddcea33d3678576c164b6b"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationgridpattern.dart","hash":"142eee94af4418beb50a22e4c3970309"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\menu_button_theme.dart","hash":"1650055881c20cece4ca2c0226e3946b"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\wrap.dart","hash":"6ac7ec254a9772032f8ea42b034074d1"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\sliver_floating_header.dart","hash":"282511ab9573529eb3f7063d9b5f325d"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationelement7.dart","hash":"cd0365e9895a1f44235bcf2288a11f66"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\interactive_viewer.dart","hash":"1db5346bf6d1d26a2be1e39e36f7afbf"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iinitializewithwindow.dart","hash":"0748bf03bcf37edd1d571959e45a5cc0"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\inherited_theme.dart","hash":"4fb5d90860bfca49f93097e7c8d882ea"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\characters-1.3.0\\lib\\src\\characters.dart","hash":"21bf6725b1fc374f03ae5b2cb46bd95b"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\shifted_box.dart","hash":"fd9a805e899e75c980394d35734b140c"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationtransformpattern2.dart","hash":"83ddbf5c126feed94b2f90784c17d5b1"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\collection-1.19.0\\lib\\src\\union_set_controller.dart","hash":"f301af2d0392296f456363085becbf47"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\menu_bar_theme.dart","hash":"801a669a24457def40f962e55c2b418d"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\nested_scroll_view.dart","hash":"0fc09d347fd6e5149debdbfd5d230450"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\icons.dart","hash":"a5c26e493259d75a046318603212e53f"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\refresh.dart","hash":"518b8af2e4d78836a3e24f783f3a46be"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\vector_math-2.1.4\\lib\\vector_math_64.dart","hash":"bd1315cfa157d271f8a38242c2abd0d9"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\gestures\\scale.dart","hash":"bb5b3736ed5ea3fd53c034ef8e986c85"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\text_selection_toolbar.dart","hash":"bdc7e70e7c2adca035ebff42e23dfae8"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\list_wheel_scroll_view.dart","hash":"3827646c58ecd33b01c03b13ac7ccbed"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\texture.dart","hash":"d132c1fc844a3300b5faf530714f7d30"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iappxmanifestreader7.dart","hash":"f697b51a3a96ab52efa2c082f20a738a"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ifiledialog2.dart","hash":"f45b881803064da6852bd34e8ef7951c"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iappxmanifestpackagedependency.dart","hash":"793424ed524885eedef0340c067b865e"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\unique_widget.dart","hash":"0bc32d9519ad188655722c1b5df8e896"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\floating_action_button_location.dart","hash":"b07c3189c0eb5674a90a361c4a349bc5"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\routes.dart","hash":"7d97806d13ca94b081b431f4d3017d27"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\services\\_background_isolate_binary_messenger_io.dart","hash":"d73eb52cadc4b09d23b07deeaf12936e"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\desktop_text_selection_toolbar_layout_delegate.dart","hash":"a41dfa7938a3c34c93159dea0a6c658f"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iwbemobjectaccess.dart","hash":"cb5493b3fb9ca309e2cae9a641029cd0"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\screen_retriever-0.1.9\\lib\\screen_retriever.dart","hash":"8d257002584f4aa1eabaea0bd8cb3faf"},{"path":"C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\flutter_engine.cc","hash":"cd2c1391ba36283a0ac46c6324143b8b"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\magnifier.dart","hash":"6864d2aea4893029b4fcf2fc3cc3a091"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\autocomplete.dart","hash":"3ed2c4934c2b01c8a929e0fe34b79da5"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\powrprof.g.dart","hash":"2a4b4b7e76f1c79a762ce636f6b730db"},{"path":"C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\.dart_tool\\flutter_build\\44d21c69a882f08a635e4e2d3f96797b\\native_assets.dill","hash":"d41d8cd98f00b204e9800998ecf8427e"},{"path":"C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\include\\flutter\\event_sink.h","hash":"57f0859616ee1faa88ac60f083e9e479"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\sprintf-7.0.0\\LICENSE","hash":"f26476a70de962928321bf9e80f9029e"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\platform_view.dart","hash":"d4e6c628f51f84b669afeb6880e25d3d"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\window_manager-0.3.9\\lib\\src\\title_bar_style.dart","hash":"b1b6f0652f2d406d6d019805f70013f4"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\fake_async-1.3.1\\LICENSE","hash":"175792518e4ac015ab6696d16c4f607e"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\physics\\spring_simulation.dart","hash":"2938a10e708e941766fa7c750c9c34e5"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\material_color_utilities.dart","hash":"11df661a909009a918e6eec82d13e3ff"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\expansion_panel.dart","hash":"35d774fa98bd7f24fc75df96c3269493"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\isensorcollection.dart","hash":"b43a69dd26a10426aeb7eed269b4cd51"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\scrollable_helpers.dart","hash":"b999d3540cc7ab70522bc138712bc2f1"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\scroll_delegate.dart","hash":"b69e902366941432c473f910ead033c5"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\provider-6.1.2\\lib\\provider.dart","hash":"08fb5f27432143c416f473db763fa8c6"},{"path":"C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\include\\flutter\\method_result_functions.h","hash":"94ee873a52f9a1b83c4194a577fce23b"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\tonic-0.2.5\\LICENSE","hash":"d4689bbd1249a48f6f59ce7543b5d31b"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\vector_math-2.1.4\\lib\\src\\vector_math_64\\plane.dart","hash":"f0c6d5d05fbdc95ab84f1a63894b7be6"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\overscroll_indicator.dart","hash":"aaa9b32ad52cf3b2651efe017635524f"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path-1.9.0\\lib\\src\\context.dart","hash":"daeb052f1089d4e84d8a22acf56c1da2"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\painting\\continuous_rectangle_border.dart","hash":"af4df0d955cfa425e4fbcdc5cee6a376"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\leak_tracker_testing-3.0.1\\LICENSE","hash":"f721b495d225cd93026aaeb2f6e41bcc"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\vector_math-2.1.4\\lib\\src\\vector_math_64\\vector3.dart","hash":"478e1071c9f577b6cabb8d72c36de077"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomation6.dart","hash":"3a7c0d6ff07fca442df7724d853dfbe0"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\collection-1.19.0\\lib\\src\\queue_list.dart","hash":"02139a0e85c6b42bceaf3377d2aee3de"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\just_audio_platform_interface-4.3.0\\LICENSE","hash":"fba1d88f08129f8046dd091b8abb5ded"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\utils.dart","hash":"ee746523b6e3d70f4061a5750c37cac3"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\iphlpapi.g.dart","hash":"2426e2644b69a745c9d477194b9b572e"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\characters-1.3.0\\lib\\src\\grapheme_clusters\\breaks.dart","hash":"359388897ae53df8791213c31ef05fe6"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\inetworklistmanagerevents.dart","hash":"a403f9be5cc42dedca5208fa2c104dd3"},{"path":"C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\flutter_windows.dll.exp","hash":"da9ab4592ee781951a89bca7c975e8df"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ichannelaudiovolume.dart","hash":"8ccaa7ec037755c10bf5586831be0fe1"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\constants.dart","hash":"df0a9878a16d3cd73cff00f496307544"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ispeechobjecttoken.dart","hash":"47cee6326ea5f9f09e1247e2930199e2"},{"path":"C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\core_implementations.cc","hash":"f238ee953b38ceefdca359dad0af450e"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path-1.9.0\\lib\\src\\style\\posix.dart","hash":"5e054086533f32f7181757a17890ae56"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\focus_traversal.dart","hash":"7ecbe394f5a9f436bdbd973a49c8281b"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\adaptive_text_selection_toolbar.dart","hash":"ae36cfc622f99dc7a17a256be2933b74"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\dialog.dart","hash":"905f454a2c877ea4aaa79e5a73e97df9"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\range_slider.dart","hash":"d000c729fee4c177de714a210f1b4332"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\search_bar_theme.dart","hash":"36d28887d58e9dfe5753dc9fd364b647"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\service_extensions.dart","hash":"ba0c8dd8a234a449050e76d22738480f"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\file_picker-6.2.1\\lib\\src\\file_picker.dart","hash":"07c8d17f269d3c38ad6c2d146669908f"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\table_border.dart","hash":"a5e1196791db734a448e0fd32a63cfcc"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\services\\flavor.dart","hash":"cd0c4ddac2c7f994effd14ac77d18226"},{"path":"C:\\flutter\\packages\\flutter\\lib\\animation.dart","hash":"e76c07fd6945a4eadb2aeebf87b643bd"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\painting\\image_resolution.dart","hash":"1586f5d24f300541caebb7e008342e25"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\drawer.dart","hash":"723b1f84c494ae7ca65424e4e636d8e5"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\localizations.dart","hash":"6bd7116b39a4290636c006ea8fb0f535"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\desktop_text_selection.dart","hash":"48ba673f0e14a195d177e35cbcfc679d"},{"path":"C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\include\\flutter\\method_result.h","hash":"5445f6084c75f39e3193bf9b9c7cf9fa"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\scheme\\scheme_vibrant.dart","hash":"5b04f80518a8417cb87a0aec07dacf4f"},{"path":"C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\include\\flutter\\message_codec.h","hash":"5689a0228921e85497f18097ac2caee3"},{"path":"C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\build\\flutter_assets\\AssetManifest.json","hash":"683c9485adfa17145a028934bd53d5c0"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\semantics\\debug.dart","hash":"0afbdd6f1125195ec28ff55922e51d50"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\automatic_keep_alive.dart","hash":"2863f4964cfc96bab51ba3f6180a469c"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\services\\message_codecs.dart","hash":"ec4da34caab07694f3c251c780020e96"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\cupertino_icons-1.0.8\\assets\\CupertinoIcons.ttf","hash":"b93248a553f9e8bc17f1065929d5934b"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iconnectionpoint.dart","hash":"ed361e60fcf89da03b59c13d84579d0d"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationelement8.dart","hash":"2598a130fc6437cc87f8efb150561b60"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iaudiorenderclient.dart","hash":"678125b16711755ee7950f73890a3360"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\transitions.dart","hash":"d943487c044ce6ac8e7cd3d2fa81339b"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\fixnum-1.1.1\\LICENSE","hash":"3c68a7c20b2296875f67e431093dd99e"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\isequentialstream.dart","hash":"b59195eae40d21212bb7b532313e6480"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\text_button.dart","hash":"354bdd7dd0e0fa6af97450d357e6122c"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\collection-1.19.0\\lib\\src\\comparators.dart","hash":"8ac28b43cbabd2954dafb72dc9a58f01"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\reorderable_list.dart","hash":"acf61b3b8c12e6b09618384fbbc2e349"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\physics\\clamped_simulation.dart","hash":"9951dd026c1ec46f9940016f4a823b40"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\window_manager-0.3.9\\lib\\src\\resize_edge.dart","hash":"7b810cb308e2ee9dc12cbf7be2958f6c"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\circle_avatar.dart","hash":"1b8ebe04f94a58f7ac6da2d2be484131"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\decorated_sliver.dart","hash":"e6dc8fb43fcd62e902975e9fcc0aaf5a"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\gestures\\binding.dart","hash":"47e70daf42f41d4119ad4bc07b923928"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\painting\\text_painter.dart","hash":"2ed03ac5e94c43f504b49a19f6e49619"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\viewport.dart","hash":"e988d89a54eaa8e63be51d46c0bd10e7"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\ink_well.dart","hash":"5c9c56e47c1aeb615f002ba155685a65"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\editable.dart","hash":"d732fc60bfabd0e0cc57820d422d13f3"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\dynamiccolor\\dynamic_scheme.dart","hash":"7536ace8732469863c97185648bb15a9"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\scheduler\\priority.dart","hash":"9051680cd2078f92c9c56831272643d5"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\basic_types.dart","hash":"db58af9f6da58e4aa822f325502532e4"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\scrollbar.dart","hash":"8fb77ea0e2407a18955da641a64f1c14"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\scrollbar.dart","hash":"06c8940894956210e1d9312848a9b556"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\context_menu_action.dart","hash":"afd1b6d1bb872d5686b5057a7802a504"},{"path":"C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\include\\flutter\\event_stream_handler.h","hash":"ed52e87718a782e3988b7aaa41864050"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\text_field.dart","hash":"6e7b0efc63ef2536d0ce9fdb301e1eb7"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\editable_text.dart","hash":"399a2d652d314be315778a3680a2e17d"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider_macos-2.0.7\\LICENSE","hash":"a60894397335535eb10b54e2fff9f265"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\window_manager-0.3.9\\LICENSE","hash":"3edc064d56e88851904686bbd1705e47"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ienumresources.dart","hash":"08a61adc8ecc7216c84a455539fd75ad"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\services\\restoration.dart","hash":"fafab4ea7d0c1dc06149deaf9d269a85"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iappxmanifestapplicationsenumerator.dart","hash":"8d4c4f339184d3cd86b0dfb7d7321d51"},{"path":"C:\\flutter\\packages\\flutter\\lib\\services.dart","hash":"1566a1649e9bc2e0f0ecdf869e678a0a"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationelement9.dart","hash":"7339ec709c898b8e442a3a02e63f3e6f"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\gestures\\recognizer.dart","hash":"704160d71eb5efcdf2906170d893bcf3"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\file_picker-6.2.1\\lib\\src\\linux\\dialog_handler.dart","hash":"72f6c6e6002d8c9b20cd880e2df1c394"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iwbemrefresher.dart","hash":"54ba07d769f852b6c68fa2aafd4257c8"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ishellitem2.dart","hash":"b0c96b9383b0471bcadb2206daedef05"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\just_audio-0.9.43\\LICENSE","hash":"e9898cbd2824d4e3dfa968f76821ca50"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iknownfolder.dart","hash":"9805639600096c1f056657f418f6703d"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\container.dart","hash":"f71282d25b5792dcbb6d9917076d0f30"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationitemcontainerpattern.dart","hash":"85a9bfffa1576a9d933113d39528e24b"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\toggle_buttons_theme.dart","hash":"99d0ee83080f8e15e59986da0c527852"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\overflow_bar.dart","hash":"10fd391490d7320415aea296125ca50e"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\ink_decoration.dart","hash":"43086faa74e4ad7bdb369be8d6fc496b"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\menu_theme.dart","hash":"3bc578f6d7cf48c66b27fe20889c0ee2"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\window_manager-0.3.9\\lib\\src\\widgets\\window_caption_button.dart","hash":"30fdb54726eb3adfff854b1629f4bc1d"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationelementarray.dart","hash":"41baecfe75bc82e8dae966eba92c23b7"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\painting\\box_fit.dart","hash":"8e838e06ddeecd43f41843e42457155b"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\services\\undo_manager.dart","hash":"e5e333993a5cfec88d0277a09718323a"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\comdlg32.g.dart","hash":"9821568488904c8c1566c46762278f16"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\window_manager-0.3.9\\images\\ic_chrome_close.png","hash":"75f4b8ab3608a05461a31fc18d6b47c2"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\navigator_pop_handler.dart","hash":"eb0361b270543f45fe1841c22539289f"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ispellchecker2.dart","hash":"60ed6e3dc269f179875fea840112bc4c"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\file_picker-6.2.1\\lib\\src\\windows\\file_picker_windows.dart","hash":"364a4b62ae406b0676d2659a77261ff5"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\painting\\shader_warm_up.dart","hash":"1d552d8d41a00a356003dbb21453e904"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\ffi-2.1.3\\lib\\src\\arena.dart","hash":"b9bf4c34257ba7cad08d8c7092c46e35"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iappxmanifestapplication.dart","hash":"3dc4006aab4c069db52d46f59e8262fa"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iaudioclockadjustment.dart","hash":"d25601f97655927dc9fd147438eacfad"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\imetadatadispenserex.dart","hash":"6ee584441f30f72cea8a75f9b861591c"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\window_manager-0.3.9\\lib\\src\\widgets\\drag_to_resize_area.dart","hash":"e4213b6e00a1b217ade116d303d579cd"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationcacherequest.dart","hash":"bec9a4fa9a224f42d622cf676a494a2a"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\button_bar.dart","hash":"f80d7815d221dbd800f96fd9c8b86d1a"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\proxy_box.dart","hash":"c02292978496c7f9a8a63dbb3ce7aace"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\services\\process_text.dart","hash":"f457eebde02f336ab8da5acbaf3d8528"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationselectionpattern.dart","hash":"89afb95565b4d1eca335d4b9b4790212"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\gestures\\hit_test.dart","hash":"547c71ec0c50920c3254ec3bfd593585"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\viewport_offset.dart","hash":"da9f7a464b831130a717e80377bf99d1"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\dynamiccolor\\src\\contrast_curve.dart","hash":"9a12cf2a3549924510006db4651a1743"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationlegacyiaccessiblepattern.dart","hash":"147fdd9503161f6606b625f0ed5c1272"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\vector_math-2.1.4\\lib\\src\\vector_math_64\\frustum.dart","hash":"d975e51852aa1802c81c738dcb4c348d"},{"path":"C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\byte_buffer_streams.h","hash":"60ca7398439e373be1de109854080852"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\painting\\colors.dart","hash":"fbeb850ec795afee0dea45a73ab1368a"},{"path":"C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\include\\flutter\\binary_messenger.h","hash":"94c591297a24acb890ed50305487b3ab"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\shell32.g.dart","hash":"77833f9ce93791f664316db43a55505c"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\animated_icons\\data\\list_view.g.dart","hash":"ad9758d9e1841409e9404d74fc3bd9df"},{"path":"C:\\flutter\\packages\\flutter\\lib\\gestures.dart","hash":"7b6199dff5808c0464b865fe03c4c616"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationtextrange2.dart","hash":"afc3af0d3aaf8d64a82177a094097ee9"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\text_selection.dart","hash":"e88bebb28589bba52a35fa4901ef8958"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\quiver-3.2.2\\LICENSE","hash":"175792518e4ac015ab6696d16c4f607e"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\painting\\borders.dart","hash":"1ebf6345c59496488173dfbd3f7c3526"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\vector_math-2.1.4\\lib\\src\\vector_math_64\\triangle.dart","hash":"7d2bdb4801fc8b3a110f36d5e5fa59f5"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\slider.dart","hash":"6a4d5a8b84e71967c08ce18adb19fd9d"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\imetadataimport.dart","hash":"b8252455a884dfc13966cec360c9844d"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\elevated_button.dart","hash":"97795bb93646fd12a7f9cdc6982494ad"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomation.dart","hash":"e1980812801e0d89e39cfa0bb4cf7fb3"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\file_picker-6.2.1\\lib\\src\\exceptions.dart","hash":"e3ef71f241dd9711d599fc18b59abdf2"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\capabilities.dart","hash":"2b896eb9c2c6269a1988162da3e4efa3"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\vector_math-2.1.4\\lib\\src\\vector_math_64\\matrix4.dart","hash":"b5f0b0da99e8a07d58c21ae071800404"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\vector_math-2.1.4\\lib\\src\\vector_math_64\\opengl.dart","hash":"9e22ead5e19c7b5da6de0678c8c13dca"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider_foundation-2.4.1\\lib\\path_provider_foundation.dart","hash":"9485ecc20aafb0727c2700cf6e34cb65"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\router.dart","hash":"e9ad358e52cc0f7699f9196ce3e35da9"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iappxmanifestpackagedependenciesenumerator.dart","hash":"c81b77e6c86772f05b86739d8ba68b14"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\services\\text_input.dart","hash":"c479d980bae3f60e0ff425651385d6c8"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\default_text_editing_shortcuts.dart","hash":"b2074976267af6228ae6b50627b5c9aa"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\navigator.dart","hash":"7fc728538b4621c4c988f1f4eb76a951"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\data_table.dart","hash":"e7fb312c35140edf8e552b6ee73245cd"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\services\\hardware_keyboard.dart","hash":"e00d761729ce91e58bb9edd42608d6df"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationelement3.dart","hash":"e0417e8f067bf4a25edc299853bfe050"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\api_ms_win_core_comm_l1_1_2.g.dart","hash":"7bb75bf1bcc0aac68c67c939cfe2eab0"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\restoration_properties.dart","hash":"0e50d59ec3a3f8caa2af4583be6f2201"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\shaders\\ink_sparkle.frag","hash":"7eee695ba96e5afa80abfaf59973617a"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\sliver_fixed_extent_list.dart","hash":"abcdf5b8d942cd3f02cbc60002c824d1"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationdragpattern.dart","hash":"2d186bf86fb26df1aca63c78d1f3da0d"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\toggle_buttons.dart","hash":"270df3966ba1802f0cc1a5c3f8c77537"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\default_selection_style.dart","hash":"7f080cc2e66197a8144480b5f72b5e9e"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\input_border.dart","hash":"2138ff863db811644480df0504afa34c"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\rotated_box.dart","hash":"4682cb6c05f0e20c2b9f0d4b9037adbe"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationtransformpattern.dart","hash":"d374a7295ed13ae994b36d002890225f"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\framework.dart","hash":"59cee154986a022364494052f8eb3abc"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\scroll_context.dart","hash":"a2701656bb3160ea810ab576c50cbd65"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationvaluepattern.dart","hash":"ede54fd11e6d44588748f07a8711f863"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\node.dart","hash":"8ed63a11f5c6520ad3ff2f3c9b1c7929"},{"path":"C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\lib\\ui\\screens\\home_screen.dart","hash":"c0c6797dd72850829089c23940a81f16"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\painting\\border_radius.dart","hash":"ef0cb76da4afba716098e266cf6e2d20"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\structs.g.dart","hash":"67f751cf689639227d5db57f73b92a2a"},{"path":"C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\core_implementations.cc","hash":"f238ee953b38ceefdca359dad0af450e"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\extensions\\set_ansi.dart","hash":"d30eba29d046c1a8b7f029838de6e49f"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path-1.9.0\\lib\\src\\path_set.dart","hash":"1b20a6e406ca8e79675b2ebd9b362d10"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\progress_indicator_theme.dart","hash":"bfdd5f136da67a6a2e572ff7ffa18641"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\window_manager-0.3.9\\lib\\src\\utils\\calc_window_position.dart","hash":"d52fa3657d2918d5ddcd6d6ecbcda065"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\stepper.dart","hash":"a49ec697c5cef9953e0bd0cbac9d97b8"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iaudioclock2.dart","hash":"36e63388665f9d5f335135824e300cae"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\scrollable.dart","hash":"18c03ecb2fea51a8cb9de728de20be92"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\services\\asset_manifest.dart","hash":"90a93105383816828fa285fc36bb4639"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\animated_icons\\data\\arrow_menu.g.dart","hash":"51232f90052d5aeb0e8565b3a4bd4305"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\_html_element_view_io.dart","hash":"8b305b4fe533a3762afc8ae95d4c49a9"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\shortcuts.dart","hash":"d25bd308a31a0e9435238b8bd8f274e2"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\cli_util-0.4.2\\LICENSE","hash":"39062f759b587cf2d49199959513204a"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\quantize\\quantizer_wsmeans.dart","hash":"6c6dfd5ba4546c1f32201555d6cff215"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\reorderable_list.dart","hash":"a5c02581df820933c57314230ed9d33d"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\vector_math-2.1.4\\lib\\src\\vector_math_64\\ray.dart","hash":"146741f6f87d6612ee7bbf6a6fa9c119"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\animation\\curves.dart","hash":"8d1b7aad44c0c6f29e95bb7aacb00704"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\winmd_constants.dart","hash":"0cfcbe0ce66e9725eacd8c5fbc6f604a"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\badge_theme.dart","hash":"a69934394ea5ba56f5289395adad99d2"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\tap_region.dart","hash":"f2c0c439fa7d9e5a3361fb1d45f529e0"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\switch.dart","hash":"c2ec1d6c917cb9e9e0e0a42a1c03499e"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\screen_retriever-0.1.9\\lib\\src\\display.dart","hash":"224150559e6261c41798993a2bd7c9d3"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\painting\\debug.dart","hash":"b4dcd9e8e8e23d189c15921b446f540f"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\animated_icons\\data\\add_event.g.dart","hash":"1f2c17ade0582e6a0b832896261f0ea1"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iwbemhiperfenum.dart","hash":"2b344fedd3805594c1c2981f8c06f148"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationcondition.dart","hash":"0469c2fefb6084f264cd0df8bce7263a"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\clock-1.1.1\\LICENSE","hash":"175792518e4ac015ab6696d16c4f607e"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\crypto-3.0.6\\LICENSE","hash":"5bd4f0c87c75d94b51576389aeaef297"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\placeholder.dart","hash":"1188e587ec792345163653190819f06d"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\file_picker-6.2.1\\LICENSE","hash":"3d853fa9263f8487dd82234ed6b56931"},{"path":"C:\\flutter\\packages\\flutter\\lib\\scheduler.dart","hash":"3ac176a9235973980af3b75bd0c237ff"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\bottom_app_bar.dart","hash":"b6ba4d74e3970a0f3f1c409f604a808b"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\dropdown.dart","hash":"2d08e01197ac81991b91471f886a77af"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\score\\score.dart","hash":"58b9bc8a40fd3e2f7d9d380d0c2d420f"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\inherited_model.dart","hash":"c8ab5bd48c3c29edf5537624074283b5"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\collection-1.19.0\\lib\\src\\priority_queue.dart","hash":"34a4d340931147322eaddc77fdc65c22"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\animated_icons\\data\\home_menu.g.dart","hash":"e1dd5aed7cb9a731106f2a200c99fd42"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\service_extensions.dart","hash":"230a3518091834c1ebaba0eda6ad491e"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\desktop_text_selection_toolbar_button.dart","hash":"4cc3ebba7ffe6fa47bc12524c53af303"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\spell_check_suggestions_toolbar_layout_delegate.dart","hash":"024ba044d40e55c1867a7b96d6dc8760"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\banner.dart","hash":"8ac15481cfd33dc6982a43e2682b191d"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\palettes\\tonal_palette.dart","hash":"44b3c2a3d6e67a3213a49cce58fed932"},{"path":"C:\\flutter\\packages\\flutter\\lib\\widgets.dart","hash":"85e7d38152211cb1c7ff328f96691f59"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\icon_theme_data.dart","hash":"eabb108dbf5b92eaa3180fae75d1c3f4"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\gestures\\team.dart","hash":"193d1801b76c52075287857a01d3fe83"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\animated_icons\\animated_icons_data.dart","hash":"8d5d3ccddf53eafd7a3094278afe8b93"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\radio.dart","hash":"c1d35e1537398f54115d9f56c2bc922f"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\proxy_sliver.dart","hash":"ebf283bb4286732edeb1e354845e0c88"},{"path":"C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\include\\flutter\\plugin_registry.h","hash":"2965e1c3cb28a6e0affd099cb8855065"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\window_manager-0.3.9\\images\\ic_chrome_unmaximize.png","hash":"4a90c1909cb74e8f0d35794e2f61d8bf"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iappxfactory.dart","hash":"aa34ef78c82b66e4c309bd5f4973e3c0"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\elevation_overlay.dart","hash":"fb4a9b5871529d826c0f3d9e57d836b7"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\winmm.g.dart","hash":"b670f26b5ebe125326b4ceadf218d1fe"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\desktop_text_selection_toolbar.dart","hash":"e8e2e9fcc45e6624f8135fdef9af11a5"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iappxmanifestreader3.dart","hash":"d71f66fa79f435e0e9b2a8152443a331"},{"path":"C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\flutter_windows.h","hash":"2a9bade7c568cda738f1d464ea5a7293"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\blend\\blend.dart","hash":"f487ad099842793e5deeebcc3a8048cb"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\button.dart","hash":"863b0fc44e94df789087c6201ce56e2f"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\painting\\matrix_utils.dart","hash":"220771badc11e64d7d8a61a76737d0d8"},{"path":"C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\build\\flutter_assets\\AssetManifest.bin","hash":"a4b67211e676f7329bf0d3c4d41cb628"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\window_manager-0.3.9\\lib\\src\\widgets\\drag_to_move_area.dart","hash":"276cd05f9f30ddbc0371d1ee5ecace4e"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\assertions.dart","hash":"ef91dac42b5e5b3a475c28cdd20c72d1"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\bottom_navigation_bar_item.dart","hash":"47474102c009e7099f3a9bf1d7ea8e06"},{"path":"C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\lib\\main.dart","hash":"f00c8be3f72ad27c26a620f8feb47a79"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\js-0.6.7\\LICENSE","hash":"bfc483b9f818def1209e4faf830541ac"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\quantize\\quantizer.dart","hash":"db799bf48af97b7c0edc93ad96b4a6da"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\painting\\text_span.dart","hash":"97a82a0195c80b82e017af9bc615740e"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\vector_math-2.1.4\\lib\\src\\vector_math_64\\noise.dart","hash":"206b1db3ce5f7b9e5efd220712f8d391"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\text_editing_intents.dart","hash":"e61df3dd752483b76984b44d3d37ab71"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationspreadsheetpattern.dart","hash":"c46a3b47927574d4a8ab22690e395c2e"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\comctl32.g.dart","hash":"d847eca68c58e6b76393b62dc26a7c0a"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\netapi32.g.dart","hash":"1c6d490a13baec49a9edb03d5fb8a00e"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\hct\\src\\hct_solver.dart","hash":"b972c32590c642256132827def0b9923"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\sliver_fill.dart","hash":"fbdb2ee0f52113dd3516920d415a60f5"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationmultipleviewpattern.dart","hash":"6a7998938486af5d266f1b9072166647"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\propertykey.dart","hash":"6b00c4c5c720216a682e1018fb591aa3"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\gestures\\tap.dart","hash":"cc1338d16fcc0c099b17fe559a1af4e7"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\rxdart-0.28.0\\LICENSE","hash":"86d3f3a95c324c9479bd8986968f4327"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\semantics_debugger.dart","hash":"842ac7528eff5cc84b6c6966ddb6f725"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\win32.dart","hash":"a2afa1345e294f0beeb9a776908eab25"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ifileopendialog.dart","hash":"e1b16ab85c86942cde8fabfa972fba9e"},{"path":"C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\texture_registrar_impl.h","hash":"d11b0d138156c864eac0096e67eab4ce"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\api_ms_win_wsl_api_l1_1_0.g.dart","hash":"6c31b298eba9c0df399049d9072d5ede"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ishellitem.dart","hash":"2ea28d523e25da87fbda7e73bc2ffedf"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\action_chip.dart","hash":"7e14c5d8a84bd21772dcc0eed46721d8"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationtablepattern.dart","hash":"f0583593722d8dbc8d76df7f7df11dc7"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\platform-3.1.6\\lib\\src\\interface\\local_platform.dart","hash":"9cc2170ec43e47681be6cb2a313ba1b5"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\services\\platform_views.dart","hash":"5986a9610f98058f977fb497d397d198"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\dropdown_menu.dart","hash":"3dfd7fabfa14947ea1cbb90517128458"},{"path":"C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\flutter_messenger.h","hash":"df550a994131e0f9e04587400a1bf6dc"},{"path":"C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\standard_codec.cc","hash":"715871c20da98485bc7e34c889e80607"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\navigation_bar_theme.dart","hash":"130bdeb556d4cebb55205def587a6a81"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iaudiostreamvolume.dart","hash":"eb9a74dc716d537ceafdd2a40b884df5"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\slider_theme.dart","hash":"ec0a4eb8a6e7be02a35e2d2b01668da0"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\file_picker-6.2.1\\lib\\src\\file_picker_macos.dart","hash":"a23938ed5732e07d7e69ff5affcd2456"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\enums.g.dart","hash":"68763b18d67fc053a444301a9deffb33"},{"path":"C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\include\\flutter\\encodable_value.h","hash":"8e585909beef7c6d2fdd2293af8420c4"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\search_anchor.dart","hash":"90bb26568ff55a583cbea386ce423560"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iagileobject.dart","hash":"4bc403cec1c5846051bca88edb712a8c"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\navigation_rail_theme.dart","hash":"e37f788cd936291df67960229387622b"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\view.dart","hash":"4017638906d150b0b0094be533549ac1"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\icon.dart","hash":"ae9019c399d97918691a06f69335df62"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\window_manager-0.3.9\\lib\\src\\window_manager.dart","hash":"3022e72ecf751b661c572f2cab369c25"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\card.dart","hash":"35bc3e2b8d3bd9a441045ed5f50a2dc1"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\page_scaffold.dart","hash":"f5a0ec2d695abc02a7ef60473bdde956"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\binding.dart","hash":"1facdc61a637ab9b72f3e3e07b5ac0d4"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\imetadataassemblyimport.dart","hash":"bcb3a959e03b0ba17fa42d5f919b2e00"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\back_button.dart","hash":"18939fc6e74f9b391a45ae341fe30128"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\gestures\\multidrag.dart","hash":"7344cf3ca556fab3e221f40653945112"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\async.dart","hash":"15dda7204de4db77a10b27a8d20902df"},{"path":"C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\include\\flutter\\event_stream_handler_functions.h","hash":"33c71b865ae1c540c69017ed45051fd9"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iappxmanifestospackagedependency.dart","hash":"fd0e866e44796643d6fad18400ea6a77"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ishellitemimagefactory.dart","hash":"a966fe9730c6e36f9a0123b9eb1ae505"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\cupertino_icons-1.0.8\\LICENSE","hash":"2d0c70561d7f1d35b4ccc7df9158beed"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\painting\\text_scaler.dart","hash":"ed51dd3f812191698dc5cb29c84f11d8"},{"path":"C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\include\\flutter\\standard_method_codec.h","hash":"0a21a8a7970817a39a47ce6d4c14b664"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\dbghelp.g.dart","hash":"0eab209847ef951bd0a6ff1418f74ba1"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\vector_math-2.1.4\\lib\\src\\vector_math_64\\vector2.dart","hash":"6a0fa6360b3aca8deb85dc7d88176eb8"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\inherited_notifier.dart","hash":"157cc653d91298c7157676cdc31f2f18"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\provider-6.1.2\\lib\\src\\devtool.dart","hash":"2d7d80b5c908559a133f8729b6e755c0"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider_platform_interface-2.1.2\\lib\\src\\method_channel_path_provider.dart","hash":"77ed8d7112753d0eeaa860ecd9fc5ba0"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ienumvariant.dart","hash":"ee434a4fa96c719b92f21bf8e27b42db"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\bottom_sheet.dart","hash":"0ba3b253278406a3b4805ce1a93884a2"},{"path":"C:\\flutter\\bin\\cache\\artifacts\\material_fonts\\MaterialIcons-Regular.otf","hash":"e7069dfd19b331be16bed984668fe080"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\theme_data.dart","hash":"446e0ae8964c15bc5518317cbe83aa31"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\object.dart","hash":"92dc5c1071170d35b5bb9e7d4c5e362c"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\yaml-3.1.3\\LICENSE","hash":"092362603d55c20cda672457571f6483"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\plugin_platform_interface-2.1.8\\lib\\plugin_platform_interface.dart","hash":"8e49d86f5f9c801960f1d579ca210eab"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\semantics\\semantics.dart","hash":"e7efbf97bcf6fe5ecce2f382c99c05c5"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\test_api-0.7.3\\LICENSE","hash":"3323850953be5c35d320c2035aad1a87"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\visibility.dart","hash":"ce3079f7f91b90ac9140f5a1e2840123"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\scroll_notification_observer.dart","hash":"61c1cef76185f009f477c3d9dd49c4ba"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomation5.dart","hash":"3681275c274b0e2b2c9dc14ecc273c1a"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\date_picker.dart","hash":"87b94f5cab50bff28b574c801811b29f"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\colors.dart","hash":"418fbf7b04705fde96067ac9e2faea6c"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\animated_icons\\data\\event_add.g.dart","hash":"8a2ad8a7289e2e5bd7fe7149614dc2fc"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\focus_manager.dart","hash":"a8db81c1bc3a26276fa505d6b92d1a67"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationselectionitempattern.dart","hash":"385e7301c1c09d5c45f0531a5c375c6c"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path-1.9.0\\lib\\src\\style\\windows.dart","hash":"0d86d4ba2e01e5e62f80fcf3e872f561"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\scheme\\scheme_neutral.dart","hash":"3ee18da390e16ca65f2ef168adb8a1ef"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\licenses.dart","hash":"14b41484338436c368d2a0995e9020df"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\tabs.dart","hash":"64d25841c4b324bee45336694c3afbf4"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\characters-1.3.0\\lib\\src\\extensions.dart","hash":"38e17b28106d00f831c56d4e78ca7421"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\quantize\\src\\point_provider.dart","hash":"7504c44d1fa6150901dd65ec78877be0"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationstylespattern.dart","hash":"7326647ec0ab13c912ff9965ccfb4081"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\collection-1.19.0\\lib\\src\\equality_set.dart","hash":"4b5d82ddeb09bc46ae0e980616ce0109"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\text_selection_toolbar_text_button.dart","hash":"cda60e978161ad8864827715569a6015"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\page.dart","hash":"73cbe8f607c667ec18b846f7e1771676"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\painting\\clip.dart","hash":"51cbce8ca842608921a9a5ec8cf0981c"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\painting\\text_style.dart","hash":"99d0a7ade68747bdde3fcbe431df6612"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iaudiosessionenumerator.dart","hash":"befc59cd40e14d926671211e72495596"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\elevated_button_theme.dart","hash":"97ab419c484b0d1eef6feb63b3737cd4"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\selectable_region.dart","hash":"f813af5cbad68ca07a6ab1b8959434a5"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\window_manager-0.3.9\\lib\\src\\window_listener.dart","hash":"6e3c1c55770279a3bd870ce51829b0fa"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\text_theme.dart","hash":"c55cb4d008ae470c3d94aaffe529afe4"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\api_ms_win_core_handle_l1_1_0.g.dart","hash":"cc8236ed613332ed202cadb26db1c743"},{"path":"C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\flutter_windows.dll.pdb","hash":"4fb23927dd7efa1e4e65aa233e63e084"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider_linux-2.2.1\\LICENSE","hash":"a60894397335535eb10b54e2fff9f265"},{"path":"C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\flutter_texture_registrar.h","hash":"ae6ec734a1fc034e30aa1b0146ce6bc4"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\dismissible.dart","hash":"d74003c764e6c2d209bff3a2ed86e777"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ishelllinkdual.dart","hash":"2e8ac7faef1638b9d8022b3da82c3588"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\gestures\\pointer_signal_resolver.dart","hash":"db6de1276bb93466aaa6b8fe04e747ee"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\will_pop_scope.dart","hash":"2d725890566a0e72dff755f814e6f812"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\scheduler\\ticker.dart","hash":"ebd1c81fcad683859a7e01887db755e0"},{"path":"C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\include\\flutter\\plugin_registry.h","hash":"2965e1c3cb28a6e0affd099cb8855065"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iwbemconfigurerefresher.dart","hash":"24c932dcdfa3c21be567bbe9dd305845"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iappxpackagereader.dart","hash":"2c9b99820a7ba58eea5e30ca3585c24f"},{"path":"C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\icudtl.dat","hash":"692337664e861ad322138061132dddc6"},{"path":"C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\include\\flutter\\message_codec.h","hash":"5689a0228921e85497f18097ac2caee3"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\uxtheme.g.dart","hash":"30d51f71b24984c4980f3f3c13df8190"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\popup_menu_theme.dart","hash":"9424c326332bab32b9b324f84728390c"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\switch.dart","hash":"eb5a28f2fe16fc3540983a939e85e177"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\motion.dart","hash":"14324f4186cbdd16f325bf1cf192a00a"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\gesture_detector.dart","hash":"ebf34631057a314478f9be390f80fda7"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\file_picker-6.2.1\\lib\\src\\file_picker_io.dart","hash":"5c6419460180a756254549e04dbb0f73"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\icon_theme_data.dart","hash":"2ed82d0ee4672e99dcdec5652737899f"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\services\\browser_context_menu.dart","hash":"b4eba6b68edfa93319d2263690902196"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\collection-1.19.0\\lib\\src\\canonicalized_map.dart","hash":"f5e7b04452b0066dff82aec6597afdc5"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\progress_indicator.dart","hash":"3368869abc38a760e338f506076f0559"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\window_manager-0.3.9\\images\\ic_chrome_maximize.png","hash":"af7499d7657c8b69d23b85156b60298c"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\collection-1.19.0\\lib\\src\\empty_unmodifiable_set.dart","hash":"0949b8197a6069783a78f4bb0a373fb0"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\provider-6.1.2\\lib\\src\\consumer.dart","hash":"38c2b67895c0418bce6750d3751a5b26"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\icon_button_theme.dart","hash":"d372dd7a5afe4ba4e9439fa0e08fba24"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\input_date_picker_form_field.dart","hash":"d34e181f5286390ce6d10a7bf6506bc3"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path-1.9.0\\lib\\src\\parsed_path.dart","hash":"cb454929d7810d3ee5aa5fc28283d3fd"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\api_ms_win_core_winrt_error_l1_1_0.g.dart","hash":"0c553b8a000e02d64689984657b137a6"},{"path":"C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\include\\flutter\\basic_message_channel.h","hash":"33628118f4222514f50217e0ffa3e963"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\expand_icon.dart","hash":"f2e6d3978ff6b0348b48e4f10cc97b69"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path-1.9.0\\lib\\src\\internal_style.dart","hash":"974d0c452808a1c68d61285d0bd16b28"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ipersistmemory.dart","hash":"06bcab18a6206389adfe991144246ffc"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\painting\\gradient.dart","hash":"9e98e6b849c9f74c7a5fe26ea85a1f01"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\inline.dart","hash":"7f107258e4c6ceef750c5b59f287068f"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\idesktopwallpaper.dart","hash":"74319ce8573194302792ea41f665838b"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\adaptive_text_selection_toolbar.dart","hash":"ab826a8c77d2dce014192c0ecb1374d6"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\painting\\rounded_rectangle_border.dart","hash":"7caaf84e2dffd3175c4b86ef5f712379"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\theme.dart","hash":"bbe07eeca969d22bbbba71a2eaa2fffe"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\sliver_persistent_header.dart","hash":"4c427b44efd5bee14d1e679725b3b090"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\scheme\\scheme_fruit_salad.dart","hash":"3c8d2d2b73f69d670141d376642e5252"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iaudioclient2.dart","hash":"47b806a0c94783b8af1876a42cb6d0cb"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\services\\keyboard_inserted_content.dart","hash":"fe17a06eb234271db2cc2d87de581e8e"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\window_manager-0.3.9\\images\\ic_chrome_minimize.png","hash":"4282cd84cb36edf2efb950ad9269ca62"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\ffi-2.1.3\\lib\\src\\utf8.dart","hash":"3b21907d68a2e99afa8e4103f6a72f78"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\collection-1.19.0\\lib\\collection.dart","hash":"4ba0a4163d73b3df00db62013fb0604e"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\keyboard_listener.dart","hash":"c87e92035314a4d3e52faf886355d0a9"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ispellcheckerchangedeventhandler.dart","hash":"e82d109f954c4a736896b202eba01ce1"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\text_selection.dart","hash":"f011a47745fd8bd705d133bd46d00617"},{"path":"C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\flutter_windows.dll","hash":"809cba5e7deeef4989d56ee18e75bbd7"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\memory_allocations.dart","hash":"780afec8afee633755faec912310be81"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\drag_target.dart","hash":"f73ee5757904401297c37ce114e2d2a5"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\callbacks.dart","hash":"86781b32fca02e40f75c1b196e60fe4b"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\animated_switcher.dart","hash":"ad788d22811412b6221c7de5e6baadc5"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\app_bar_theme.dart","hash":"61a7c8cb019d7b4b133dc84382de854c"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\services\\platform_channel.dart","hash":"36860581ee3e2aa766941e30d7974cc5"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\animated_icons\\data\\ellipsis_search.g.dart","hash":"dbf829c2300f100c1301accafb7b4ff3"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\collection-1.19.0\\lib\\src\\iterable_zip.dart","hash":"df699735e3bcd730f16ce377d562f787"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\imodalwindow.dart","hash":"7837848fa5cbb9801cfadd3856d0479e"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationscrollitempattern.dart","hash":"b09f09d05be41a57a141f88709700efd"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\sliver_prototype_extent_list.dart","hash":"6ca4dc9ebc0188fb83d496476e2072c9"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\immdevicecollection.dart","hash":"5c53c4dc5952c49c1b6ccb65674d9072"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\stream_channel-2.1.2\\LICENSE","hash":"39062f759b587cf2d49199959513204a"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\unicode.dart","hash":"c692323b8d9e3ed3c4c134ba07ab94e6"},{"path":"C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\flutter_export.h","hash":"b2ed4295b5e5adeccba5139e3328839d"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\async-2.11.0\\LICENSE","hash":"39062f759b587cf2d49199959513204a"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ispeechwaveformatex.dart","hash":"919cc78cfaa28ec6b957a771cd0765ed"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\flutter_logo.dart","hash":"23f02b519da70fc68bc0770027370b31"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\page_storage.dart","hash":"ef24941070c1a5e277ef84875c481aa1"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider_foundation-2.4.1\\LICENSE","hash":"a60894397335535eb10b54e2fff9f265"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationselectionpattern2.dart","hash":"2783f528d559449fbd0b97561717c83d"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\animated_icons\\data\\menu_arrow.g.dart","hash":"93fe233cb281b8cab8872397da5e596c"},{"path":"C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\flutter_view_controller.cc","hash":"af8149cbc838de5391f2db0ed58e2ae6"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\consolidate_response.dart","hash":"161b7121f78b81515c68a953d2a1f372"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\layer.dart","hash":"58f525b6ace4ddfe65c9e45799383f31"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\grid_tile_bar.dart","hash":"90f2bfd8a277caf2dfdda31d1db65bf6"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\file_picker-6.2.1\\lib\\src\\linux\\file_picker_linux.dart","hash":"fc89f84bd3517a6feadf1274adbb863b"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\performance_overlay.dart","hash":"95e57e7ca0c3a96d640d41e198b0d8d7"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\drawer_theme.dart","hash":"9469004432b70b7085c9ce3b4ac94293"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path-1.9.0\\lib\\path.dart","hash":"157d1983388ff7abc75e862b5231aa28"},{"path":"C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\build\\flutter_assets\\kernel_blob.bin","hash":"59b0e3a5dd3c53d26f64955df29ba144"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\yaml_edit-2.2.2\\LICENSE","hash":"5105c463534942815d00b551696a5fc7"},{"path":"C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\include\\flutter\\standard_codec_serializer.h","hash":"d06d00cddf7ad0147121c7fde01cce92"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ifiledialog.dart","hash":"dd9bdb173b854917c11832f369e59479"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationelement6.dart","hash":"e2688ec0f1c08b36b90a60cddc63b384"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\date.dart","hash":"a72988c783819c1affb50f71cc404339"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iappxfile.dart","hash":"873012eaf19c72c50b8622e17c72106c"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\contrast\\contrast.dart","hash":"0c9bd1af5747fd55e7488c731ad32dee"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\extensions\\set_string.dart","hash":"097e09840cc00325fdbebaacd05f4827"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\guid.dart","hash":"e5a79b510256712e5dbab68965722534"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ipersistfile.dart","hash":"d27d71d2351cdb9c560055671b5ad215"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\refresh_indicator.dart","hash":"e7235d21d265d455e125792adc7c8eaa"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\bluetoothapis.g.dart","hash":"eeeb5875589f6bf64f72c094f0435b92"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\tab_view.dart","hash":"5a64efcaa7dd1fd5683d9089e469e1f9"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\persistent_hash_map.dart","hash":"b708db8bcf69fa54c230fb82654ee253"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\window_manager-0.3.9\\lib\\src\\window_options.dart","hash":"77eea67a16bedf37e11f67185e2c8af1"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\title.dart","hash":"eb8a87eab443c1122f0b577a5a7d0674"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\scroll_activity.dart","hash":"14dabe368f43293be3ef87bee57a7f14"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iknownfoldermanager.dart","hash":"48d51a5672af342c6b1376d1ff04a4a5"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path-1.9.0\\lib\\src\\path_map.dart","hash":"9d273d5a3c1851b0313cd949e7f84355"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\debug.dart","hash":"6554a6b0b984ff6d52d5a1685db23893"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\debug_overflow_indicator.dart","hash":"64a7812bfa1a336d67245e7ca06fa364"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationsynchronizedinputpattern.dart","hash":"0a1c3f1481c65ee1018b56fe8d8b84ef"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\dynamiccolor\\variant.dart","hash":"8dea906a9b8773920b6d1ccea59807bf"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\selection_container.dart","hash":"836cd409d91948bae18eaabea344f753"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\exceptions.dart","hash":"7c49607737f1eac9820d787b1f2854eb"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\scroll_aware_image_provider.dart","hash":"db628159b4bec9f382987feafac814f2"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\file_picker-6.2.1\\lib\\file_picker.dart","hash":"751894c053cb0627fc0a2f5a21e3692e"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\animation\\animation_style.dart","hash":"8f27bfaeb511bea787cbdcffb888128e"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\icons.dart","hash":"a03d0dea6d2e759ed26f512dc97a03c2"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\scrollbar_theme.dart","hash":"8c6dc0febf45193d83a3433e551832dc"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\time_picker.dart","hash":"a68436d4e35df7697a2847302a1b78bf"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iapplicationactivationmanager.dart","hash":"88d299fd8892c37bab557a1ffb9cec20"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\services\\raw_keyboard.dart","hash":"5ca03d4075489c2401bed7afd621a0ff"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\expansion_tile.dart","hash":"f642cf1205a554270486050c78b16e37"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\vector_math-2.1.4\\lib\\src\\vector_math_64\\intersection_result.dart","hash":"789e79772bba1132b3efdb60636a3ccb"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\localizations.dart","hash":"b8ada56a9afce1f00e08e7b021bcb8bc"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\floating_action_button_theme.dart","hash":"31f9f6ea321b6198be1604f8e2410b20"},{"path":"C:\\flutter\\packages\\flutter_tools\\lib\\src\\build_system\\targets\\windows.dart","hash":"8bf747c5db19c4511eceaf3cfd874769"},{"path":"C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\.dart_tool\\package_config_subset","hash":"7bf123e4d5382579fd03b008194b8e6d"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\provider-6.1.2\\lib\\src\\deferred_inherited_provider.dart","hash":"59ae3a059b0ba1677002bed66f3b8c2d"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\palettes\\core_palette.dart","hash":"d35b72b249d19f54a4cd6f22ff3299e9"},{"path":"C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\engine_method_result.cc","hash":"4936ac7b3323ac51942b0ae603188578"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\services\\text_editing_delta.dart","hash":"c125a915dadee85fe8fdae8d0ae54410"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\isupporterrorinfo.dart","hash":"0318359df96d8b438340156129fd1c68"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\collection-1.19.0\\lib\\src\\algorithms.dart","hash":"0976264b99a1702a5d74e9acb841b775"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\single_child_scroll_view.dart","hash":"c5416cf7f33c8e055eeaa65a8814446f"},{"path":"C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\include\\flutter\\event_stream_handler_functions.h","hash":"33c71b865ae1c540c69017ed45051fd9"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\choice_chip.dart","hash":"4830d28e3ee4aa9ba1501a9d7bbee289"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\oleaut32.g.dart","hash":"fae27a92131d4f2f2005c5312e499b8f"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\temperature\\temperature_cache.dart","hash":"a6350a577e531a76d89b24942fca3073"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\custom_paint.dart","hash":"4bc258e047bde60b5472dd5db45738e3"},{"path":"C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\standard_codec.cc","hash":"715871c20da98485bc7e34c889e80607"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\propsys.g.dart","hash":"769b47b5febf91e7831fd0040b4d3ed0"},{"path":"C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\include\\flutter\\basic_message_channel.h","hash":"33628118f4222514f50217e0ffa3e963"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ispeventsource.dart","hash":"761edf39926ba43b2d6c95d677bad6ab"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\heroes.dart","hash":"a3b337836937c13f49a39743b2e9dc73"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\variant.dart","hash":"68048a53f754265a484cc5c4798db6af"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iappxmanifestreader4.dart","hash":"c475dfaacb936bfc5773b55b5b7db7a3"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\interface_level.dart","hash":"40e543d94e5319e7f325db394483a5cc"},{"path":"C:\\flutter\\packages\\flutter\\LICENSE","hash":"ca58010597a5732e6aa48c6517ab7daf"},{"path":"C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\engine_method_result.cc","hash":"4936ac7b3323ac51942b0ae603188578"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\imetadataimport2.dart","hash":"9cea354b06cd8542da4dd38ff9fc01e9"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\provider-6.1.2\\lib\\src\\async_provider.dart","hash":"3a2d20718f772fbb710aec7dc5e0bf80"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\object.dart","hash":"b614d8172098403c683c68aafa3e92e8"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\date_picker.dart","hash":"acf73f4397d15e5e31f1a837c598e825"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\scroll_simulation.dart","hash":"44e3b08900a8e89a62092676f2245f09"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\material.dart","hash":"8578e11f0e909ced71175ae8aeaee19d"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\orientation_builder.dart","hash":"12d23fd01b29a6ad40525e4bd03a5fe0"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\actions.dart","hash":"28600f5b0a3d53275c980d0ecaf71e35"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\audio_session-0.1.23\\LICENSE","hash":"fba1d88f08129f8046dd091b8abb5ded"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\switch_theme.dart","hash":"2f1331309bb296144b3445f855f5ef7f"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\painting\\oval_border.dart","hash":"f1bc1311609e5f19d7e874122b43d169"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\gestures\\debug.dart","hash":"c15b0c06c9817813063ea4c1023d57fa"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\focus_scope.dart","hash":"5749fd2b60f7c6ae600ed6bfd4679756"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\imetadatatables.dart","hash":"fbce92f0e78e457538005bcb0b9a79f6"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\provider-6.1.2\\lib\\src\\listenable_provider.dart","hash":"fe16b487322631b50c3cbb09de987315"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\shlwapi.g.dart","hash":"bd016bc06a43b71c304daef7333df5cf"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\hct\\hct.dart","hash":"596fb2e55b1ff1662e4bd67461fdc89d"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\action_buttons.dart","hash":"9199de8ac9b51c5258f1b9bc5945e6d0"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\primary_scroll_controller.dart","hash":"cd1716f648982d9d210c1d58ca2f3d28"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationtreewalker.dart","hash":"865471d167a94c3a9bad6cea64f10834"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationcustomnavigationpattern.dart","hash":"f71a5e0c2e702bd1f70b7f60ac19eec3"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\tooltip_theme.dart","hash":"f077efd46130f69fa6752d282168e612"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\services\\raw_keyboard_fuchsia.dart","hash":"48d033e11d964357c0e0739f71388b23"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\inetwork.dart","hash":"d2bb1791822e1c17a18ea8f306180296"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\platform_selectable_region_context_menu.dart","hash":"225c715276cd415e4228eaef6905c0c7"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iappxmanifestreader5.dart","hash":"a938094da69cf329b021d7351a0860fa"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\timeline.dart","hash":"8ff9154cce54a72addf2f48fe65f266f"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\services\\spell_check.dart","hash":"cf0267e98e801aaa2cc53e262cb6775a"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\preferred_size.dart","hash":"07f333d11d639a1ac8457b95be96147e"},{"path":"C:\\flutter\\packages\\flutter\\lib\\physics.dart","hash":"ffd7e9991334466f08df7afe0c721048"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\scroll_position_with_single_context.dart","hash":"a233f949548bc7e1bc2988b8c264fc9c"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider_platform_interface-2.1.2\\lib\\src\\enums.dart","hash":"f4b67c136a2189470329fd33ebe57cb3"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\collection-1.19.0\\lib\\src\\combined_wrappers\\combined_iterable.dart","hash":"67d16e841606c4e5355211fe15a2dbfd"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iunknown.dart","hash":"4c90e2a275589188bd8714dd9cc5650a"},{"path":"C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\include\\flutter\\event_sink.h","hash":"57f0859616ee1faa88ac60f083e9e479"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\spell_check_suggestions_toolbar.dart","hash":"04cf389a619cdfb5a15cebaa4b49fb1b"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\animated_icons\\data\\play_pause.g.dart","hash":"27bef87df3fce59297c7c6aa93738dcd"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\material_button.dart","hash":"32625e5104eba074fc381f3fb06cb176"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\segmented_button_theme.dart","hash":"f442ee79a7d1cfe7021ad844e64c6cf3"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\snapshot_widget.dart","hash":"f4724af4e9b7b1000bae55271c633234"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\vector_math-2.1.4\\lib\\src\\vector_math_64\\vector.dart","hash":"6a67d38bafe568f1b4047286d586fbbc"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\imetadatadispenser.dart","hash":"e653273473a891c0739e255d1b469d55"},{"path":"C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\lib\\services\\audio_processing\\audio_service.dart","hash":"cafe3a1b282b5b0e55a3317861c34db0"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider_windows-2.3.0\\lib\\path_provider_windows.dart","hash":"38dc31b8820f5fd36eedbf7d9c1bf8d9"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\list_wheel_viewport.dart","hash":"92a9fb5bbb4d731698176978af361780"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\animation\\animation.dart","hash":"ba5e6431793ca2418b3beb3a89f581bb"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\ole32.g.dart","hash":"c1527bbe7fe6973a697108d13c3da85b"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\list_body.dart","hash":"798aeabf18ac4da97c366886deb0254f"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\quantize\\quantizer_wu.dart","hash":"c0da8171c63f0ab4e822dd094fc2c595"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\expansion_tile_theme.dart","hash":"265caf611dc4dfb55e5713c3c7e87869"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\api_ms_win_core_comm_l1_1_1.g.dart","hash":"9c3c2afae62dafae40a282af7f685943"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ispellingerror.dart","hash":"b78ba1985c8ec9afaa7beaa601fa8e00"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\api_ms_win_shcore_scaling_l1_1_1.g.dart","hash":"1c0e59efab3b5ae568836b9fa5a3675d"},{"path":"C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\.dart_tool\\flutter_build\\44d21c69a882f08a635e4e2d3f96797b\\app.dill","hash":"59b0e3a5dd3c53d26f64955df29ba144"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\text_button_theme.dart","hash":"04777c53e15d3e5a3edcb50908493743"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\restoration.dart","hash":"d69c889a5ae0efd9db8fc23c11cd6bd3"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\context_menu_button_item.dart","hash":"89d367efde9afc4b7c990508733651b9"},{"path":"C:\\flutter\\packages\\flutter\\lib\\material.dart","hash":"e0fc58cbe26c8afbae96f489212595fa"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\modal_barrier.dart","hash":"7312c07818673d611233ae34da9012b4"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\animated_scroll_view.dart","hash":"2c3e9e4cb3ab51f5b350b9cc496654d6"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\services\\raw_keyboard_web.dart","hash":"a3247e847626b86604378426b8b05c5d"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\sliver_tree.dart","hash":"f183006309c1b04d3fc4ee6f8692eeab"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\tab_controller.dart","hash":"2805633525ce8914c6f3cfd32e401bb7"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationannotationpattern.dart","hash":"2a397f62f7c1670044f38d8f4af1ec92"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\painting\\paint_utilities.dart","hash":"7a23f649958f737fcf117d86f635f1e4"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuri.dart","hash":"7531be50f5bc7d9a762e8842525fc199"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\collection-1.19.0\\lib\\src\\equality_map.dart","hash":"700328ab0177ddfd9a003a8c15619c1a"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\macros.dart","hash":"61161beafb5147bd9216c091fbe776c5"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\inetworklistmanager.dart","hash":"e165be390861acd35be3189fe414b105"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider_windows-2.3.0\\lib\\src\\path_provider_windows_real.dart","hash":"43f4676f21ce5a48daf4878201eb46bb"},{"path":"C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\include\\flutter\\plugin_registrar_windows.h","hash":"638c6d51c16137571be269b9754e378d"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\debug.dart","hash":"f2138801d3af6774b0cdb3ff8f966b8c"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\leak_tracker_flutter_testing-3.0.8\\LICENSE","hash":"f721b495d225cd93026aaeb2f6e41bcc"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\enums.dart","hash":"a71d2292a5f598a6eea9a8ce5f3c5783"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\irestrictederrorinfo.dart","hash":"6bca90e19560bd62e32b8e41c835d71d"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\radio.dart","hash":"fdb73cd1fa108335e45a7bef127f5745"},{"path":"C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\build\\flutter_assets\\packages/window_manager/images/ic_chrome_maximize.png","hash":"af7499d7657c8b69d23b85156b60298c"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\scroll_controller.dart","hash":"968914307d3a5e22499a9d5b76a0cb8c"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\flutter_lints-5.0.0\\LICENSE","hash":"a60894397335535eb10b54e2fff9f265"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationboolcondition.dart","hash":"96cd038c21e3727eb6325be0268a7ed6"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\theme.dart","hash":"5dd8400633f5e9e7f1f8bf48e7dffca8"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\physics\\friction_simulation.dart","hash":"b4317068d9d7b3f0eb870c72d09ddb5e"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\services\\service_extensions.dart","hash":"217b7c2fd7b1eccde5897e1f17fdccf9"},{"path":"C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\include\\flutter\\standard_method_codec.h","hash":"0a21a8a7970817a39a47ce6d4c14b664"},{"path":"C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\include\\flutter\\dart_project.h","hash":"1bfa7371e8772f37681a97622f1d71c4"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\characters-1.3.0\\lib\\src\\grapheme_clusters\\table.dart","hash":"29e1858c5ebc2b4dc6d1528196bfb1b6"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\services\\system_chrome.dart","hash":"474f2f3e04989d90275f6b0828e173c3"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\characters-1.3.0\\LICENSE","hash":"d2e1c26363672670d1aa5cc58334a83b"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\widget_state.dart","hash":"ff388aea80ef0f4e3ab47f1f06ab6c31"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\file_picker-6.2.1\\lib\\src\\platform_file.dart","hash":"22e242c9eb3ef9b9d4ad9ba116c183f8"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\quantize\\quantizer_celebi.dart","hash":"f12f9a9b8bb504f4617bfd1c00d403f0"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\collection-1.19.0\\lib\\src\\functions.dart","hash":"ff39615e1c6340c049a00342dd7ffec5"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ishelllinkdatalist.dart","hash":"68642e049d1aa7d3e55fc1382b0696c0"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\semantics\\semantics_event.dart","hash":"4b27a964d3400de0eef896a6228bab68"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\utils\\string_utils.dart","hash":"603b7b0647b2f77517d6e5cf1d073e5a"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\material_localizations.dart","hash":"40116044a46a9585645a2ea94de07f67"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\form.dart","hash":"498bd94bc442029b68abbbfafd1771d4"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\physics\\simulation.dart","hash":"ef8e59ac8fd1fb4a9b8ba40093583ad3"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\image_icon.dart","hash":"67f572754eb93e6d46cea46dd1b81bba"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\services\\text_formatter.dart","hash":"5e65f1773fa878ab91fffc6b574ac082"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\animated_icons\\animated_icons.dart","hash":"3b68b2d629e5cd3e8b089b459605332c"},{"path":"C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\flutter_windows.h","hash":"2a9bade7c568cda738f1d464ea5a7293"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\dynamiccolor\\dynamic_color.dart","hash":"7ffb6e525c28a185f737e3e6f198f694"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\toggleable.dart","hash":"346f2a019ad1ea1d0d106b406e38e1dd"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\scroll_metrics.dart","hash":"9661eb871d12fbc5d80f90c86f325d96"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\collection-1.19.0\\lib\\src\\utils.dart","hash":"fe2489ea57393e2508d17e99b05f9c99"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\calendar_date_picker.dart","hash":"5c950a52522434ebf9571fde435d4dee"},{"path":"C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\include\\flutter\\flutter_view_controller.h","hash":"61e006b2f1a468a4e9f426352808b1f9"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\color_filter.dart","hash":"918c1513952cacf39a14339a71ff4ea1"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\dynamiccolor\\src\\tone_delta_pair.dart","hash":"f5b38c21bf580c89610a8b58c65aae00"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\vm_service-14.3.0\\LICENSE","hash":"5bd4f0c87c75d94b51576389aeaef297"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\animated_icons\\data\\view_list.g.dart","hash":"f23f3b6a2033a262309d814b0d963131"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\debug.dart","hash":"c77ed440a57bb90c0cb822a2225816cd"},{"path":"C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\include\\flutter\\plugin_registrar.h","hash":"bbcac5a5b3f65a8ff330ce8e26998287"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iinspectable.dart","hash":"3fd143ba1c7f9f9098563ee5b342b240"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\animated_icons.dart","hash":"d8a7b96e6465831f5cf6de56ccddf6b4"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\vector_math-2.1.4\\LICENSE","hash":"22aea0b7487320a5aeef22c3f2dfc977"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\dxva2.g.dart","hash":"73ec60b4a67001fb2adfab990c932c6e"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\services\\keyboard_key.g.dart","hash":"d8a93c8e75a417cae210d942f256ca5e"},{"path":"C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\build\\flutter_assets\\shaders/ink_sparkle.frag","hash":"6d10558fefdc90f0f18050bdc02f2447"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\bloc-8.1.4\\LICENSE","hash":"0dc6cec7b4ef07b48069a9ff484a8ffe"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\immdeviceenumerator.dart","hash":"f31bb216ea8990a64c2326c16fd2ea33"},{"path":"C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\include\\flutter\\method_channel.h","hash":"6b9b44ad236bd35d7b88975402af67d5"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\window_manager-0.3.9\\lib\\window_manager.dart","hash":"fc4b168f1eaeec57762fcabe25d93556"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider_windows-2.3.0\\lib\\src\\win32_wrappers.dart","hash":"af7270fd3861278053b1c45a7b66ece3"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\isensor.dart","hash":"1093e13de26d6c3dd606a01c451762ab"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationandcondition.dart","hash":"698f215aeb2c56fc2970fa91499d8b77"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\app.dart","hash":"214bfdcb3029a0f80f320b76fa9c0a5d"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\menu_anchor.dart","hash":"12c58190a77219903d05a05283dff2a3"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\performance_overlay.dart","hash":"b640a31377f9378484714523f25be099"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\scheme\\scheme_content.dart","hash":"78e53d9a4963c0d19c5ea355a0946e5d"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\extensions\\dialogs.dart","hash":"ca0e62303e3d1154ac7712e05d705c03"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\lookup_boundary.dart","hash":"2e0b624dda8810b895e5c36141bd0c43"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\constants.dart","hash":"38a87ff489a47bc024400dc863be326d"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\time_picker_theme.dart","hash":"72d4b7c6ab9c5614166b19ce28c79869"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\safe_area.dart","hash":"74578366d8f8de03d30f48d6296d36a0"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\leak_tracker-10.0.7\\LICENSE","hash":"f721b495d225cd93026aaeb2f6e41bcc"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\hct\\cam16.dart","hash":"ca959e5242b0f3616ee4b630b9866a51"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\list_tile.dart","hash":"2011323cb0091888650cba67462f3e9f"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\ink_sparkle.dart","hash":"64bfc618a25eaa15e0decb3ff846b687"},{"path":"C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\include\\flutter\\event_stream_handler.h","hash":"ed52e87718a782e3988b7aaa41864050"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\button.dart","hash":"12f710e8dbba7c8a644ec36c584093e3"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationtextchildpattern.dart","hash":"002fd240f385a66281c63dea9b31c069"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationtextrange3.dart","hash":"1b5fd1f26a29d303d480169a8310b991"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\gdi32.g.dart","hash":"3c738a2ffff7c2ec664bdd76408deff9"},{"path":"C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\flutter_windows.dll.lib","hash":"a5ad31e0f09450d568f76661c7e2c286"},{"path":"C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\flutter_engine.cc","hash":"cd2c1391ba36283a0ac46c6324143b8b"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iaudioclientduckingcontrol.dart","hash":"54a357c7c827b2616fd5e9ff6fccbfd7"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\sliver_resizing_header.dart","hash":"4e68fd3411373099a0ffa869d0eeb41e"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\animation\\tween_sequence.dart","hash":"9a7eb049bd2c35586b8ef26b0e9d4bfa"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\pinned_header_sliver.dart","hash":"97f1af611955957117513d5e9ecf31ce"},{"path":"C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\include\\flutter\\binary_messenger.h","hash":"94c591297a24acb890ed50305487b3ab"},{"path":"C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\include\\flutter\\method_channel.h","hash":"6b9b44ad236bd35d7b88975402af67d5"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ispellcheckerfactory.dart","hash":"419b1d6dad30c44e241a804453f78d56"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\input_chip.dart","hash":"50d7992f1dda62d9e1cdc11fb5fe193f"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\table.dart","hash":"999e8d6e7a56dffe8e1edab86cddf90d"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\services\\system_navigator.dart","hash":"d215e2ab6831449adee2f43a9cf21dde"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\box.dart","hash":"37c1ad2527e5452125dad9e73f97a1b5"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ispeechobjecttokens.dart","hash":"2b6a616f4d89d2cc1f4b1004a5e58085"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\sliver_group.dart","hash":"9d9ef34f6520667fdc7d6831ced8cb28"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\_isolates_io.dart","hash":"12de34775f26dc96798a726aed9c1895"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\painting\\strut_style.dart","hash":"8cb875a5ca649498461420066ef034e4"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\kernel32.g.dart","hash":"edf7bceb5006082ec684ee177cdf3025"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\bottom_tab_bar.dart","hash":"22f86c3c4f9ea753ec9c891e77b29b84"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\list_section.dart","hash":"d26af0099253cd637ee68a15ec360d59"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\web-1.1.0\\LICENSE","hash":"d53c45c14285d5ae1612c4146c90050b"},{"path":"C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\build\\flutter_assets\\packages/cupertino_icons/assets/CupertinoIcons.ttf","hash":"b93248a553f9e8bc17f1065929d5934b"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\vector_math-2.1.4\\lib\\src\\vector_math_64\\utilities.dart","hash":"3f5e8feebce49c954d9c5ac1cda935c1"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\segmented_control.dart","hash":"783d79a076dca8f6090609673e94f1d9"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\paginated_data_table.dart","hash":"8a3b8d27019d16b6db69fc464749b063"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\plugin_platform_interface-2.1.8\\LICENSE","hash":"a60894397335535eb10b54e2fff9f265"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ispvoice.dart","hash":"ace74499f232b87549db3ce1828579ca"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ienumnetworks.dart","hash":"c07567abbc3cd64d4f3175c3e142da55"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\tween_animation_builder.dart","hash":"68fa2747d846becb6cae2bd247a1f86d"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\_bitfield_io.dart","hash":"28e75a6163100cda69edad35f4d9202b"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\sliver_tree.dart","hash":"6a8a899adcd3897a28c6985f0c239886"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\gestures\\constants.dart","hash":"c6dd0c20e5521905acdd0e209727ec65"},{"path":"C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\include\\flutter\\method_call.h","hash":"dbca77cccacce0fe72b9a51e2f0e36f1"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\value_listenable_builder.dart","hash":"b895dd95937a0aaf786505df4fa0e5fb"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\isimpleaudiovolume.dart","hash":"654b609384b7b69890219a8d8eb510ce"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ishellitemfilter.dart","hash":"3fb5dd9d7f42a9e619dd81d5bbead392"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\curves.dart","hash":"db008d9d847b5c30b4ecfe80ec7dcc14"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ispeechbasestream.dart","hash":"095d62c8e0367fb3c65fa8c828e95c4e"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ifiledialogcustomize.dart","hash":"2815892e3735c223c62476ddaf4cb27f"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\text_selection.dart","hash":"41d7e4aca9095aa0ffa6d18fd994af07"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\services\\text_boundary.dart","hash":"273a0c4c20f7a2b715c34db25c737264"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\grid_paper.dart","hash":"53e368901ef47a75e50412f3e215fa3a"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\platform-3.1.6\\LICENSE","hash":"7b710a7321d046e0da399b64da662c0b"},{"path":"C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\include\\flutter\\byte_streams.h","hash":"9d19b63eca625e8a7c4d37c63dd32c54"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\animation\\tween.dart","hash":"83f3fe2da23a7a3b644ef2c8ea858d97"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\scheme\\scheme_monochrome.dart","hash":"66272a6751b167051ba879724cfe5749"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\painting\\binding.dart","hash":"74ab9e14501d5549532bc172264d0424"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\painting\\image_stream.dart","hash":"f40980afb2c03793cde4d218b7dfe6ce"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\serialization.dart","hash":"63f6f34dbf353dd0dccf02e3579f109e"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\constants.dart","hash":"aa402e044e82ab02e7161a2be4697135"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\animated_cross_fade.dart","hash":"643b84b4297b7e330dfa23ea461585ef"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\scroll_position.dart","hash":"b9594cab36a0f304b824062803918631"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\version.g.dart","hash":"b967c8105d10206324262df9fb1a662b"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\animation\\listener_helpers.dart","hash":"55e2bfe8be9272daed91a206b48a4584"},{"path":"C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\include\\flutter\\engine_method_result.h","hash":"bd234e0cb49f374af1858db77ef6f8a6"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\screen_retriever-0.1.9\\lib\\src\\screen_retriever.dart","hash":"21c3130e6a99c297db1b12a6bd721dad"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\custom_layout.dart","hash":"a61ee31c49a4aaf5f3a98af02f8b7ae7"},{"path":"C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\include\\flutter\\standard_message_codec.h","hash":"d037e411536f03280ce015fedd7d5c2e"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\collection-1.19.0\\lib\\src\\boollist.dart","hash":"206ef1a664f500f173416d5634d95c8b"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\vector_math-2.1.4\\lib\\src\\vector_math_64\\quaternion.dart","hash":"698a6fc4361dd42bae9034c9c2b6cf7b"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\activity_indicator.dart","hash":"a6233596487e99f0490dd1cd028b2b6f"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iaudiocaptureclient.dart","hash":"98c8a48ba3ece7573f6f3a9bfde19840"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\animated_icons\\data\\menu_home.g.dart","hash":"a78fb79c5ae5aaca3a06db2bd0f1ad74"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\scarddlg.g.dart","hash":"a40d6cf5dd5de2536012a2ab2690e67e"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\api_ms_win_core_sysinfo_l1_2_3.g.dart","hash":"f22a66d83ebf3e0455559a16f49e70bd"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\services\\raw_keyboard_windows.dart","hash":"8c2cb59c4b074ec3ba427024031056e6"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\meta-1.15.0\\lib\\meta_meta.dart","hash":"8b83501f9451392bceda63c9281db57d"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\debug.dart","hash":"8910e1a56d71bf34bcd3e5cd8786f16a"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\winspool.g.dart","hash":"0f22a1dc771ec0ad975c574b1ce5dd70"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\data_table_theme.dart","hash":"81cb6391e0df23208c07fb243f46af37"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\print.dart","hash":"f15f34717397d60152d5d34a33b75a88"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\chip_theme.dart","hash":"214d2ababd129745cd0fd19a8c03473a"},{"path":"C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\texture_registrar_impl.h","hash":"d11b0d138156c864eac0096e67eab4ce"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\vector_math-2.1.4\\lib\\src\\vector_math_64\\colors.dart","hash":"5ed8acdae7dd3501b64b0ff3e33c1f45"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\collections.dart","hash":"c99b3887957e017aa0867d9a56bb9608"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\services\\binding.dart","hash":"1b60e56f0678efe687c81d0409e2bbc8"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\types.dart","hash":"4a1d1bdbd4e9be4c8af1a6c656730a66"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\sliver_padding.dart","hash":"32ab00e06c2e96015944c29272042891"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\ticker_provider.dart","hash":"6815dea119b327bd3ce8756a1e14773a"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iconnectionpointcontainer.dart","hash":"83f156972f99a181b244f428cdf134bb"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\platform-3.1.6\\lib\\src\\interface\\platform.dart","hash":"d2bab4c7d26ccfe4608fe8b47dd3b75c"},{"path":"C:\\flutter\\packages\\flutter_tools\\lib\\src\\build_system\\targets\\common.dart","hash":"bee2b2312d8a87cbe17570d2bf872905"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\vector_math-2.1.4\\lib\\src\\vector_math_64\\constants.dart","hash":"aa4b5c0cdb6a66685350611b29ca9d38"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\standard_component_type.dart","hash":"e4a800bc05d33cd889fb85b8d5df24bb"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\desktop_text_selection_toolbar.dart","hash":"05019db2e6b03c3df79e0f3c002a0734"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\provider-6.1.2\\lib\\src\\proxy_provider.dart","hash":"57b51f6f00c6bc3a29abbf83fbd804f8"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\radio_list_tile.dart","hash":"2695053ea1fa59545adcd8b10cf7664e"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\collection-1.19.0\\lib\\src\\combined_wrappers\\combined_map.dart","hash":"13c9680b76d03cbd8c23463259d8deb1"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\scheme\\scheme.dart","hash":"a6adbe3868e017441360895c35fd6aa2"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\platform_view.dart","hash":"dcd173e0678899401bff84c3a256bc9c"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\typed_data-1.4.0\\LICENSE","hash":"39062f759b587cf2d49199959513204a"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ienumnetworkconnections.dart","hash":"ee244b933f07447928851d56170a8050"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\search_field.dart","hash":"a57609688ba407442c358d4e1294739e"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ipropertystore.dart","hash":"2e62c409a0c6ea9effbb7a045742e1b4"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\layout_helper.dart","hash":"0b8d24a7191ba03b322f83ce1590e2a7"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\synchronous_future.dart","hash":"10fedd75e9b6e5d8bd58d4005c62f8e5"},{"path":"C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\include\\flutter\\standard_codec_serializer.h","hash":"d06d00cddf7ad0147121c7fde01cce92"},{"path":"C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\include\\flutter\\event_channel.h","hash":"8d92b22b136f8165f953f2179f464dfc"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\isolates.dart","hash":"fe21271614c8485bd9b8aaa6242623d2"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\switch_list_tile.dart","hash":"9fe869d7b38ad8c9b2b82b8755631f88"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\ffigen-11.0.0\\LICENSE","hash":"e89cdcc4087b96d9eff61985b86fa4c3"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\services\\system_sound.dart","hash":"6f752b00d684f1287d498ca51f0ce435"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\widget_inspector.dart","hash":"0ae07a14319c9f730c284544e8225f35"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\gestures\\gesture_settings.dart","hash":"bde138fb87621d2d487d8955f9560b48"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\irunningobjecttable.dart","hash":"03e32ac40b7907db555eec5ac3a5dab5"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path-1.9.0\\lib\\src\\style\\url.dart","hash":"13c8dcc201f970674db72fbbd0505581"},{"path":"C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\binary_messenger_impl.h","hash":"115e2bfb9be67a0f21912d44ca6f7d6c"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\binding.dart","hash":"b7ff96a27c667a22ccfdace98c6ca7fc"},{"path":"C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\binary_messenger_impl.h","hash":"115e2bfb9be67a0f21912d44ca6f7d6c"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\animated_icons\\data\\search_ellipsis.g.dart","hash":"26eeff5813436e5e735ebd1ed8e94448"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\text_form_field.dart","hash":"41402052ab3d1572da3568ba99f438b1"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\platform.dart","hash":"69e5a7f8f485b93b091d65670f4d8cd5"},{"path":"C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\flutter_texture_registrar.h","hash":"ae6ec734a1fc034e30aa1b0146ce6bc4"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider_linux-2.2.1\\lib\\src\\get_application_id_real.dart","hash":"0e5b422d23b62b43ea48da9f0ad7fd47"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\flow.dart","hash":"793840286fbad13c5aad3a7cb6c9fd24"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\imoniker.dart","hash":"e6febe06d728a39b4945898e0b1294d5"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\LICENSE","hash":"aca2926dd73b3e20037d949c2c374da2"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\just_audio_web-0.4.13\\LICENSE","hash":"fba1d88f08129f8046dd091b8abb5ded"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\animation\\animation_controller.dart","hash":"10b20e4a220ff81322487cec3b397008"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\painting\\box_border.dart","hash":"42e09f4521401d53df322e410a4010c3"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ispeechvoicestatus.dart","hash":"f242cfdba2fc6ad938c53befa4c2050c"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\painting\\alignment.dart","hash":"a09abbaf7209e37fc309c9852e7c4396"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\checkbox.dart","hash":"74c1d595cb34dd366e91aa97aaad0bfa"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\dislike\\dislike_analyzer.dart","hash":"d7eb1678ec74acd9857a4193fd62ed5b"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\meta-1.15.0\\LICENSE","hash":"83228a1ae32476770262d4ff2ac6f984"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\gestures\\long_press.dart","hash":"9271394c46950516587f111e451e189c"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationdroptargetpattern.dart","hash":"1ea35c2990caf75b07d8a555f3f49191"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\material\\badge.dart","hash":"09affe54f14fd2d19a0ef40318d17f8e"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\semantics\\binding.dart","hash":"16f396eab9f772df85f0b0f50018dd7a"},{"path":"C:\\flutter\\packages\\flutter\\lib\\painting.dart","hash":"7b5d0b987cc8c397c881d50069014242"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\status_transitions.dart","hash":"28f82224d294690d1c6e1021dc0ebf5d"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ienumwbemclassobject.dart","hash":"9419b7e38f497126339e8cd2ccba9e66"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\gestures\\velocity_tracker.dart","hash":"e61baa67949f9568bf0b72430552bba2"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\bthprops.g.dart","hash":"791b58d08f6e26165658bbd5ad0c5b2e"},{"path":"C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\include\\flutter\\texture_registrar.h","hash":"974eeb3b01b785fd5e525eeb19dd7780"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\scheme\\scheme_rainbow.dart","hash":"0bc80db5885f9d8ecc0f80ddab6fe8b4"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\args-2.6.0\\LICENSE","hash":"d26b134ce6925adbbb07c08b02583fb8"},{"path":"C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\include\\flutter\\flutter_engine.h","hash":"75124e51d0da32a2adb9afb1099f17cc"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\autofill.dart","hash":"cb0e23db8ab17f9c9f2f4a8a766e50f4"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iappxmanifestreader6.dart","hash":"693ddae25fe758b1b3329d7d0ed5a005"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\extensions\\set_string_array.dart","hash":"dce5e400c1f0958583196f9db05de7b9"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\vector_math-2.1.4\\lib\\src\\vector_math_64\\obb3.dart","hash":"5ca0b5786bf63efd4fc72fcecfe1b36c"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\xdg_directories-1.1.0\\LICENSE","hash":"a60894397335535eb10b54e2fff9f265"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\tweens.dart","hash":"7cc7aeddf9c2fc7af65f7db5dd3e5089"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationtextrangearray.dart","hash":"5a8ea03396d41d3b76a510289dee5d25"},{"path":"C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path-1.9.0\\LICENSE","hash":"e9f463669bd6dfea2166dcdcbf392645"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\pages.dart","hash":"7c7512d53c9dce12c960425241dbaec4"},{"path":"C:\\flutter\\bin\\internal\\engine.version","hash":"065286f9270e292c5119be71a61e2412"},{"path":"C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\disposable_build_context.dart","hash":"e1c116ad0a584a34aed67c041ea64d9a"}]}

// File: .dart_tool\flutter_build\44d21c69a882f08a635e4e2d3f96797b\debug_bundle_windows-x64_assets.stamp
----------------------------------------
{"inputs":["C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\.dart_tool\\flutter_build\\44d21c69a882f08a635e4e2d3f96797b\\app.dill","C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\pubspec.yaml","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\cupertino_icons-1.0.8\\assets\\CupertinoIcons.ttf","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\window_manager-0.3.9\\images\\ic_chrome_close.png","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\window_manager-0.3.9\\images\\ic_chrome_maximize.png","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\window_manager-0.3.9\\images\\ic_chrome_minimize.png","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\window_manager-0.3.9\\images\\ic_chrome_unmaximize.png","C:\\flutter\\bin\\cache\\artifacts\\material_fonts\\MaterialIcons-Regular.otf","C:\\flutter\\packages\\flutter\\lib\\src\\material\\shaders\\ink_sparkle.frag","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\args-2.6.0\\LICENSE","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\async-2.11.0\\LICENSE","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\audio_session-0.1.23\\LICENSE","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\bloc-8.1.4\\LICENSE","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\boolean_selector-2.1.1\\LICENSE","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\characters-1.3.0\\LICENSE","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\cli_util-0.4.2\\LICENSE","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\clock-1.1.1\\LICENSE","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\collection-1.19.0\\LICENSE","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\crypto-3.0.6\\LICENSE","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\cupertino_icons-1.0.8\\LICENSE","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\equatable-2.0.7\\LICENSE","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\fake_async-1.3.1\\LICENSE","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\ffi-2.1.3\\LICENSE","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\ffigen-11.0.0\\LICENSE","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\file-7.0.1\\LICENSE","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\file_picker-6.2.1\\LICENSE","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\fixnum-1.1.1\\LICENSE","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\fl_chart-0.66.2\\LICENSE","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\flutter_bloc-8.1.6\\LICENSE","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\flutter_lints-5.0.0\\LICENSE","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\flutter_midi-1.1.0\\LICENSE","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\flutter_plugin_android_lifecycle-2.0.24\\LICENSE","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\glob-2.1.3\\LICENSE","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\js-0.6.7\\LICENSE","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\just_audio-0.9.43\\LICENSE","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\just_audio_platform_interface-4.3.0\\LICENSE","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\just_audio_web-0.4.13\\LICENSE","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\leak_tracker-10.0.7\\LICENSE","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\leak_tracker_flutter_testing-3.0.8\\LICENSE","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\leak_tracker_testing-3.0.1\\LICENSE","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\lints-5.1.1\\LICENSE","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\logging-1.3.0\\LICENSE","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\matcher-0.12.16+1\\LICENSE","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\LICENSE","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\meta-1.15.0\\LICENSE","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\nested-1.0.0\\LICENSE","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\package_config-2.1.1\\LICENSE","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path-1.9.0\\LICENSE","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider-2.1.5\\LICENSE","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider_android-2.2.15\\LICENSE","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider_foundation-2.4.1\\LICENSE","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider_linux-2.2.1\\LICENSE","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider_macos-2.0.7\\LICENSE","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider_platform_interface-2.1.2\\LICENSE","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider_windows-2.3.0\\LICENSE","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\platform-3.1.6\\LICENSE","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\plugin_platform_interface-2.1.8\\LICENSE","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\provider-6.1.2\\LICENSE","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\quiver-3.2.2\\LICENSE","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\rxdart-0.28.0\\LICENSE","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\screen_retriever-0.1.9\\LICENSE","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\source_span-1.10.0\\LICENSE","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\sprintf-7.0.0\\LICENSE","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\stack_trace-1.12.0\\LICENSE","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\stream_channel-2.1.2\\LICENSE","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\string_scanner-1.3.0\\LICENSE","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\term_glyph-1.2.1\\LICENSE","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\test_api-0.7.3\\LICENSE","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\tonic-0.2.5\\LICENSE","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\typed_data-1.4.0\\LICENSE","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\uuid-4.5.1\\LICENSE","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\vector_math-2.1.4\\LICENSE","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\vm_service-14.3.0\\LICENSE","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\web-1.1.0\\LICENSE","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\LICENSE","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\window_manager-0.3.9\\LICENSE","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\xdg_directories-1.1.0\\LICENSE","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\yaml-3.1.3\\LICENSE","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\yaml_edit-2.2.2\\LICENSE","C:\\flutter\\bin\\cache\\pkg\\sky_engine\\LICENSE","C:\\flutter\\packages\\flutter\\LICENSE"],"outputs":["C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\build\\flutter_assets\\kernel_blob.bin","C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\build\\flutter_assets\\packages/cupertino_icons/assets/CupertinoIcons.ttf","C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\build\\flutter_assets\\packages/window_manager/images/ic_chrome_close.png","C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\build\\flutter_assets\\packages/window_manager/images/ic_chrome_maximize.png","C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\build\\flutter_assets\\packages/window_manager/images/ic_chrome_minimize.png","C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\build\\flutter_assets\\packages/window_manager/images/ic_chrome_unmaximize.png","C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\build\\flutter_assets\\fonts/MaterialIcons-Regular.otf","C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\build\\flutter_assets\\shaders/ink_sparkle.frag","C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\build\\flutter_assets\\AssetManifest.json","C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\build\\flutter_assets\\AssetManifest.bin","C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\build\\flutter_assets\\FontManifest.json","C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\build\\flutter_assets\\NOTICES.Z"]}

// File: .dart_tool\flutter_build\44d21c69a882f08a635e4e2d3f96797b\flutter_assets.d
----------------------------------------
 C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\build\\flutter_assets\\packages/cupertino_icons/assets/CupertinoIcons.ttf C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\build\\flutter_assets\\packages/window_manager/images/ic_chrome_close.png C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\build\\flutter_assets\\packages/window_manager/images/ic_chrome_maximize.png C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\build\\flutter_assets\\packages/window_manager/images/ic_chrome_minimize.png C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\build\\flutter_assets\\packages/window_manager/images/ic_chrome_unmaximize.png C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\build\\flutter_assets\\fonts/MaterialIcons-Regular.otf C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\build\\flutter_assets\\shaders/ink_sparkle.frag C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\build\\flutter_assets\\AssetManifest.json C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\build\\flutter_assets\\AssetManifest.bin C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\build\\flutter_assets\\FontManifest.json C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\build\\flutter_assets\\NOTICES.Z:  C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\pubspec.yaml C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\cupertino_icons-1.0.8\\assets\\CupertinoIcons.ttf C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\window_manager-0.3.9\\images\\ic_chrome_close.png C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\window_manager-0.3.9\\images\\ic_chrome_maximize.png C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\window_manager-0.3.9\\images\\ic_chrome_minimize.png C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\window_manager-0.3.9\\images\\ic_chrome_unmaximize.png C:\\flutter\\bin\\cache\\artifacts\\material_fonts\\MaterialIcons-Regular.otf C:\\flutter\\packages\\flutter\\lib\\src\\material\\shaders\\ink_sparkle.frag C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\args-2.6.0\\LICENSE C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\async-2.11.0\\LICENSE C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\audio_session-0.1.23\\LICENSE C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\bloc-8.1.4\\LICENSE C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\boolean_selector-2.1.1\\LICENSE C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\characters-1.3.0\\LICENSE C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\cli_util-0.4.2\\LICENSE C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\clock-1.1.1\\LICENSE C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\collection-1.19.0\\LICENSE C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\crypto-3.0.6\\LICENSE C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\cupertino_icons-1.0.8\\LICENSE C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\equatable-2.0.7\\LICENSE C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\fake_async-1.3.1\\LICENSE C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\ffi-2.1.3\\LICENSE C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\ffigen-11.0.0\\LICENSE C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\file-7.0.1\\LICENSE C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\file_picker-6.2.1\\LICENSE C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\fixnum-1.1.1\\LICENSE C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\fl_chart-0.66.2\\LICENSE C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\flutter_bloc-8.1.6\\LICENSE C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\flutter_lints-5.0.0\\LICENSE C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\flutter_midi-1.1.0\\LICENSE C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\flutter_plugin_android_lifecycle-2.0.24\\LICENSE C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\glob-2.1.3\\LICENSE C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\js-0.6.7\\LICENSE C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\just_audio-0.9.43\\LICENSE C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\just_audio_platform_interface-4.3.0\\LICENSE C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\just_audio_web-0.4.13\\LICENSE C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\leak_tracker-10.0.7\\LICENSE C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\leak_tracker_flutter_testing-3.0.8\\LICENSE C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\leak_tracker_testing-3.0.1\\LICENSE C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\lints-5.1.1\\LICENSE C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\logging-1.3.0\\LICENSE C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\matcher-0.12.16+1\\LICENSE C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\LICENSE C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\meta-1.15.0\\LICENSE C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\nested-1.0.0\\LICENSE C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\package_config-2.1.1\\LICENSE C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path-1.9.0\\LICENSE C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider-2.1.5\\LICENSE C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider_android-2.2.15\\LICENSE C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider_foundation-2.4.1\\LICENSE C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider_linux-2.2.1\\LICENSE C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider_macos-2.0.7\\LICENSE C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider_platform_interface-2.1.2\\LICENSE C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider_windows-2.3.0\\LICENSE C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\platform-3.1.6\\LICENSE C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\plugin_platform_interface-2.1.8\\LICENSE C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\provider-6.1.2\\LICENSE C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\quiver-3.2.2\\LICENSE C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\rxdart-0.28.0\\LICENSE C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\screen_retriever-0.1.9\\LICENSE C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\source_span-1.10.0\\LICENSE C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\sprintf-7.0.0\\LICENSE C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\stack_trace-1.12.0\\LICENSE C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\stream_channel-2.1.2\\LICENSE C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\string_scanner-1.3.0\\LICENSE C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\term_glyph-1.2.1\\LICENSE C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\test_api-0.7.3\\LICENSE C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\tonic-0.2.5\\LICENSE C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\typed_data-1.4.0\\LICENSE C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\uuid-4.5.1\\LICENSE C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\vector_math-2.1.4\\LICENSE C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\vm_service-14.3.0\\LICENSE C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\web-1.1.0\\LICENSE C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\LICENSE C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\window_manager-0.3.9\\LICENSE C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\xdg_directories-1.1.0\\LICENSE C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\yaml-3.1.3\\LICENSE C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\yaml_edit-2.2.2\\LICENSE C:\\flutter\\bin\\cache\\pkg\\sky_engine\\LICENSE C:\\flutter\\packages\\flutter\\LICENSE

// File: .dart_tool\flutter_build\44d21c69a882f08a635e4e2d3f96797b\gen_dart_plugin_registrant.stamp
----------------------------------------
{"inputs":["C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\.dart_tool\\package_config_subset"],"outputs":["C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\.dart_tool\\flutter_build\\dart_plugin_registrant.dart"]}

// File: .dart_tool\flutter_build\44d21c69a882f08a635e4e2d3f96797b\gen_localizations.stamp
----------------------------------------
{"inputs":[],"outputs":[]}

// File: .dart_tool\flutter_build\44d21c69a882f08a635e4e2d3f96797b\kernel_snapshot.stamp
----------------------------------------
{"inputs":["C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\.dart_tool\\flutter_build\\44d21c69a882f08a635e4e2d3f96797b\\program.dill","C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\.dart_tool\\flutter_build\\44d21c69a882f08a635e4e2d3f96797b\\native_assets.dill"],"outputs":[]}

// File: .dart_tool\flutter_build\44d21c69a882f08a635e4e2d3f96797b\kernel_snapshot_native_assets.stamp
----------------------------------------
{"inputs":["C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\.dart_tool\\flutter_build\\44d21c69a882f08a635e4e2d3f96797b\\native_assets.yaml","C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\.dart_tool\\package_config_subset","C:\\flutter\\packages\\flutter_tools\\lib\\src\\build_system\\targets\\common.dart","C:\\flutter\\bin\\internal\\engine.version","C:\\flutter\\bin\\internal\\engine.version","C:\\flutter\\bin\\internal\\engine.version","C:\\flutter\\bin\\internal\\engine.version"],"outputs":["C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\.dart_tool\\flutter_build\\44d21c69a882f08a635e4e2d3f96797b\\native_assets.dill"]}

// File: .dart_tool\flutter_build\44d21c69a882f08a635e4e2d3f96797b\kernel_snapshot_program.d
----------------------------------------
C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\.dart_tool\\flutter_build\\44d21c69a882f08a635e4e2d3f96797b\\program.dill: C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\characters-1.3.0\\lib\\characters.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\characters-1.3.0\\lib\\src\\characters.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\characters-1.3.0\\lib\\src\\characters_impl.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\characters-1.3.0\\lib\\src\\extensions.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\characters-1.3.0\\lib\\src\\grapheme_clusters\\breaks.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\characters-1.3.0\\lib\\src\\grapheme_clusters\\constants.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\characters-1.3.0\\lib\\src\\grapheme_clusters\\table.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\collection-1.19.0\\lib\\collection.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\collection-1.19.0\\lib\\src\\algorithms.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\collection-1.19.0\\lib\\src\\boollist.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\collection-1.19.0\\lib\\src\\unmodifiable_wrappers.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\collection-1.19.0\\lib\\src\\canonicalized_map.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\collection-1.19.0\\lib\\src\\combined_wrappers\\combined_iterable.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\collection-1.19.0\\lib\\src\\combined_wrappers\\combined_iterator.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\collection-1.19.0\\lib\\src\\combined_wrappers\\combined_list.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\collection-1.19.0\\lib\\src\\combined_wrappers\\combined_map.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\collection-1.19.0\\lib\\src\\comparators.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\collection-1.19.0\\lib\\src\\empty_unmodifiable_set.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\collection-1.19.0\\lib\\src\\equality.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\collection-1.19.0\\lib\\src\\equality_map.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\collection-1.19.0\\lib\\src\\equality_set.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\collection-1.19.0\\lib\\src\\functions.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\collection-1.19.0\\lib\\src\\iterable_extensions.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\collection-1.19.0\\lib\\src\\iterable_zip.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\collection-1.19.0\\lib\\src\\list_extensions.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\collection-1.19.0\\lib\\src\\priority_queue.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\collection-1.19.0\\lib\\src\\queue_list.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\collection-1.19.0\\lib\\src\\union_set.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\collection-1.19.0\\lib\\src\\union_set_controller.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\collection-1.19.0\\lib\\src\\utils.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\collection-1.19.0\\lib\\src\\wrappers.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\ffi-2.1.3\\lib\\ffi.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\ffi-2.1.3\\lib\\src\\allocation.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\ffi-2.1.3\\lib\\src\\arena.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\ffi-2.1.3\\lib\\src\\utf16.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\ffi-2.1.3\\lib\\src\\utf8.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\file_picker-6.2.1\\lib\\file_picker.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\file_picker-6.2.1\\lib\\src\\exceptions.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\file_picker-6.2.1\\lib\\src\\file_picker.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\file_picker-6.2.1\\lib\\src\\file_picker_io.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\file_picker-6.2.1\\lib\\src\\file_picker_macos.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\file_picker-6.2.1\\lib\\src\\file_picker_result.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\file_picker-6.2.1\\lib\\src\\linux\\dialog_handler.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\file_picker-6.2.1\\lib\\src\\linux\\file_picker_linux.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\file_picker-6.2.1\\lib\\src\\linux\\kdialog_handler.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\file_picker-6.2.1\\lib\\src\\linux\\qarma_and_zenity_handler.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\file_picker-6.2.1\\lib\\src\\platform_file.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\file_picker-6.2.1\\lib\\src\\utils.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\file_picker-6.2.1\\lib\\src\\windows\\file_picker_windows.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\file_picker-6.2.1\\lib\\src\\windows\\file_picker_windows_ffi_types.dart C:\\flutter\\packages\\flutter\\lib\\animation.dart C:\\flutter\\packages\\flutter\\lib\\cupertino.dart C:\\flutter\\packages\\flutter\\lib\\foundation.dart C:\\flutter\\packages\\flutter\\lib\\gestures.dart C:\\flutter\\packages\\flutter\\lib\\material.dart C:\\flutter\\packages\\flutter\\lib\\painting.dart C:\\flutter\\packages\\flutter\\lib\\physics.dart C:\\flutter\\packages\\flutter\\lib\\rendering.dart C:\\flutter\\packages\\flutter\\lib\\scheduler.dart C:\\flutter\\packages\\flutter\\lib\\semantics.dart C:\\flutter\\packages\\flutter\\lib\\services.dart C:\\flutter\\packages\\flutter\\lib\\src\\animation\\animation.dart C:\\flutter\\packages\\flutter\\lib\\src\\animation\\animation_controller.dart C:\\flutter\\packages\\flutter\\lib\\src\\animation\\listener_helpers.dart C:\\flutter\\packages\\flutter\\lib\\src\\animation\\animation_style.dart C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\diagnostics.dart C:\\flutter\\packages\\flutter\\lib\\src\\animation\\animations.dart C:\\flutter\\packages\\flutter\\lib\\src\\animation\\curves.dart C:\\flutter\\packages\\flutter\\lib\\src\\animation\\tween.dart C:\\flutter\\packages\\flutter\\lib\\src\\animation\\tween_sequence.dart C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\activity_indicator.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\ticker_provider.dart C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\adaptive_text_selection_toolbar.dart C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\app.dart C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\bottom_tab_bar.dart C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\button.dart C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\checkbox.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\toggleable.dart C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\colors.dart C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\constants.dart C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\context_menu.dart C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\context_menu_action.dart C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\date_picker.dart C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\debug.dart C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\desktop_text_selection.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\text_selection.dart C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\desktop_text_selection_toolbar.dart C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\desktop_text_selection_toolbar_button.dart C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\dialog.dart C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\form_row.dart C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\form_section.dart C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\icon_theme_data.dart C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\icons.dart C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\interface_level.dart C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\list_section.dart C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\list_tile.dart C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\localizations.dart C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\magnifier.dart C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\nav_bar.dart C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\page_scaffold.dart C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\picker.dart C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\radio.dart C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\refresh.dart C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\object.dart C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\route.dart C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\scrollbar.dart C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\search_field.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\restoration.dart C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\segmented_control.dart C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\box.dart C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\slider.dart C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\sliding_segmented_control.dart C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\spell_check_suggestions_toolbar.dart C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\switch.dart C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\tab_scaffold.dart C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\tab_view.dart C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\text_field.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\automatic_keep_alive.dart C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\text_form_field_row.dart C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\text_selection.dart C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\text_selection_toolbar.dart C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\text_selection_toolbar_button.dart C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\text_theme.dart C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\theme.dart C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\thumb_painter.dart C:\\flutter\\packages\\flutter\\lib\\src\\dart_plugin_registrant.dart C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\_bitfield_io.dart C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\_capabilities_io.dart C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\_isolates_io.dart C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\_platform_io.dart C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\_timeline_io.dart C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\annotations.dart C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\assertions.dart C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\basic_types.dart C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\binding.dart C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\bitfield.dart C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\capabilities.dart C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\change_notifier.dart C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\collections.dart C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\consolidate_response.dart C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\constants.dart C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\debug.dart C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\isolates.dart C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\key.dart C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\licenses.dart C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\memory_allocations.dart C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\node.dart C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\object.dart C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\observer_list.dart C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\persistent_hash_map.dart C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\platform.dart C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\print.dart C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\serialization.dart C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\service_extensions.dart C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\stack_frame.dart C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\synchronous_future.dart C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\timeline.dart C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\unicode.dart C:\\flutter\\packages\\flutter\\lib\\src\\gestures\\arena.dart C:\\flutter\\packages\\flutter\\lib\\src\\gestures\\binding.dart C:\\flutter\\packages\\flutter\\lib\\src\\gestures\\constants.dart C:\\flutter\\packages\\flutter\\lib\\src\\gestures\\converter.dart C:\\flutter\\packages\\flutter\\lib\\src\\gestures\\debug.dart C:\\flutter\\packages\\flutter\\lib\\src\\gestures\\drag.dart C:\\flutter\\packages\\flutter\\lib\\src\\gestures\\drag_details.dart C:\\flutter\\packages\\flutter\\lib\\src\\gestures\\eager.dart C:\\flutter\\packages\\flutter\\lib\\src\\gestures\\events.dart C:\\flutter\\packages\\flutter\\lib\\src\\gestures\\force_press.dart C:\\flutter\\packages\\flutter\\lib\\src\\gestures\\gesture_settings.dart C:\\flutter\\packages\\flutter\\lib\\src\\gestures\\hit_test.dart C:\\flutter\\packages\\flutter\\lib\\src\\gestures\\long_press.dart C:\\flutter\\packages\\flutter\\lib\\src\\gestures\\lsq_solver.dart C:\\flutter\\packages\\flutter\\lib\\src\\gestures\\monodrag.dart C:\\flutter\\packages\\flutter\\lib\\src\\gestures\\multidrag.dart C:\\flutter\\packages\\flutter\\lib\\src\\gestures\\multitap.dart C:\\flutter\\packages\\flutter\\lib\\src\\gestures\\pointer_router.dart C:\\flutter\\packages\\flutter\\lib\\src\\gestures\\pointer_signal_resolver.dart C:\\flutter\\packages\\flutter\\lib\\src\\gestures\\recognizer.dart C:\\flutter\\packages\\flutter\\lib\\src\\gestures\\resampler.dart C:\\flutter\\packages\\flutter\\lib\\src\\gestures\\scale.dart C:\\flutter\\packages\\flutter\\lib\\src\\gestures\\tap.dart C:\\flutter\\packages\\flutter\\lib\\src\\gestures\\tap_and_drag.dart C:\\flutter\\packages\\flutter\\lib\\src\\gestures\\team.dart C:\\flutter\\packages\\flutter\\lib\\src\\gestures\\velocity_tracker.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\about.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\action_buttons.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\action_chip.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\action_icons_theme.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\adaptive_text_selection_toolbar.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\animated_icons.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\animated_icons\\animated_icons.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\animated_icons\\animated_icons_data.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\animated_icons\\data\\add_event.g.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\animated_icons\\data\\arrow_menu.g.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\animated_icons\\data\\close_menu.g.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\animated_icons\\data\\ellipsis_search.g.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\animated_icons\\data\\event_add.g.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\animated_icons\\data\\home_menu.g.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\animated_icons\\data\\list_view.g.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\animated_icons\\data\\menu_arrow.g.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\animated_icons\\data\\menu_close.g.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\animated_icons\\data\\menu_home.g.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\animated_icons\\data\\pause_play.g.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\animated_icons\\data\\play_pause.g.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\animated_icons\\data\\search_ellipsis.g.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\animated_icons\\data\\view_list.g.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\app.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\app_bar.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\app_bar_theme.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\arc.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\autocomplete.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\back_button.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\badge.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\badge_theme.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\banner.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\banner_theme.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\bottom_app_bar.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\bottom_app_bar_theme.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\bottom_navigation_bar.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\bottom_navigation_bar_theme.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\bottom_sheet.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\bottom_sheet_theme.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\button.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\material_state_mixin.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\button_bar.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\button_bar_theme.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\button_style.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\button_style_button.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\button_theme.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\calendar_date_picker.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\card.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\card_theme.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\carousel.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\checkbox.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\checkbox_list_tile.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\checkbox_theme.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\chip.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\slotted_render_object_widget.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\chip_theme.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\choice_chip.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\circle_avatar.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\color_scheme.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\colors.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\constants.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\curves.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\data_table.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\data_table_source.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\data_table_theme.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\date.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\date_picker.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\date_picker_theme.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\debug.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\desktop_text_selection.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\desktop_text_selection_toolbar.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\desktop_text_selection_toolbar_button.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\dialog.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\dialog_theme.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\divider.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\divider_theme.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\drawer.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\drawer_header.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\drawer_theme.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\dropdown.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\binding.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\dropdown_menu.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\dropdown_menu_theme.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\elevated_button.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\elevated_button_theme.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\elevation_overlay.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\expand_icon.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\expansion_panel.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\expansion_tile.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\expansion_tile_theme.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\filled_button.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\filled_button_theme.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\filter_chip.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\flexible_space_bar.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\floating_action_button.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\floating_action_button_location.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\floating_action_button_theme.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\grid_tile.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\grid_tile_bar.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\icon_button.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\icon_button_theme.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\icons.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\ink_decoration.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\ink_highlight.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\ink_ripple.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\ink_sparkle.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\ink_splash.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\ink_well.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\input_border.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\input_chip.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\input_date_picker_form_field.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\input_decorator.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\list_tile.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\list_tile_theme.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\magnifier.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\material.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\material_button.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\material_localizations.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\material_state.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\menu_anchor.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\menu_bar_theme.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\menu_button_theme.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\menu_style.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\menu_theme.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\mergeable_material.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\motion.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\navigation_bar.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\navigation_bar_theme.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\navigation_drawer.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\navigation_drawer_theme.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\navigation_rail.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\navigation_rail_theme.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\no_splash.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\outlined_button.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\outlined_button_theme.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\page.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\page_transitions_theme.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\paginated_data_table.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\popup_menu.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\popup_menu_theme.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\predictive_back_page_transitions_builder.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\progress_indicator.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\progress_indicator_theme.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\radio.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\radio_list_tile.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\radio_theme.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\range_slider.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\refresh_indicator.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\reorderable_list.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\scaffold.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\scrollbar.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\scrollbar_theme.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\search.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\search_anchor.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\search_bar_theme.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\search_view_theme.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\segmented_button.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\segmented_button_theme.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\selectable_text.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\selection_area.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\shadows.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\slider.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\slider_theme.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\snack_bar.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\snack_bar_theme.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\spell_check_suggestions_toolbar.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\spell_check_suggestions_toolbar_layout_delegate.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\stepper.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\switch.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\switch_list_tile.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\switch_theme.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\tab_bar_theme.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\tab_controller.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\tab_indicator.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\tabs.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\text_button.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\text_button_theme.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\text_field.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\text_form_field.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\text_selection.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\text_selection_theme.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\text_selection_toolbar.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\text_selection_toolbar_text_button.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\text_theme.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\theme.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\theme_data.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\time.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\time_picker.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\time_picker_theme.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\toggle_buttons.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\toggle_buttons_theme.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\tooltip.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\tooltip_theme.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\tooltip_visibility.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\typography.dart C:\\flutter\\packages\\flutter\\lib\\src\\material\\user_accounts_drawer_header.dart C:\\flutter\\packages\\flutter\\lib\\src\\painting\\_network_image_io.dart C:\\flutter\\packages\\flutter\\lib\\src\\painting\\alignment.dart C:\\flutter\\packages\\flutter\\lib\\src\\painting\\basic_types.dart C:\\flutter\\packages\\flutter\\lib\\src\\painting\\beveled_rectangle_border.dart C:\\flutter\\packages\\flutter\\lib\\src\\painting\\binding.dart C:\\flutter\\packages\\flutter\\lib\\src\\painting\\border_radius.dart C:\\flutter\\packages\\flutter\\lib\\src\\painting\\borders.dart C:\\flutter\\packages\\flutter\\lib\\src\\painting\\box_border.dart C:\\flutter\\packages\\flutter\\lib\\src\\painting\\box_decoration.dart C:\\flutter\\packages\\flutter\\lib\\src\\painting\\box_fit.dart C:\\flutter\\packages\\flutter\\lib\\src\\painting\\box_shadow.dart C:\\flutter\\packages\\flutter\\lib\\src\\painting\\circle_border.dart C:\\flutter\\packages\\flutter\\lib\\src\\painting\\clip.dart C:\\flutter\\packages\\flutter\\lib\\src\\painting\\colors.dart C:\\flutter\\packages\\flutter\\lib\\src\\painting\\continuous_rectangle_border.dart C:\\flutter\\packages\\flutter\\lib\\src\\painting\\debug.dart C:\\flutter\\packages\\flutter\\lib\\src\\painting\\decoration.dart C:\\flutter\\packages\\flutter\\lib\\src\\painting\\decoration_image.dart C:\\flutter\\packages\\flutter\\lib\\src\\painting\\edge_insets.dart C:\\flutter\\packages\\flutter\\lib\\src\\painting\\flutter_logo.dart C:\\flutter\\packages\\flutter\\lib\\src\\painting\\fractional_offset.dart C:\\flutter\\packages\\flutter\\lib\\src\\painting\\geometry.dart C:\\flutter\\packages\\flutter\\lib\\src\\painting\\gradient.dart C:\\flutter\\packages\\flutter\\lib\\src\\painting\\image_cache.dart C:\\flutter\\packages\\flutter\\lib\\src\\painting\\image_decoder.dart C:\\flutter\\packages\\flutter\\lib\\src\\painting\\image_provider.dart C:\\flutter\\packages\\flutter\\lib\\src\\painting\\image_resolution.dart C:\\flutter\\packages\\flutter\\lib\\src\\painting\\image_stream.dart C:\\flutter\\packages\\flutter\\lib\\src\\painting\\inline_span.dart C:\\flutter\\packages\\flutter\\lib\\src\\painting\\linear_border.dart C:\\flutter\\packages\\flutter\\lib\\src\\painting\\matrix_utils.dart C:\\flutter\\packages\\flutter\\lib\\src\\painting\\notched_shapes.dart C:\\flutter\\packages\\flutter\\lib\\src\\painting\\oval_border.dart C:\\flutter\\packages\\flutter\\lib\\src\\painting\\paint_utilities.dart C:\\flutter\\packages\\flutter\\lib\\src\\painting\\placeholder_span.dart C:\\flutter\\packages\\flutter\\lib\\src\\painting\\rounded_rectangle_border.dart C:\\flutter\\packages\\flutter\\lib\\src\\painting\\shader_warm_up.dart C:\\flutter\\packages\\flutter\\lib\\src\\painting\\shape_decoration.dart C:\\flutter\\packages\\flutter\\lib\\src\\painting\\stadium_border.dart C:\\flutter\\packages\\flutter\\lib\\src\\painting\\star_border.dart C:\\flutter\\packages\\flutter\\lib\\src\\painting\\strut_style.dart C:\\flutter\\packages\\flutter\\lib\\src\\painting\\text_painter.dart C:\\flutter\\packages\\flutter\\lib\\src\\painting\\text_scaler.dart C:\\flutter\\packages\\flutter\\lib\\src\\painting\\text_span.dart C:\\flutter\\packages\\flutter\\lib\\src\\painting\\text_style.dart C:\\flutter\\packages\\flutter\\lib\\src\\physics\\clamped_simulation.dart C:\\flutter\\packages\\flutter\\lib\\src\\physics\\friction_simulation.dart C:\\flutter\\packages\\flutter\\lib\\src\\physics\\gravity_simulation.dart C:\\flutter\\packages\\flutter\\lib\\src\\physics\\simulation.dart C:\\flutter\\packages\\flutter\\lib\\src\\physics\\spring_simulation.dart C:\\flutter\\packages\\flutter\\lib\\src\\physics\\tolerance.dart C:\\flutter\\packages\\flutter\\lib\\src\\physics\\utils.dart C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\animated_size.dart C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\binding.dart C:\\flutter\\packages\\flutter\\lib\\src\\scheduler\\binding.dart C:\\flutter\\packages\\flutter\\lib\\src\\services\\binding.dart C:\\flutter\\packages\\flutter\\lib\\src\\semantics\\binding.dart C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\custom_layout.dart C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\custom_paint.dart C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\debug.dart C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\debug_overflow_indicator.dart C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\decorated_sliver.dart C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\editable.dart C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\paragraph.dart C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\error.dart C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\flex.dart C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\flow.dart C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\image.dart C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\layer.dart C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\layout_helper.dart C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\list_body.dart C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\list_wheel_viewport.dart C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\mouse_tracker.dart C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\selection.dart C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\performance_overlay.dart C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\platform_view.dart C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\proxy_box.dart C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\proxy_sliver.dart C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\rotated_box.dart C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\service_extensions.dart C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\shifted_box.dart C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\sliver.dart C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\sliver_fill.dart C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\sliver_fixed_extent_list.dart C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\sliver_grid.dart C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\sliver_group.dart C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\sliver_list.dart C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\sliver_multi_box_adaptor.dart C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\sliver_padding.dart C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\sliver_persistent_header.dart C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\sliver_tree.dart C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\stack.dart C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\table.dart C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\table_border.dart C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\texture.dart C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\tweens.dart C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\view.dart C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\viewport.dart C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\viewport_offset.dart C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\wrap.dart C:\\flutter\\packages\\flutter\\lib\\src\\scheduler\\debug.dart C:\\flutter\\packages\\flutter\\lib\\src\\scheduler\\priority.dart C:\\flutter\\packages\\flutter\\lib\\src\\scheduler\\service_extensions.dart C:\\flutter\\packages\\flutter\\lib\\src\\scheduler\\ticker.dart C:\\flutter\\packages\\flutter\\lib\\src\\semantics\\debug.dart C:\\flutter\\packages\\flutter\\lib\\src\\semantics\\semantics.dart C:\\flutter\\packages\\flutter\\lib\\src\\semantics\\semantics_event.dart C:\\flutter\\packages\\flutter\\lib\\src\\semantics\\semantics_service.dart C:\\flutter\\packages\\flutter\\lib\\src\\services\\_background_isolate_binary_messenger_io.dart C:\\flutter\\packages\\flutter\\lib\\src\\services\\asset_bundle.dart C:\\flutter\\packages\\flutter\\lib\\src\\services\\asset_manifest.dart C:\\flutter\\packages\\flutter\\lib\\src\\services\\autofill.dart C:\\flutter\\packages\\flutter\\lib\\src\\services\\binary_messenger.dart C:\\flutter\\packages\\flutter\\lib\\src\\services\\browser_context_menu.dart C:\\flutter\\packages\\flutter\\lib\\src\\services\\clipboard.dart C:\\flutter\\packages\\flutter\\lib\\src\\services\\debug.dart C:\\flutter\\packages\\flutter\\lib\\src\\services\\deferred_component.dart C:\\flutter\\packages\\flutter\\lib\\src\\services\\flavor.dart C:\\flutter\\packages\\flutter\\lib\\src\\services\\font_loader.dart C:\\flutter\\packages\\flutter\\lib\\src\\services\\haptic_feedback.dart C:\\flutter\\packages\\flutter\\lib\\src\\services\\hardware_keyboard.dart C:\\flutter\\packages\\flutter\\lib\\src\\services\\keyboard_inserted_content.dart C:\\flutter\\packages\\flutter\\lib\\src\\services\\keyboard_key.g.dart C:\\flutter\\packages\\flutter\\lib\\src\\services\\keyboard_maps.g.dart C:\\flutter\\packages\\flutter\\lib\\src\\services\\live_text.dart C:\\flutter\\packages\\flutter\\lib\\src\\services\\message_codec.dart C:\\flutter\\packages\\flutter\\lib\\src\\services\\message_codecs.dart C:\\flutter\\packages\\flutter\\lib\\src\\services\\mouse_cursor.dart C:\\flutter\\packages\\flutter\\lib\\src\\services\\mouse_tracking.dart C:\\flutter\\packages\\flutter\\lib\\src\\services\\platform_channel.dart C:\\flutter\\packages\\flutter\\lib\\src\\services\\platform_views.dart C:\\flutter\\packages\\flutter\\lib\\src\\services\\predictive_back_event.dart C:\\flutter\\packages\\flutter\\lib\\src\\services\\process_text.dart C:\\flutter\\packages\\flutter\\lib\\src\\services\\raw_keyboard.dart C:\\flutter\\packages\\flutter\\lib\\src\\services\\raw_keyboard_android.dart C:\\flutter\\packages\\flutter\\lib\\src\\services\\raw_keyboard_fuchsia.dart C:\\flutter\\packages\\flutter\\lib\\src\\services\\raw_keyboard_ios.dart C:\\flutter\\packages\\flutter\\lib\\src\\services\\raw_keyboard_linux.dart C:\\flutter\\packages\\flutter\\lib\\src\\services\\raw_keyboard_macos.dart C:\\flutter\\packages\\flutter\\lib\\src\\services\\raw_keyboard_web.dart C:\\flutter\\packages\\flutter\\lib\\src\\services\\raw_keyboard_windows.dart C:\\flutter\\packages\\flutter\\lib\\src\\services\\restoration.dart C:\\flutter\\packages\\flutter\\lib\\src\\services\\service_extensions.dart C:\\flutter\\packages\\flutter\\lib\\src\\services\\spell_check.dart C:\\flutter\\packages\\flutter\\lib\\src\\services\\system_channels.dart C:\\flutter\\packages\\flutter\\lib\\src\\services\\system_chrome.dart C:\\flutter\\packages\\flutter\\lib\\src\\services\\system_navigator.dart C:\\flutter\\packages\\flutter\\lib\\src\\services\\system_sound.dart C:\\flutter\\packages\\flutter\\lib\\src\\services\\text_boundary.dart C:\\flutter\\packages\\flutter\\lib\\src\\services\\text_editing.dart C:\\flutter\\packages\\flutter\\lib\\src\\services\\text_editing_delta.dart C:\\flutter\\packages\\flutter\\lib\\src\\services\\text_formatter.dart C:\\flutter\\packages\\flutter\\lib\\src\\services\\text_input.dart C:\\flutter\\packages\\flutter\\lib\\src\\services\\text_layout_metrics.dart C:\\flutter\\packages\\flutter\\lib\\src\\services\\undo_manager.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\_html_element_view_io.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\_platform_selectable_region_context_menu_io.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\actions.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\adapter.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\framework.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\animated_cross_fade.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\animated_scroll_view.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\animated_size.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\animated_switcher.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\annotated_region.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\app.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\app_lifecycle_listener.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\async.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\autocomplete.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\autofill.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\banner.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\basic.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\bottom_navigation_bar_item.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\color_filter.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\constants.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\container.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\context_menu_button_item.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\context_menu_controller.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\debug.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\decorated_sliver.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\default_selection_style.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\default_text_editing_shortcuts.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\desktop_text_selection_toolbar_layout_delegate.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\dismissible.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\display_feature_sub_screen.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\disposable_build_context.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\drag_target.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\draggable_scrollable_sheet.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\scroll_notification.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\dual_transition_builder.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\editable_text.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\fade_in_image.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\feedback.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\flutter_logo.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\focus_manager.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\focus_scope.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\focus_traversal.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\form.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\gesture_detector.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\grid_paper.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\heroes.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\icon.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\icon_data.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\icon_theme.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\icon_theme_data.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\image.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\image_filter.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\image_icon.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\implicit_animations.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\inherited_model.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\inherited_notifier.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\inherited_theme.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\interactive_viewer.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\keyboard_listener.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\layout_builder.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\list_wheel_scroll_view.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\localizations.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\lookup_boundary.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\magnifier.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\media_query.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\modal_barrier.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\navigation_toolbar.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\navigator.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\navigator_pop_handler.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\nested_scroll_view.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\notification_listener.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\orientation_builder.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\overflow_bar.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\overlay.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\overscroll_indicator.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\page_storage.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\page_view.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\pages.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\performance_overlay.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\pinned_header_sliver.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\placeholder.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\platform_menu_bar.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\platform_selectable_region_context_menu.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\platform_view.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\pop_scope.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\preferred_size.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\primary_scroll_controller.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\raw_keyboard_listener.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\reorderable_list.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\restoration_properties.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\router.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\routes.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\safe_area.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\scroll_activity.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\scroll_aware_image_provider.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\scroll_configuration.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\scroll_context.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\scroll_controller.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\scroll_delegate.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\scroll_metrics.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\scroll_notification_observer.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\scroll_physics.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\scroll_position.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\scroll_position_with_single_context.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\scroll_simulation.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\scroll_view.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\scrollable.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\scrollable_helpers.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\scrollbar.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\selectable_region.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\selection_container.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\semantics_debugger.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\service_extensions.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\shared_app_data.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\shortcuts.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\single_child_scroll_view.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\size_changed_layout_notifier.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\sliver.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\sliver_fill.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\sliver_floating_header.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\sliver_layout_builder.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\sliver_persistent_header.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\sliver_prototype_extent_list.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\sliver_resizing_header.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\sliver_tree.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\snapshot_widget.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\spacer.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\spell_check.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\standard_component_type.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\status_transitions.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\system_context_menu.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\table.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\tap_region.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\text.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\text_editing_intents.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\text_selection_toolbar_anchors.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\text_selection_toolbar_layout_delegate.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\texture.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\title.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\transitions.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\tween_animation_builder.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\two_dimensional_scroll_view.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\two_dimensional_viewport.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\undo_history.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\unique_widget.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\value_listenable_builder.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\view.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\viewport.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\visibility.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\widget_inspector.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\widget_span.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\widget_state.dart C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\will_pop_scope.dart C:\\flutter\\packages\\flutter\\lib\\widgets.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\blend\\blend.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\contrast\\contrast.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\dislike\\dislike_analyzer.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\dynamiccolor\\dynamic_color.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\dynamiccolor\\dynamic_scheme.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\dynamiccolor\\material_dynamic_colors.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\dynamiccolor\\src\\contrast_curve.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\dynamiccolor\\src\\tone_delta_pair.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\dynamiccolor\\variant.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\hct\\cam16.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\hct\\hct.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\hct\\src\\hct_solver.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\hct\\viewing_conditions.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\material_color_utilities.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\palettes\\core_palette.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\palettes\\tonal_palette.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\quantize\\quantizer.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\quantize\\quantizer_celebi.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\quantize\\quantizer_map.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\quantize\\quantizer_wsmeans.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\quantize\\quantizer_wu.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\quantize\\src\\point_provider.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\quantize\\src\\point_provider_lab.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\scheme\\scheme.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\scheme\\scheme_content.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\scheme\\scheme_expressive.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\scheme\\scheme_fidelity.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\scheme\\scheme_fruit_salad.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\scheme\\scheme_monochrome.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\scheme\\scheme_neutral.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\scheme\\scheme_rainbow.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\scheme\\scheme_tonal_spot.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\scheme\\scheme_vibrant.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\score\\score.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\temperature\\temperature_cache.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\utils\\color_utils.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\utils\\math_utils.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\utils\\string_utils.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\meta-1.15.0\\lib\\meta.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\meta-1.15.0\\lib\\meta_meta.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\nested-1.0.0\\lib\\nested.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path-1.9.0\\lib\\path.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path-1.9.0\\lib\\src\\characters.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path-1.9.0\\lib\\src\\context.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path-1.9.0\\lib\\src\\internal_style.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path-1.9.0\\lib\\src\\parsed_path.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path-1.9.0\\lib\\src\\path_exception.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path-1.9.0\\lib\\src\\path_map.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path-1.9.0\\lib\\src\\path_set.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path-1.9.0\\lib\\src\\style.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path-1.9.0\\lib\\src\\style\\posix.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path-1.9.0\\lib\\src\\style\\url.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path-1.9.0\\lib\\src\\style\\windows.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path-1.9.0\\lib\\src\\utils.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider-2.1.5\\lib\\path_provider.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider_android-2.2.15\\lib\\messages.g.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider_android-2.2.15\\lib\\path_provider_android.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider_foundation-2.4.1\\lib\\messages.g.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider_foundation-2.4.1\\lib\\path_provider_foundation.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider_linux-2.2.1\\lib\\path_provider_linux.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider_linux-2.2.1\\lib\\src\\get_application_id.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider_linux-2.2.1\\lib\\src\\get_application_id_real.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider_linux-2.2.1\\lib\\src\\path_provider_linux.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider_platform_interface-2.1.2\\lib\\path_provider_platform_interface.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider_platform_interface-2.1.2\\lib\\src\\enums.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider_platform_interface-2.1.2\\lib\\src\\method_channel_path_provider.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider_windows-2.3.0\\lib\\path_provider_windows.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider_windows-2.3.0\\lib\\src\\folders.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider_windows-2.3.0\\lib\\src\\guid.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider_windows-2.3.0\\lib\\src\\path_provider_windows_real.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider_windows-2.3.0\\lib\\src\\win32_wrappers.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\platform-3.1.6\\lib\\platform.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\platform-3.1.6\\lib\\src\\interface\\local_platform.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\platform-3.1.6\\lib\\src\\interface\\platform.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\platform-3.1.6\\lib\\src\\testing\\fake_platform.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\plugin_platform_interface-2.1.8\\lib\\plugin_platform_interface.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\provider-6.1.2\\lib\\provider.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\provider-6.1.2\\lib\\src\\async_provider.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\provider-6.1.2\\lib\\src\\change_notifier_provider.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\provider-6.1.2\\lib\\src\\consumer.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\provider-6.1.2\\lib\\src\\listenable_provider.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\provider-6.1.2\\lib\\src\\provider.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\provider-6.1.2\\lib\\src\\deferred_inherited_provider.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\provider-6.1.2\\lib\\src\\inherited_provider.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\provider-6.1.2\\lib\\src\\devtool.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\provider-6.1.2\\lib\\src\\proxy_provider.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\provider-6.1.2\\lib\\src\\reassemble_handler.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\provider-6.1.2\\lib\\src\\selector.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\provider-6.1.2\\lib\\src\\value_listenable_provider.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\screen_retriever-0.1.9\\lib\\screen_retriever.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\screen_retriever-0.1.9\\lib\\src\\display.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\screen_retriever-0.1.9\\lib\\src\\screen_listener.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\screen_retriever-0.1.9\\lib\\src\\screen_retriever.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\vector_math-2.1.4\\lib\\vector_math_64.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\vector_math-2.1.4\\lib\\src\\vector_math_64\\aabb2.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\vector_math-2.1.4\\lib\\src\\vector_math_64\\aabb3.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\vector_math-2.1.4\\lib\\src\\vector_math_64\\colors.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\vector_math-2.1.4\\lib\\src\\vector_math_64\\frustum.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\vector_math-2.1.4\\lib\\src\\vector_math_64\\intersection_result.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\vector_math-2.1.4\\lib\\src\\vector_math_64\\matrix2.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\vector_math-2.1.4\\lib\\src\\vector_math_64\\matrix3.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\vector_math-2.1.4\\lib\\src\\vector_math_64\\matrix4.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\vector_math-2.1.4\\lib\\src\\vector_math_64\\noise.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\vector_math-2.1.4\\lib\\src\\vector_math_64\\obb3.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\vector_math-2.1.4\\lib\\src\\vector_math_64\\plane.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\vector_math-2.1.4\\lib\\src\\vector_math_64\\quad.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\vector_math-2.1.4\\lib\\src\\vector_math_64\\quaternion.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\vector_math-2.1.4\\lib\\src\\vector_math_64\\ray.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\vector_math-2.1.4\\lib\\src\\vector_math_64\\sphere.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\vector_math-2.1.4\\lib\\src\\vector_math_64\\triangle.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\vector_math-2.1.4\\lib\\src\\vector_math_64\\vector.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\vector_math-2.1.4\\lib\\src\\vector_math_64\\vector2.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\vector_math-2.1.4\\lib\\src\\vector_math_64\\vector3.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\vector_math-2.1.4\\lib\\src\\vector_math_64\\vector4.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\vector_math-2.1.4\\lib\\src\\vector_math_64\\constants.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\vector_math-2.1.4\\lib\\src\\vector_math_64\\error_helpers.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\vector_math-2.1.4\\lib\\src\\vector_math_64\\opengl.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\vector_math-2.1.4\\lib\\src\\vector_math_64\\utilities.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\bstr.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\callbacks.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iagileobject.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iapplicationactivationmanager.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iappxfactory.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iappxfile.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iappxfilesenumerator.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iappxmanifestapplication.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iappxmanifestapplicationsenumerator.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iappxmanifestospackagedependency.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iappxmanifestpackagedependenciesenumerator.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iappxmanifestpackagedependency.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iappxmanifestpackageid.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iappxmanifestproperties.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iappxmanifestreader.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iappxmanifestreader2.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iappxmanifestreader3.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iappxmanifestreader4.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iappxmanifestreader5.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iappxmanifestreader6.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iappxmanifestreader7.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iappxpackagereader.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iaudiocaptureclient.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iaudioclient.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iaudioclient2.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iaudioclient3.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iaudioclientduckingcontrol.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iaudioclock.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iaudioclock2.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iaudioclockadjustment.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iaudiorenderclient.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iaudiosessioncontrol.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iaudiosessioncontrol2.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iaudiosessionenumerator.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iaudiosessionmanager.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iaudiosessionmanager2.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iaudiostreamvolume.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ibindctx.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ichannelaudiovolume.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iclassfactory.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iconnectionpoint.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iconnectionpointcontainer.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\idesktopwallpaper.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\idispatch.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ienumidlist.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ienummoniker.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ienumnetworkconnections.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ienumnetworks.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ienumresources.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ienumspellingerror.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ienumstring.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ienumvariant.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ienumwbemclassobject.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ierrorinfo.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ifiledialog.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ifiledialog2.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ifiledialogcustomize.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ifileisinuse.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ifileopendialog.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ifilesavedialog.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iinitializewithwindow.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iinspectable.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iknownfolder.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iknownfoldermanager.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\imetadataassemblyimport.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\imetadatadispenser.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\imetadatadispenserex.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\imetadataimport.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\imetadataimport2.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\imetadatatables.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\imetadatatables2.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\immdevice.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\immdevicecollection.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\immdeviceenumerator.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\immendpoint.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\immnotificationclient.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\imodalwindow.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\imoniker.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\inetwork.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\inetworkconnection.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\inetworklistmanager.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\inetworklistmanagerevents.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ipersist.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ipersistfile.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ipersistmemory.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ipersiststream.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ipropertystore.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iprovideclassinfo.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\irestrictederrorinfo.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\irunningobjecttable.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\isensor.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\isensorcollection.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\isensordatareport.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\isensormanager.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\isequentialstream.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ishellfolder.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ishellitem.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ishellitem2.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ishellitemarray.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ishellitemfilter.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ishellitemimagefactory.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ishellitemresources.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ishelllink.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ishelllinkdatalist.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ishelllinkdual.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ishellservice.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\isimpleaudiovolume.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ispeechaudioformat.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ispeechbasestream.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ispeechobjecttoken.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ispeechobjecttokens.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ispeechvoice.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ispeechvoicestatus.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ispeechwaveformatex.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ispellchecker.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ispellchecker2.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ispellcheckerchangedeventhandler.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ispellcheckerfactory.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ispellingerror.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ispeventsource.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ispnotifysource.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ispvoice.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\istream.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\isupporterrorinfo.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\itypeinfo.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomation.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomation2.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomation3.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomation4.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomation5.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomation6.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationandcondition.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationannotationpattern.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationboolcondition.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationcacherequest.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationcondition.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationcustomnavigationpattern.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationdockpattern.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationdragpattern.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationdroptargetpattern.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationelement.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationelement2.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationelement3.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationelement4.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationelement5.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationelement6.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationelement7.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationelement8.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationelement9.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationelementarray.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationexpandcollapsepattern.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationgriditempattern.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationgridpattern.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationinvokepattern.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationitemcontainerpattern.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationlegacyiaccessiblepattern.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationmultipleviewpattern.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationnotcondition.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationobjectmodelpattern.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationorcondition.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationpropertycondition.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationproxyfactory.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationproxyfactoryentry.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationproxyfactorymapping.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationrangevaluepattern.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationscrollitempattern.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationscrollpattern.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationselectionitempattern.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationselectionpattern.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationselectionpattern2.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationspreadsheetitempattern.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationspreadsheetpattern.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationstylespattern.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationsynchronizedinputpattern.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationtableitempattern.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationtablepattern.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationtextchildpattern.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationtexteditpattern.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationtextpattern.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationtextpattern2.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationtextrange.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationtextrange2.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationtextrange3.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationtextrangearray.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationtogglepattern.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationtransformpattern.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationtransformpattern2.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationtreewalker.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationvaluepattern.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationvirtualizeditempattern.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationwindowpattern.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iunknown.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuri.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ivirtualdesktopmanager.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iwbemclassobject.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iwbemconfigurerefresher.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iwbemcontext.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iwbemhiperfenum.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iwbemlocator.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iwbemobjectaccess.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iwbemrefresher.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iwbemservices.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iwebauthenticationcoremanagerinterop.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iwinhttprequest.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\combase.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\constants.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\constants_metadata.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\constants_nodoc.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\dispatcher.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\enums.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\enums.g.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\exceptions.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\extensions\\dialogs.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\extensions\\int_to_hexstring.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\extensions\\list_to_blob.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\extensions\\set_ansi.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\extensions\\set_string.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\extensions\\set_string_array.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\extensions\\unpack_utf16.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\functions.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\guid.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\inline.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\macros.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\propertykey.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\structs.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\structs.g.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\types.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\utils.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\variant.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\advapi32.g.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\api_ms_win_core_apiquery_l2_1_0.g.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\api_ms_win_core_comm_l1_1_1.g.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\api_ms_win_core_comm_l1_1_2.g.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\api_ms_win_core_handle_l1_1_0.g.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\api_ms_win_core_sysinfo_l1_2_3.g.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\api_ms_win_core_winrt_error_l1_1_0.g.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\api_ms_win_core_winrt_l1_1_0.g.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\api_ms_win_core_winrt_string_l1_1_0.g.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\api_ms_win_ro_typeresolution_l1_1_0.g.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\api_ms_win_ro_typeresolution_l1_1_1.g.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\api_ms_win_shcore_scaling_l1_1_1.g.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\api_ms_win_wsl_api_l1_1_0.g.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\bluetoothapis.g.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\bthprops.g.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\comctl32.g.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\comdlg32.g.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\crypt32.g.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\dbghelp.g.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\dwmapi.g.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\dxva2.g.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\gdi32.g.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\iphlpapi.g.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\kernel32.g.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\magnification.g.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\netapi32.g.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\ntdll.g.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\ole32.g.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\oleaut32.g.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\powrprof.g.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\propsys.g.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\rometadata.g.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\scarddlg.g.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\setupapi.g.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\shell32.g.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\shlwapi.g.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\user32.g.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\uxtheme.g.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\version.g.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\winmm.g.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\winscard.g.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\winspool.g.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\wlanapi.g.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\wtsapi32.g.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\xinput1_4.g.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\winmd_constants.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\winrt_helpers.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\win32.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\window_manager-0.3.9\\lib\\src\\resize_edge.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\window_manager-0.3.9\\lib\\src\\title_bar_style.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\window_manager-0.3.9\\lib\\src\\utils\\calc_window_position.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\window_manager-0.3.9\\lib\\src\\widgets\\drag_to_move_area.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\window_manager-0.3.9\\lib\\src\\widgets\\drag_to_resize_area.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\window_manager-0.3.9\\lib\\src\\widgets\\virtual_window_frame.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\window_manager-0.3.9\\lib\\src\\window_listener.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\window_manager-0.3.9\\lib\\src\\widgets\\window_caption.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\window_manager-0.3.9\\lib\\src\\widgets\\window_caption_button.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\window_manager-0.3.9\\lib\\src\\window_manager.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\window_manager-0.3.9\\lib\\src\\window_options.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\window_manager-0.3.9\\lib\\window_manager.dart C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\xdg_directories-1.1.0\\lib\\xdg_directories.dart C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\.dart_tool\\flutter_build\\dart_plugin_registrant.dart C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\lib\\main.dart C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\lib\\ui\\app.dart C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\lib\\ui\\screens\\home_screen.dart C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\lib\\services\\audio_processing\\audio_service.dart


// File: .dart_tool\flutter_build\44d21c69a882f08a635e4e2d3f96797b\kernel_snapshot_program.stamp
----------------------------------------
{"inputs":["C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\.dart_tool\\package_config_subset","C:\\flutter\\packages\\flutter_tools\\lib\\src\\build_system\\targets\\common.dart","C:\\flutter\\bin\\internal\\engine.version","C:\\flutter\\bin\\internal\\engine.version","C:\\flutter\\bin\\internal\\engine.version","C:\\flutter\\bin\\internal\\engine.version","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\characters-1.3.0\\lib\\characters.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\characters-1.3.0\\lib\\src\\characters.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\characters-1.3.0\\lib\\src\\characters_impl.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\characters-1.3.0\\lib\\src\\extensions.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\characters-1.3.0\\lib\\src\\grapheme_clusters\\breaks.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\characters-1.3.0\\lib\\src\\grapheme_clusters\\constants.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\characters-1.3.0\\lib\\src\\grapheme_clusters\\table.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\collection-1.19.0\\lib\\collection.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\collection-1.19.0\\lib\\src\\algorithms.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\collection-1.19.0\\lib\\src\\boollist.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\collection-1.19.0\\lib\\src\\unmodifiable_wrappers.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\collection-1.19.0\\lib\\src\\canonicalized_map.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\collection-1.19.0\\lib\\src\\combined_wrappers\\combined_iterable.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\collection-1.19.0\\lib\\src\\combined_wrappers\\combined_iterator.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\collection-1.19.0\\lib\\src\\combined_wrappers\\combined_list.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\collection-1.19.0\\lib\\src\\combined_wrappers\\combined_map.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\collection-1.19.0\\lib\\src\\comparators.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\collection-1.19.0\\lib\\src\\empty_unmodifiable_set.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\collection-1.19.0\\lib\\src\\equality.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\collection-1.19.0\\lib\\src\\equality_map.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\collection-1.19.0\\lib\\src\\equality_set.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\collection-1.19.0\\lib\\src\\functions.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\collection-1.19.0\\lib\\src\\iterable_extensions.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\collection-1.19.0\\lib\\src\\iterable_zip.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\collection-1.19.0\\lib\\src\\list_extensions.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\collection-1.19.0\\lib\\src\\priority_queue.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\collection-1.19.0\\lib\\src\\queue_list.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\collection-1.19.0\\lib\\src\\union_set.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\collection-1.19.0\\lib\\src\\union_set_controller.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\collection-1.19.0\\lib\\src\\utils.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\collection-1.19.0\\lib\\src\\wrappers.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\ffi-2.1.3\\lib\\ffi.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\ffi-2.1.3\\lib\\src\\allocation.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\ffi-2.1.3\\lib\\src\\arena.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\ffi-2.1.3\\lib\\src\\utf16.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\ffi-2.1.3\\lib\\src\\utf8.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\file_picker-6.2.1\\lib\\file_picker.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\file_picker-6.2.1\\lib\\src\\exceptions.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\file_picker-6.2.1\\lib\\src\\file_picker.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\file_picker-6.2.1\\lib\\src\\file_picker_io.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\file_picker-6.2.1\\lib\\src\\file_picker_macos.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\file_picker-6.2.1\\lib\\src\\file_picker_result.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\file_picker-6.2.1\\lib\\src\\linux\\dialog_handler.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\file_picker-6.2.1\\lib\\src\\linux\\file_picker_linux.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\file_picker-6.2.1\\lib\\src\\linux\\kdialog_handler.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\file_picker-6.2.1\\lib\\src\\linux\\qarma_and_zenity_handler.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\file_picker-6.2.1\\lib\\src\\platform_file.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\file_picker-6.2.1\\lib\\src\\utils.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\file_picker-6.2.1\\lib\\src\\windows\\file_picker_windows.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\file_picker-6.2.1\\lib\\src\\windows\\file_picker_windows_ffi_types.dart","C:\\flutter\\packages\\flutter\\lib\\animation.dart","C:\\flutter\\packages\\flutter\\lib\\cupertino.dart","C:\\flutter\\packages\\flutter\\lib\\foundation.dart","C:\\flutter\\packages\\flutter\\lib\\gestures.dart","C:\\flutter\\packages\\flutter\\lib\\material.dart","C:\\flutter\\packages\\flutter\\lib\\painting.dart","C:\\flutter\\packages\\flutter\\lib\\physics.dart","C:\\flutter\\packages\\flutter\\lib\\rendering.dart","C:\\flutter\\packages\\flutter\\lib\\scheduler.dart","C:\\flutter\\packages\\flutter\\lib\\semantics.dart","C:\\flutter\\packages\\flutter\\lib\\services.dart","C:\\flutter\\packages\\flutter\\lib\\src\\animation\\animation.dart","C:\\flutter\\packages\\flutter\\lib\\src\\animation\\animation_controller.dart","C:\\flutter\\packages\\flutter\\lib\\src\\animation\\listener_helpers.dart","C:\\flutter\\packages\\flutter\\lib\\src\\animation\\animation_style.dart","C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\diagnostics.dart","C:\\flutter\\packages\\flutter\\lib\\src\\animation\\animations.dart","C:\\flutter\\packages\\flutter\\lib\\src\\animation\\curves.dart","C:\\flutter\\packages\\flutter\\lib\\src\\animation\\tween.dart","C:\\flutter\\packages\\flutter\\lib\\src\\animation\\tween_sequence.dart","C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\activity_indicator.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\ticker_provider.dart","C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\adaptive_text_selection_toolbar.dart","C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\app.dart","C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\bottom_tab_bar.dart","C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\button.dart","C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\checkbox.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\toggleable.dart","C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\colors.dart","C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\constants.dart","C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\context_menu.dart","C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\context_menu_action.dart","C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\date_picker.dart","C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\debug.dart","C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\desktop_text_selection.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\text_selection.dart","C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\desktop_text_selection_toolbar.dart","C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\desktop_text_selection_toolbar_button.dart","C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\dialog.dart","C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\form_row.dart","C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\form_section.dart","C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\icon_theme_data.dart","C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\icons.dart","C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\interface_level.dart","C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\list_section.dart","C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\list_tile.dart","C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\localizations.dart","C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\magnifier.dart","C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\nav_bar.dart","C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\page_scaffold.dart","C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\picker.dart","C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\radio.dart","C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\refresh.dart","C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\object.dart","C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\route.dart","C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\scrollbar.dart","C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\search_field.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\restoration.dart","C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\segmented_control.dart","C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\box.dart","C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\slider.dart","C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\sliding_segmented_control.dart","C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\spell_check_suggestions_toolbar.dart","C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\switch.dart","C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\tab_scaffold.dart","C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\tab_view.dart","C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\text_field.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\automatic_keep_alive.dart","C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\text_form_field_row.dart","C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\text_selection.dart","C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\text_selection_toolbar.dart","C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\text_selection_toolbar_button.dart","C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\text_theme.dart","C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\theme.dart","C:\\flutter\\packages\\flutter\\lib\\src\\cupertino\\thumb_painter.dart","C:\\flutter\\packages\\flutter\\lib\\src\\dart_plugin_registrant.dart","C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\_bitfield_io.dart","C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\_capabilities_io.dart","C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\_isolates_io.dart","C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\_platform_io.dart","C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\_timeline_io.dart","C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\annotations.dart","C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\assertions.dart","C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\basic_types.dart","C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\binding.dart","C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\bitfield.dart","C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\capabilities.dart","C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\change_notifier.dart","C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\collections.dart","C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\consolidate_response.dart","C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\constants.dart","C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\debug.dart","C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\isolates.dart","C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\key.dart","C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\licenses.dart","C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\memory_allocations.dart","C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\node.dart","C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\object.dart","C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\observer_list.dart","C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\persistent_hash_map.dart","C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\platform.dart","C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\print.dart","C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\serialization.dart","C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\service_extensions.dart","C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\stack_frame.dart","C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\synchronous_future.dart","C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\timeline.dart","C:\\flutter\\packages\\flutter\\lib\\src\\foundation\\unicode.dart","C:\\flutter\\packages\\flutter\\lib\\src\\gestures\\arena.dart","C:\\flutter\\packages\\flutter\\lib\\src\\gestures\\binding.dart","C:\\flutter\\packages\\flutter\\lib\\src\\gestures\\constants.dart","C:\\flutter\\packages\\flutter\\lib\\src\\gestures\\converter.dart","C:\\flutter\\packages\\flutter\\lib\\src\\gestures\\debug.dart","C:\\flutter\\packages\\flutter\\lib\\src\\gestures\\drag.dart","C:\\flutter\\packages\\flutter\\lib\\src\\gestures\\drag_details.dart","C:\\flutter\\packages\\flutter\\lib\\src\\gestures\\eager.dart","C:\\flutter\\packages\\flutter\\lib\\src\\gestures\\events.dart","C:\\flutter\\packages\\flutter\\lib\\src\\gestures\\force_press.dart","C:\\flutter\\packages\\flutter\\lib\\src\\gestures\\gesture_settings.dart","C:\\flutter\\packages\\flutter\\lib\\src\\gestures\\hit_test.dart","C:\\flutter\\packages\\flutter\\lib\\src\\gestures\\long_press.dart","C:\\flutter\\packages\\flutter\\lib\\src\\gestures\\lsq_solver.dart","C:\\flutter\\packages\\flutter\\lib\\src\\gestures\\monodrag.dart","C:\\flutter\\packages\\flutter\\lib\\src\\gestures\\multidrag.dart","C:\\flutter\\packages\\flutter\\lib\\src\\gestures\\multitap.dart","C:\\flutter\\packages\\flutter\\lib\\src\\gestures\\pointer_router.dart","C:\\flutter\\packages\\flutter\\lib\\src\\gestures\\pointer_signal_resolver.dart","C:\\flutter\\packages\\flutter\\lib\\src\\gestures\\recognizer.dart","C:\\flutter\\packages\\flutter\\lib\\src\\gestures\\resampler.dart","C:\\flutter\\packages\\flutter\\lib\\src\\gestures\\scale.dart","C:\\flutter\\packages\\flutter\\lib\\src\\gestures\\tap.dart","C:\\flutter\\packages\\flutter\\lib\\src\\gestures\\tap_and_drag.dart","C:\\flutter\\packages\\flutter\\lib\\src\\gestures\\team.dart","C:\\flutter\\packages\\flutter\\lib\\src\\gestures\\velocity_tracker.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\about.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\action_buttons.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\action_chip.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\action_icons_theme.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\adaptive_text_selection_toolbar.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\animated_icons.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\animated_icons\\animated_icons.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\animated_icons\\animated_icons_data.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\animated_icons\\data\\add_event.g.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\animated_icons\\data\\arrow_menu.g.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\animated_icons\\data\\close_menu.g.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\animated_icons\\data\\ellipsis_search.g.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\animated_icons\\data\\event_add.g.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\animated_icons\\data\\home_menu.g.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\animated_icons\\data\\list_view.g.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\animated_icons\\data\\menu_arrow.g.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\animated_icons\\data\\menu_close.g.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\animated_icons\\data\\menu_home.g.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\animated_icons\\data\\pause_play.g.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\animated_icons\\data\\play_pause.g.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\animated_icons\\data\\search_ellipsis.g.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\animated_icons\\data\\view_list.g.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\app.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\app_bar.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\app_bar_theme.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\arc.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\autocomplete.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\back_button.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\badge.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\badge_theme.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\banner.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\banner_theme.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\bottom_app_bar.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\bottom_app_bar_theme.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\bottom_navigation_bar.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\bottom_navigation_bar_theme.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\bottom_sheet.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\bottom_sheet_theme.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\button.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\material_state_mixin.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\button_bar.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\button_bar_theme.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\button_style.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\button_style_button.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\button_theme.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\calendar_date_picker.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\card.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\card_theme.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\carousel.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\checkbox.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\checkbox_list_tile.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\checkbox_theme.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\chip.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\slotted_render_object_widget.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\chip_theme.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\choice_chip.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\circle_avatar.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\color_scheme.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\colors.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\constants.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\curves.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\data_table.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\data_table_source.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\data_table_theme.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\date.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\date_picker.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\date_picker_theme.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\debug.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\desktop_text_selection.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\desktop_text_selection_toolbar.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\desktop_text_selection_toolbar_button.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\dialog.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\dialog_theme.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\divider.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\divider_theme.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\drawer.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\drawer_header.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\drawer_theme.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\dropdown.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\binding.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\dropdown_menu.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\dropdown_menu_theme.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\elevated_button.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\elevated_button_theme.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\elevation_overlay.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\expand_icon.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\expansion_panel.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\expansion_tile.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\expansion_tile_theme.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\filled_button.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\filled_button_theme.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\filter_chip.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\flexible_space_bar.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\floating_action_button.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\floating_action_button_location.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\floating_action_button_theme.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\grid_tile.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\grid_tile_bar.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\icon_button.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\icon_button_theme.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\icons.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\ink_decoration.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\ink_highlight.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\ink_ripple.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\ink_sparkle.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\ink_splash.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\ink_well.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\input_border.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\input_chip.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\input_date_picker_form_field.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\input_decorator.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\list_tile.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\list_tile_theme.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\magnifier.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\material.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\material_button.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\material_localizations.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\material_state.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\menu_anchor.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\menu_bar_theme.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\menu_button_theme.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\menu_style.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\menu_theme.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\mergeable_material.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\motion.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\navigation_bar.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\navigation_bar_theme.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\navigation_drawer.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\navigation_drawer_theme.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\navigation_rail.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\navigation_rail_theme.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\no_splash.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\outlined_button.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\outlined_button_theme.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\page.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\page_transitions_theme.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\paginated_data_table.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\popup_menu.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\popup_menu_theme.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\predictive_back_page_transitions_builder.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\progress_indicator.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\progress_indicator_theme.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\radio.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\radio_list_tile.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\radio_theme.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\range_slider.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\refresh_indicator.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\reorderable_list.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\scaffold.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\scrollbar.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\scrollbar_theme.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\search.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\search_anchor.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\search_bar_theme.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\search_view_theme.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\segmented_button.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\segmented_button_theme.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\selectable_text.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\selection_area.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\shadows.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\slider.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\slider_theme.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\snack_bar.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\snack_bar_theme.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\spell_check_suggestions_toolbar.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\spell_check_suggestions_toolbar_layout_delegate.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\stepper.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\switch.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\switch_list_tile.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\switch_theme.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\tab_bar_theme.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\tab_controller.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\tab_indicator.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\tabs.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\text_button.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\text_button_theme.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\text_field.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\text_form_field.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\text_selection.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\text_selection_theme.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\text_selection_toolbar.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\text_selection_toolbar_text_button.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\text_theme.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\theme.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\theme_data.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\time.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\time_picker.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\time_picker_theme.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\toggle_buttons.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\toggle_buttons_theme.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\tooltip.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\tooltip_theme.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\tooltip_visibility.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\typography.dart","C:\\flutter\\packages\\flutter\\lib\\src\\material\\user_accounts_drawer_header.dart","C:\\flutter\\packages\\flutter\\lib\\src\\painting\\_network_image_io.dart","C:\\flutter\\packages\\flutter\\lib\\src\\painting\\alignment.dart","C:\\flutter\\packages\\flutter\\lib\\src\\painting\\basic_types.dart","C:\\flutter\\packages\\flutter\\lib\\src\\painting\\beveled_rectangle_border.dart","C:\\flutter\\packages\\flutter\\lib\\src\\painting\\binding.dart","C:\\flutter\\packages\\flutter\\lib\\src\\painting\\border_radius.dart","C:\\flutter\\packages\\flutter\\lib\\src\\painting\\borders.dart","C:\\flutter\\packages\\flutter\\lib\\src\\painting\\box_border.dart","C:\\flutter\\packages\\flutter\\lib\\src\\painting\\box_decoration.dart","C:\\flutter\\packages\\flutter\\lib\\src\\painting\\box_fit.dart","C:\\flutter\\packages\\flutter\\lib\\src\\painting\\box_shadow.dart","C:\\flutter\\packages\\flutter\\lib\\src\\painting\\circle_border.dart","C:\\flutter\\packages\\flutter\\lib\\src\\painting\\clip.dart","C:\\flutter\\packages\\flutter\\lib\\src\\painting\\colors.dart","C:\\flutter\\packages\\flutter\\lib\\src\\painting\\continuous_rectangle_border.dart","C:\\flutter\\packages\\flutter\\lib\\src\\painting\\debug.dart","C:\\flutter\\packages\\flutter\\lib\\src\\painting\\decoration.dart","C:\\flutter\\packages\\flutter\\lib\\src\\painting\\decoration_image.dart","C:\\flutter\\packages\\flutter\\lib\\src\\painting\\edge_insets.dart","C:\\flutter\\packages\\flutter\\lib\\src\\painting\\flutter_logo.dart","C:\\flutter\\packages\\flutter\\lib\\src\\painting\\fractional_offset.dart","C:\\flutter\\packages\\flutter\\lib\\src\\painting\\geometry.dart","C:\\flutter\\packages\\flutter\\lib\\src\\painting\\gradient.dart","C:\\flutter\\packages\\flutter\\lib\\src\\painting\\image_cache.dart","C:\\flutter\\packages\\flutter\\lib\\src\\painting\\image_decoder.dart","C:\\flutter\\packages\\flutter\\lib\\src\\painting\\image_provider.dart","C:\\flutter\\packages\\flutter\\lib\\src\\painting\\image_resolution.dart","C:\\flutter\\packages\\flutter\\lib\\src\\painting\\image_stream.dart","C:\\flutter\\packages\\flutter\\lib\\src\\painting\\inline_span.dart","C:\\flutter\\packages\\flutter\\lib\\src\\painting\\linear_border.dart","C:\\flutter\\packages\\flutter\\lib\\src\\painting\\matrix_utils.dart","C:\\flutter\\packages\\flutter\\lib\\src\\painting\\notched_shapes.dart","C:\\flutter\\packages\\flutter\\lib\\src\\painting\\oval_border.dart","C:\\flutter\\packages\\flutter\\lib\\src\\painting\\paint_utilities.dart","C:\\flutter\\packages\\flutter\\lib\\src\\painting\\placeholder_span.dart","C:\\flutter\\packages\\flutter\\lib\\src\\painting\\rounded_rectangle_border.dart","C:\\flutter\\packages\\flutter\\lib\\src\\painting\\shader_warm_up.dart","C:\\flutter\\packages\\flutter\\lib\\src\\painting\\shape_decoration.dart","C:\\flutter\\packages\\flutter\\lib\\src\\painting\\stadium_border.dart","C:\\flutter\\packages\\flutter\\lib\\src\\painting\\star_border.dart","C:\\flutter\\packages\\flutter\\lib\\src\\painting\\strut_style.dart","C:\\flutter\\packages\\flutter\\lib\\src\\painting\\text_painter.dart","C:\\flutter\\packages\\flutter\\lib\\src\\painting\\text_scaler.dart","C:\\flutter\\packages\\flutter\\lib\\src\\painting\\text_span.dart","C:\\flutter\\packages\\flutter\\lib\\src\\painting\\text_style.dart","C:\\flutter\\packages\\flutter\\lib\\src\\physics\\clamped_simulation.dart","C:\\flutter\\packages\\flutter\\lib\\src\\physics\\friction_simulation.dart","C:\\flutter\\packages\\flutter\\lib\\src\\physics\\gravity_simulation.dart","C:\\flutter\\packages\\flutter\\lib\\src\\physics\\simulation.dart","C:\\flutter\\packages\\flutter\\lib\\src\\physics\\spring_simulation.dart","C:\\flutter\\packages\\flutter\\lib\\src\\physics\\tolerance.dart","C:\\flutter\\packages\\flutter\\lib\\src\\physics\\utils.dart","C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\animated_size.dart","C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\binding.dart","C:\\flutter\\packages\\flutter\\lib\\src\\scheduler\\binding.dart","C:\\flutter\\packages\\flutter\\lib\\src\\services\\binding.dart","C:\\flutter\\packages\\flutter\\lib\\src\\semantics\\binding.dart","C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\custom_layout.dart","C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\custom_paint.dart","C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\debug.dart","C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\debug_overflow_indicator.dart","C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\decorated_sliver.dart","C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\editable.dart","C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\paragraph.dart","C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\error.dart","C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\flex.dart","C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\flow.dart","C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\image.dart","C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\layer.dart","C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\layout_helper.dart","C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\list_body.dart","C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\list_wheel_viewport.dart","C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\mouse_tracker.dart","C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\selection.dart","C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\performance_overlay.dart","C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\platform_view.dart","C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\proxy_box.dart","C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\proxy_sliver.dart","C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\rotated_box.dart","C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\service_extensions.dart","C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\shifted_box.dart","C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\sliver.dart","C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\sliver_fill.dart","C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\sliver_fixed_extent_list.dart","C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\sliver_grid.dart","C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\sliver_group.dart","C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\sliver_list.dart","C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\sliver_multi_box_adaptor.dart","C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\sliver_padding.dart","C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\sliver_persistent_header.dart","C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\sliver_tree.dart","C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\stack.dart","C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\table.dart","C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\table_border.dart","C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\texture.dart","C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\tweens.dart","C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\view.dart","C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\viewport.dart","C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\viewport_offset.dart","C:\\flutter\\packages\\flutter\\lib\\src\\rendering\\wrap.dart","C:\\flutter\\packages\\flutter\\lib\\src\\scheduler\\debug.dart","C:\\flutter\\packages\\flutter\\lib\\src\\scheduler\\priority.dart","C:\\flutter\\packages\\flutter\\lib\\src\\scheduler\\service_extensions.dart","C:\\flutter\\packages\\flutter\\lib\\src\\scheduler\\ticker.dart","C:\\flutter\\packages\\flutter\\lib\\src\\semantics\\debug.dart","C:\\flutter\\packages\\flutter\\lib\\src\\semantics\\semantics.dart","C:\\flutter\\packages\\flutter\\lib\\src\\semantics\\semantics_event.dart","C:\\flutter\\packages\\flutter\\lib\\src\\semantics\\semantics_service.dart","C:\\flutter\\packages\\flutter\\lib\\src\\services\\_background_isolate_binary_messenger_io.dart","C:\\flutter\\packages\\flutter\\lib\\src\\services\\asset_bundle.dart","C:\\flutter\\packages\\flutter\\lib\\src\\services\\asset_manifest.dart","C:\\flutter\\packages\\flutter\\lib\\src\\services\\autofill.dart","C:\\flutter\\packages\\flutter\\lib\\src\\services\\binary_messenger.dart","C:\\flutter\\packages\\flutter\\lib\\src\\services\\browser_context_menu.dart","C:\\flutter\\packages\\flutter\\lib\\src\\services\\clipboard.dart","C:\\flutter\\packages\\flutter\\lib\\src\\services\\debug.dart","C:\\flutter\\packages\\flutter\\lib\\src\\services\\deferred_component.dart","C:\\flutter\\packages\\flutter\\lib\\src\\services\\flavor.dart","C:\\flutter\\packages\\flutter\\lib\\src\\services\\font_loader.dart","C:\\flutter\\packages\\flutter\\lib\\src\\services\\haptic_feedback.dart","C:\\flutter\\packages\\flutter\\lib\\src\\services\\hardware_keyboard.dart","C:\\flutter\\packages\\flutter\\lib\\src\\services\\keyboard_inserted_content.dart","C:\\flutter\\packages\\flutter\\lib\\src\\services\\keyboard_key.g.dart","C:\\flutter\\packages\\flutter\\lib\\src\\services\\keyboard_maps.g.dart","C:\\flutter\\packages\\flutter\\lib\\src\\services\\live_text.dart","C:\\flutter\\packages\\flutter\\lib\\src\\services\\message_codec.dart","C:\\flutter\\packages\\flutter\\lib\\src\\services\\message_codecs.dart","C:\\flutter\\packages\\flutter\\lib\\src\\services\\mouse_cursor.dart","C:\\flutter\\packages\\flutter\\lib\\src\\services\\mouse_tracking.dart","C:\\flutter\\packages\\flutter\\lib\\src\\services\\platform_channel.dart","C:\\flutter\\packages\\flutter\\lib\\src\\services\\platform_views.dart","C:\\flutter\\packages\\flutter\\lib\\src\\services\\predictive_back_event.dart","C:\\flutter\\packages\\flutter\\lib\\src\\services\\process_text.dart","C:\\flutter\\packages\\flutter\\lib\\src\\services\\raw_keyboard.dart","C:\\flutter\\packages\\flutter\\lib\\src\\services\\raw_keyboard_android.dart","C:\\flutter\\packages\\flutter\\lib\\src\\services\\raw_keyboard_fuchsia.dart","C:\\flutter\\packages\\flutter\\lib\\src\\services\\raw_keyboard_ios.dart","C:\\flutter\\packages\\flutter\\lib\\src\\services\\raw_keyboard_linux.dart","C:\\flutter\\packages\\flutter\\lib\\src\\services\\raw_keyboard_macos.dart","C:\\flutter\\packages\\flutter\\lib\\src\\services\\raw_keyboard_web.dart","C:\\flutter\\packages\\flutter\\lib\\src\\services\\raw_keyboard_windows.dart","C:\\flutter\\packages\\flutter\\lib\\src\\services\\restoration.dart","C:\\flutter\\packages\\flutter\\lib\\src\\services\\service_extensions.dart","C:\\flutter\\packages\\flutter\\lib\\src\\services\\spell_check.dart","C:\\flutter\\packages\\flutter\\lib\\src\\services\\system_channels.dart","C:\\flutter\\packages\\flutter\\lib\\src\\services\\system_chrome.dart","C:\\flutter\\packages\\flutter\\lib\\src\\services\\system_navigator.dart","C:\\flutter\\packages\\flutter\\lib\\src\\services\\system_sound.dart","C:\\flutter\\packages\\flutter\\lib\\src\\services\\text_boundary.dart","C:\\flutter\\packages\\flutter\\lib\\src\\services\\text_editing.dart","C:\\flutter\\packages\\flutter\\lib\\src\\services\\text_editing_delta.dart","C:\\flutter\\packages\\flutter\\lib\\src\\services\\text_formatter.dart","C:\\flutter\\packages\\flutter\\lib\\src\\services\\text_input.dart","C:\\flutter\\packages\\flutter\\lib\\src\\services\\text_layout_metrics.dart","C:\\flutter\\packages\\flutter\\lib\\src\\services\\undo_manager.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\_html_element_view_io.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\_platform_selectable_region_context_menu_io.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\actions.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\adapter.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\framework.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\animated_cross_fade.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\animated_scroll_view.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\animated_size.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\animated_switcher.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\annotated_region.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\app.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\app_lifecycle_listener.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\async.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\autocomplete.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\autofill.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\banner.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\basic.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\bottom_navigation_bar_item.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\color_filter.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\constants.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\container.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\context_menu_button_item.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\context_menu_controller.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\debug.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\decorated_sliver.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\default_selection_style.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\default_text_editing_shortcuts.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\desktop_text_selection_toolbar_layout_delegate.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\dismissible.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\display_feature_sub_screen.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\disposable_build_context.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\drag_target.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\draggable_scrollable_sheet.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\scroll_notification.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\dual_transition_builder.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\editable_text.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\fade_in_image.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\feedback.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\flutter_logo.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\focus_manager.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\focus_scope.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\focus_traversal.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\form.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\gesture_detector.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\grid_paper.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\heroes.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\icon.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\icon_data.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\icon_theme.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\icon_theme_data.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\image.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\image_filter.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\image_icon.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\implicit_animations.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\inherited_model.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\inherited_notifier.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\inherited_theme.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\interactive_viewer.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\keyboard_listener.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\layout_builder.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\list_wheel_scroll_view.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\localizations.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\lookup_boundary.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\magnifier.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\media_query.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\modal_barrier.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\navigation_toolbar.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\navigator.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\navigator_pop_handler.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\nested_scroll_view.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\notification_listener.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\orientation_builder.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\overflow_bar.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\overlay.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\overscroll_indicator.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\page_storage.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\page_view.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\pages.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\performance_overlay.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\pinned_header_sliver.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\placeholder.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\platform_menu_bar.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\platform_selectable_region_context_menu.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\platform_view.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\pop_scope.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\preferred_size.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\primary_scroll_controller.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\raw_keyboard_listener.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\reorderable_list.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\restoration_properties.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\router.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\routes.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\safe_area.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\scroll_activity.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\scroll_aware_image_provider.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\scroll_configuration.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\scroll_context.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\scroll_controller.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\scroll_delegate.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\scroll_metrics.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\scroll_notification_observer.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\scroll_physics.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\scroll_position.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\scroll_position_with_single_context.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\scroll_simulation.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\scroll_view.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\scrollable.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\scrollable_helpers.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\scrollbar.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\selectable_region.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\selection_container.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\semantics_debugger.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\service_extensions.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\shared_app_data.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\shortcuts.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\single_child_scroll_view.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\size_changed_layout_notifier.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\sliver.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\sliver_fill.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\sliver_floating_header.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\sliver_layout_builder.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\sliver_persistent_header.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\sliver_prototype_extent_list.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\sliver_resizing_header.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\sliver_tree.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\snapshot_widget.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\spacer.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\spell_check.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\standard_component_type.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\status_transitions.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\system_context_menu.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\table.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\tap_region.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\text.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\text_editing_intents.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\text_selection_toolbar_anchors.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\text_selection_toolbar_layout_delegate.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\texture.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\title.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\transitions.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\tween_animation_builder.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\two_dimensional_scroll_view.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\two_dimensional_viewport.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\undo_history.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\unique_widget.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\value_listenable_builder.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\view.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\viewport.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\visibility.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\widget_inspector.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\widget_span.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\widget_state.dart","C:\\flutter\\packages\\flutter\\lib\\src\\widgets\\will_pop_scope.dart","C:\\flutter\\packages\\flutter\\lib\\widgets.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\blend\\blend.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\contrast\\contrast.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\dislike\\dislike_analyzer.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\dynamiccolor\\dynamic_color.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\dynamiccolor\\dynamic_scheme.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\dynamiccolor\\material_dynamic_colors.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\dynamiccolor\\src\\contrast_curve.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\dynamiccolor\\src\\tone_delta_pair.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\dynamiccolor\\variant.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\hct\\cam16.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\hct\\hct.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\hct\\src\\hct_solver.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\hct\\viewing_conditions.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\material_color_utilities.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\palettes\\core_palette.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\palettes\\tonal_palette.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\quantize\\quantizer.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\quantize\\quantizer_celebi.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\quantize\\quantizer_map.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\quantize\\quantizer_wsmeans.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\quantize\\quantizer_wu.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\quantize\\src\\point_provider.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\quantize\\src\\point_provider_lab.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\scheme\\scheme.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\scheme\\scheme_content.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\scheme\\scheme_expressive.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\scheme\\scheme_fidelity.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\scheme\\scheme_fruit_salad.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\scheme\\scheme_monochrome.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\scheme\\scheme_neutral.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\scheme\\scheme_rainbow.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\scheme\\scheme_tonal_spot.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\scheme\\scheme_vibrant.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\score\\score.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\temperature\\temperature_cache.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\utils\\color_utils.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\utils\\math_utils.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\material_color_utilities-0.11.1\\lib\\utils\\string_utils.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\meta-1.15.0\\lib\\meta.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\meta-1.15.0\\lib\\meta_meta.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\nested-1.0.0\\lib\\nested.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path-1.9.0\\lib\\path.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path-1.9.0\\lib\\src\\characters.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path-1.9.0\\lib\\src\\context.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path-1.9.0\\lib\\src\\internal_style.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path-1.9.0\\lib\\src\\parsed_path.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path-1.9.0\\lib\\src\\path_exception.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path-1.9.0\\lib\\src\\path_map.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path-1.9.0\\lib\\src\\path_set.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path-1.9.0\\lib\\src\\style.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path-1.9.0\\lib\\src\\style\\posix.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path-1.9.0\\lib\\src\\style\\url.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path-1.9.0\\lib\\src\\style\\windows.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path-1.9.0\\lib\\src\\utils.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider-2.1.5\\lib\\path_provider.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider_android-2.2.15\\lib\\messages.g.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider_android-2.2.15\\lib\\path_provider_android.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider_foundation-2.4.1\\lib\\messages.g.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider_foundation-2.4.1\\lib\\path_provider_foundation.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider_linux-2.2.1\\lib\\path_provider_linux.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider_linux-2.2.1\\lib\\src\\get_application_id.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider_linux-2.2.1\\lib\\src\\get_application_id_real.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider_linux-2.2.1\\lib\\src\\path_provider_linux.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider_platform_interface-2.1.2\\lib\\path_provider_platform_interface.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider_platform_interface-2.1.2\\lib\\src\\enums.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider_platform_interface-2.1.2\\lib\\src\\method_channel_path_provider.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider_windows-2.3.0\\lib\\path_provider_windows.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider_windows-2.3.0\\lib\\src\\folders.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider_windows-2.3.0\\lib\\src\\guid.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider_windows-2.3.0\\lib\\src\\path_provider_windows_real.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider_windows-2.3.0\\lib\\src\\win32_wrappers.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\platform-3.1.6\\lib\\platform.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\platform-3.1.6\\lib\\src\\interface\\local_platform.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\platform-3.1.6\\lib\\src\\interface\\platform.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\platform-3.1.6\\lib\\src\\testing\\fake_platform.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\plugin_platform_interface-2.1.8\\lib\\plugin_platform_interface.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\provider-6.1.2\\lib\\provider.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\provider-6.1.2\\lib\\src\\async_provider.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\provider-6.1.2\\lib\\src\\change_notifier_provider.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\provider-6.1.2\\lib\\src\\consumer.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\provider-6.1.2\\lib\\src\\listenable_provider.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\provider-6.1.2\\lib\\src\\provider.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\provider-6.1.2\\lib\\src\\deferred_inherited_provider.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\provider-6.1.2\\lib\\src\\inherited_provider.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\provider-6.1.2\\lib\\src\\devtool.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\provider-6.1.2\\lib\\src\\proxy_provider.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\provider-6.1.2\\lib\\src\\reassemble_handler.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\provider-6.1.2\\lib\\src\\selector.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\provider-6.1.2\\lib\\src\\value_listenable_provider.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\screen_retriever-0.1.9\\lib\\screen_retriever.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\screen_retriever-0.1.9\\lib\\src\\display.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\screen_retriever-0.1.9\\lib\\src\\screen_listener.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\screen_retriever-0.1.9\\lib\\src\\screen_retriever.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\vector_math-2.1.4\\lib\\vector_math_64.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\vector_math-2.1.4\\lib\\src\\vector_math_64\\aabb2.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\vector_math-2.1.4\\lib\\src\\vector_math_64\\aabb3.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\vector_math-2.1.4\\lib\\src\\vector_math_64\\colors.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\vector_math-2.1.4\\lib\\src\\vector_math_64\\frustum.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\vector_math-2.1.4\\lib\\src\\vector_math_64\\intersection_result.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\vector_math-2.1.4\\lib\\src\\vector_math_64\\matrix2.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\vector_math-2.1.4\\lib\\src\\vector_math_64\\matrix3.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\vector_math-2.1.4\\lib\\src\\vector_math_64\\matrix4.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\vector_math-2.1.4\\lib\\src\\vector_math_64\\noise.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\vector_math-2.1.4\\lib\\src\\vector_math_64\\obb3.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\vector_math-2.1.4\\lib\\src\\vector_math_64\\plane.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\vector_math-2.1.4\\lib\\src\\vector_math_64\\quad.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\vector_math-2.1.4\\lib\\src\\vector_math_64\\quaternion.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\vector_math-2.1.4\\lib\\src\\vector_math_64\\ray.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\vector_math-2.1.4\\lib\\src\\vector_math_64\\sphere.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\vector_math-2.1.4\\lib\\src\\vector_math_64\\triangle.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\vector_math-2.1.4\\lib\\src\\vector_math_64\\vector.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\vector_math-2.1.4\\lib\\src\\vector_math_64\\vector2.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\vector_math-2.1.4\\lib\\src\\vector_math_64\\vector3.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\vector_math-2.1.4\\lib\\src\\vector_math_64\\vector4.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\vector_math-2.1.4\\lib\\src\\vector_math_64\\constants.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\vector_math-2.1.4\\lib\\src\\vector_math_64\\error_helpers.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\vector_math-2.1.4\\lib\\src\\vector_math_64\\opengl.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\vector_math-2.1.4\\lib\\src\\vector_math_64\\utilities.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\bstr.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\callbacks.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iagileobject.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iapplicationactivationmanager.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iappxfactory.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iappxfile.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iappxfilesenumerator.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iappxmanifestapplication.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iappxmanifestapplicationsenumerator.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iappxmanifestospackagedependency.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iappxmanifestpackagedependenciesenumerator.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iappxmanifestpackagedependency.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iappxmanifestpackageid.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iappxmanifestproperties.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iappxmanifestreader.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iappxmanifestreader2.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iappxmanifestreader3.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iappxmanifestreader4.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iappxmanifestreader5.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iappxmanifestreader6.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iappxmanifestreader7.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iappxpackagereader.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iaudiocaptureclient.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iaudioclient.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iaudioclient2.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iaudioclient3.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iaudioclientduckingcontrol.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iaudioclock.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iaudioclock2.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iaudioclockadjustment.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iaudiorenderclient.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iaudiosessioncontrol.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iaudiosessioncontrol2.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iaudiosessionenumerator.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iaudiosessionmanager.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iaudiosessionmanager2.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iaudiostreamvolume.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ibindctx.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ichannelaudiovolume.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iclassfactory.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iconnectionpoint.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iconnectionpointcontainer.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\idesktopwallpaper.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\idispatch.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ienumidlist.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ienummoniker.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ienumnetworkconnections.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ienumnetworks.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ienumresources.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ienumspellingerror.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ienumstring.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ienumvariant.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ienumwbemclassobject.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ierrorinfo.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ifiledialog.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ifiledialog2.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ifiledialogcustomize.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ifileisinuse.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ifileopendialog.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ifilesavedialog.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iinitializewithwindow.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iinspectable.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iknownfolder.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iknownfoldermanager.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\imetadataassemblyimport.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\imetadatadispenser.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\imetadatadispenserex.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\imetadataimport.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\imetadataimport2.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\imetadatatables.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\imetadatatables2.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\immdevice.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\immdevicecollection.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\immdeviceenumerator.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\immendpoint.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\immnotificationclient.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\imodalwindow.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\imoniker.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\inetwork.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\inetworkconnection.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\inetworklistmanager.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\inetworklistmanagerevents.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ipersist.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ipersistfile.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ipersistmemory.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ipersiststream.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ipropertystore.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iprovideclassinfo.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\irestrictederrorinfo.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\irunningobjecttable.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\isensor.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\isensorcollection.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\isensordatareport.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\isensormanager.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\isequentialstream.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ishellfolder.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ishellitem.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ishellitem2.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ishellitemarray.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ishellitemfilter.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ishellitemimagefactory.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ishellitemresources.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ishelllink.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ishelllinkdatalist.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ishelllinkdual.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ishellservice.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\isimpleaudiovolume.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ispeechaudioformat.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ispeechbasestream.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ispeechobjecttoken.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ispeechobjecttokens.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ispeechvoice.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ispeechvoicestatus.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ispeechwaveformatex.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ispellchecker.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ispellchecker2.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ispellcheckerchangedeventhandler.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ispellcheckerfactory.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ispellingerror.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ispeventsource.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ispnotifysource.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ispvoice.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\istream.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\isupporterrorinfo.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\itypeinfo.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomation.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomation2.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomation3.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomation4.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomation5.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomation6.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationandcondition.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationannotationpattern.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationboolcondition.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationcacherequest.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationcondition.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationcustomnavigationpattern.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationdockpattern.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationdragpattern.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationdroptargetpattern.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationelement.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationelement2.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationelement3.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationelement4.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationelement5.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationelement6.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationelement7.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationelement8.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationelement9.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationelementarray.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationexpandcollapsepattern.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationgriditempattern.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationgridpattern.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationinvokepattern.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationitemcontainerpattern.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationlegacyiaccessiblepattern.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationmultipleviewpattern.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationnotcondition.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationobjectmodelpattern.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationorcondition.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationpropertycondition.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationproxyfactory.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationproxyfactoryentry.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationproxyfactorymapping.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationrangevaluepattern.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationscrollitempattern.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationscrollpattern.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationselectionitempattern.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationselectionpattern.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationselectionpattern2.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationspreadsheetitempattern.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationspreadsheetpattern.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationstylespattern.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationsynchronizedinputpattern.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationtableitempattern.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationtablepattern.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationtextchildpattern.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationtexteditpattern.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationtextpattern.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationtextpattern2.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationtextrange.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationtextrange2.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationtextrange3.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationtextrangearray.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationtogglepattern.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationtransformpattern.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationtransformpattern2.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationtreewalker.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationvaluepattern.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationvirtualizeditempattern.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuiautomationwindowpattern.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iunknown.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iuri.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\ivirtualdesktopmanager.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iwbemclassobject.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iwbemconfigurerefresher.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iwbemcontext.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iwbemhiperfenum.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iwbemlocator.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iwbemobjectaccess.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iwbemrefresher.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iwbemservices.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iwebauthenticationcoremanagerinterop.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\com\\iwinhttprequest.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\combase.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\constants.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\constants_metadata.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\constants_nodoc.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\dispatcher.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\enums.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\enums.g.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\exceptions.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\extensions\\dialogs.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\extensions\\int_to_hexstring.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\extensions\\list_to_blob.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\extensions\\set_ansi.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\extensions\\set_string.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\extensions\\set_string_array.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\extensions\\unpack_utf16.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\functions.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\guid.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\inline.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\macros.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\propertykey.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\structs.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\structs.g.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\types.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\utils.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\variant.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\advapi32.g.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\api_ms_win_core_apiquery_l2_1_0.g.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\api_ms_win_core_comm_l1_1_1.g.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\api_ms_win_core_comm_l1_1_2.g.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\api_ms_win_core_handle_l1_1_0.g.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\api_ms_win_core_sysinfo_l1_2_3.g.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\api_ms_win_core_winrt_error_l1_1_0.g.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\api_ms_win_core_winrt_l1_1_0.g.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\api_ms_win_core_winrt_string_l1_1_0.g.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\api_ms_win_ro_typeresolution_l1_1_0.g.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\api_ms_win_ro_typeresolution_l1_1_1.g.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\api_ms_win_shcore_scaling_l1_1_1.g.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\api_ms_win_wsl_api_l1_1_0.g.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\bluetoothapis.g.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\bthprops.g.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\comctl32.g.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\comdlg32.g.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\crypt32.g.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\dbghelp.g.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\dwmapi.g.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\dxva2.g.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\gdi32.g.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\iphlpapi.g.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\kernel32.g.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\magnification.g.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\netapi32.g.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\ntdll.g.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\ole32.g.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\oleaut32.g.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\powrprof.g.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\propsys.g.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\rometadata.g.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\scarddlg.g.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\setupapi.g.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\shell32.g.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\shlwapi.g.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\user32.g.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\uxtheme.g.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\version.g.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\winmm.g.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\winscard.g.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\winspool.g.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\wlanapi.g.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\wtsapi32.g.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\win32\\xinput1_4.g.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\winmd_constants.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\src\\winrt_helpers.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\win32-5.10.0\\lib\\win32.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\window_manager-0.3.9\\lib\\src\\resize_edge.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\window_manager-0.3.9\\lib\\src\\title_bar_style.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\window_manager-0.3.9\\lib\\src\\utils\\calc_window_position.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\window_manager-0.3.9\\lib\\src\\widgets\\drag_to_move_area.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\window_manager-0.3.9\\lib\\src\\widgets\\drag_to_resize_area.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\window_manager-0.3.9\\lib\\src\\widgets\\virtual_window_frame.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\window_manager-0.3.9\\lib\\src\\window_listener.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\window_manager-0.3.9\\lib\\src\\widgets\\window_caption.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\window_manager-0.3.9\\lib\\src\\widgets\\window_caption_button.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\window_manager-0.3.9\\lib\\src\\window_manager.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\window_manager-0.3.9\\lib\\src\\window_options.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\window_manager-0.3.9\\lib\\window_manager.dart","C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\xdg_directories-1.1.0\\lib\\xdg_directories.dart","C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\.dart_tool\\flutter_build\\dart_plugin_registrant.dart","C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\lib\\main.dart","C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\lib\\ui\\app.dart","C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\lib\\ui\\screens\\home_screen.dart","C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\lib\\services\\audio_processing\\audio_service.dart"],"outputs":["C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\.dart_tool\\flutter_build\\44d21c69a882f08a635e4e2d3f96797b\\program.dill","C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\.dart_tool\\flutter_build\\44d21c69a882f08a635e4e2d3f96797b\\program.dill"]}

// File: .dart_tool\flutter_build\44d21c69a882f08a635e4e2d3f96797b\native_assets.d
----------------------------------------
 C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\.dart_tool\\flutter_build\\44d21c69a882f08a635e4e2d3f96797b\\native_assets.yaml: 

// File: .dart_tool\flutter_build\44d21c69a882f08a635e4e2d3f96797b\native_assets.dill
----------------------------------------


// File: .dart_tool\flutter_build\44d21c69a882f08a635e4e2d3f96797b\native_assets.stamp
----------------------------------------
{"inputs":["C:\\flutter\\packages\\flutter_tools\\lib\\src\\build_system\\targets\\native_assets.dart","C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\.dart_tool\\package_config_subset"],"outputs":["C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\.dart_tool\\flutter_build\\44d21c69a882f08a635e4e2d3f96797b\\native_assets.yaml","C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\.dart_tool\\flutter_build\\44d21c69a882f08a635e4e2d3f96797b\\native_assets.yaml"]}

// File: .dart_tool\flutter_build\44d21c69a882f08a635e4e2d3f96797b\native_assets.yaml
----------------------------------------
format-version:
  - 1
  - 0
  - 0
native-assets: {}

// File: .dart_tool\flutter_build\44d21c69a882f08a635e4e2d3f96797b\unpack_windows.stamp
----------------------------------------
{"inputs":["C:\\flutter\\packages\\flutter_tools\\lib\\src\\build_system\\targets\\windows.dart","C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\flutter_windows.dll","C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\flutter_windows.dll.exp","C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\flutter_windows.dll.lib","C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\flutter_windows.dll.pdb","C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\flutter_export.h","C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\flutter_messenger.h","C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\flutter_plugin_registrar.h","C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\flutter_texture_registrar.h","C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\flutter_windows.h","C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\icudtl.dat","C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\binary_messenger_impl.h","C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\byte_buffer_streams.h","C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\core_implementations.cc","C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\engine_method_result.cc","C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\flutter_engine.cc","C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\flutter_view_controller.cc","C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\include\\flutter\\basic_message_channel.h","C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\include\\flutter\\binary_messenger.h","C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\include\\flutter\\byte_streams.h","C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\include\\flutter\\dart_project.h","C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\include\\flutter\\encodable_value.h","C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\include\\flutter\\engine_method_result.h","C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\include\\flutter\\event_channel.h","C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\include\\flutter\\event_sink.h","C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\include\\flutter\\event_stream_handler.h","C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\include\\flutter\\event_stream_handler_functions.h","C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\include\\flutter\\flutter_engine.h","C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\include\\flutter\\flutter_view.h","C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\include\\flutter\\flutter_view_controller.h","C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\include\\flutter\\message_codec.h","C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\include\\flutter\\method_call.h","C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\include\\flutter\\method_channel.h","C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\include\\flutter\\method_codec.h","C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\include\\flutter\\method_result.h","C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\include\\flutter\\method_result_functions.h","C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\include\\flutter\\plugin_registrar.h","C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\include\\flutter\\plugin_registrar_windows.h","C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\include\\flutter\\plugin_registry.h","C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\include\\flutter\\standard_codec_serializer.h","C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\include\\flutter\\standard_message_codec.h","C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\include\\flutter\\standard_method_codec.h","C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\include\\flutter\\texture_registrar.h","C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\plugin_registrar.cc","C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\readme","C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\standard_codec.cc","C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\texture_registrar_impl.h"],"outputs":["C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\flutter_windows.dll","C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\flutter_windows.dll.exp","C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\flutter_windows.dll.lib","C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\flutter_windows.dll.pdb","C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\flutter_export.h","C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\flutter_messenger.h","C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\flutter_plugin_registrar.h","C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\flutter_texture_registrar.h","C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\flutter_windows.h","C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\icudtl.dat","C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\binary_messenger_impl.h","C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\byte_buffer_streams.h","C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\core_implementations.cc","C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\engine_method_result.cc","C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\flutter_engine.cc","C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\flutter_view_controller.cc","C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\include\\flutter\\basic_message_channel.h","C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\include\\flutter\\binary_messenger.h","C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\include\\flutter\\byte_streams.h","C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\include\\flutter\\dart_project.h","C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\include\\flutter\\encodable_value.h","C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\include\\flutter\\engine_method_result.h","C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\include\\flutter\\event_channel.h","C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\include\\flutter\\event_sink.h","C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\include\\flutter\\event_stream_handler.h","C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\include\\flutter\\event_stream_handler_functions.h","C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\include\\flutter\\flutter_engine.h","C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\include\\flutter\\flutter_view.h","C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\include\\flutter\\flutter_view_controller.h","C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\include\\flutter\\message_codec.h","C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\include\\flutter\\method_call.h","C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\include\\flutter\\method_channel.h","C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\include\\flutter\\method_codec.h","C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\include\\flutter\\method_result.h","C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\include\\flutter\\method_result_functions.h","C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\include\\flutter\\plugin_registrar.h","C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\include\\flutter\\plugin_registrar_windows.h","C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\include\\flutter\\plugin_registry.h","C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\include\\flutter\\standard_codec_serializer.h","C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\include\\flutter\\standard_message_codec.h","C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\include\\flutter\\standard_method_codec.h","C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\include\\flutter\\texture_registrar.h","C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\plugin_registrar.cc","C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\readme","C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\standard_codec.cc","C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\texture_registrar_impl.h"]}

// File: .dart_tool\flutter_build\44d21c69a882f08a635e4e2d3f96797b\windows_engine_sources.d
----------------------------------------
 C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\flutter_windows.dll C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\flutter_windows.dll.exp C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\flutter_windows.dll.lib C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\flutter_windows.dll.pdb C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\flutter_export.h C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\flutter_messenger.h C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\flutter_plugin_registrar.h C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\flutter_texture_registrar.h C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\flutter_windows.h C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\icudtl.dat C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\binary_messenger_impl.h C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\byte_buffer_streams.h C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\core_implementations.cc C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\engine_method_result.cc C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\flutter_engine.cc C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\flutter_view_controller.cc C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\include\\flutter\\basic_message_channel.h C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\include\\flutter\\binary_messenger.h C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\include\\flutter\\byte_streams.h C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\include\\flutter\\dart_project.h C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\include\\flutter\\encodable_value.h C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\include\\flutter\\engine_method_result.h C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\include\\flutter\\event_channel.h C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\include\\flutter\\event_sink.h C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\include\\flutter\\event_stream_handler.h C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\include\\flutter\\event_stream_handler_functions.h C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\include\\flutter\\flutter_engine.h C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\include\\flutter\\flutter_view.h C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\include\\flutter\\flutter_view_controller.h C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\include\\flutter\\message_codec.h C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\include\\flutter\\method_call.h C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\include\\flutter\\method_channel.h C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\include\\flutter\\method_codec.h C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\include\\flutter\\method_result.h C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\include\\flutter\\method_result_functions.h C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\include\\flutter\\plugin_registrar.h C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\include\\flutter\\plugin_registrar_windows.h C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\include\\flutter\\plugin_registry.h C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\include\\flutter\\standard_codec_serializer.h C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\include\\flutter\\standard_message_codec.h C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\include\\flutter\\standard_method_codec.h C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\include\\flutter\\texture_registrar.h C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\plugin_registrar.cc C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\readme C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\standard_codec.cc C:\\Users\\vetle\\Documents\\GitHub\\audio_to_midi_melodia\\audio_melodia_flutter\\windows\\flutter\\ephemeral\\cpp_client_wrapper\\texture_registrar_impl.h:  C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\flutter_windows.dll C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\flutter_windows.dll.exp C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\flutter_windows.dll.lib C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\flutter_windows.dll.pdb C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\flutter_export.h C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\flutter_messenger.h C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\flutter_plugin_registrar.h C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\flutter_texture_registrar.h C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\flutter_windows.h C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\icudtl.dat C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\binary_messenger_impl.h C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\byte_buffer_streams.h C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\core_implementations.cc C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\engine_method_result.cc C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\flutter_engine.cc C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\flutter_view_controller.cc C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\include\\flutter\\basic_message_channel.h C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\include\\flutter\\binary_messenger.h C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\include\\flutter\\byte_streams.h C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\include\\flutter\\dart_project.h C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\include\\flutter\\encodable_value.h C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\include\\flutter\\engine_method_result.h C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\include\\flutter\\event_channel.h C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\include\\flutter\\event_sink.h C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\include\\flutter\\event_stream_handler.h C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\include\\flutter\\event_stream_handler_functions.h C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\include\\flutter\\flutter_engine.h C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\include\\flutter\\flutter_view.h C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\include\\flutter\\flutter_view_controller.h C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\include\\flutter\\message_codec.h C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\include\\flutter\\method_call.h C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\include\\flutter\\method_channel.h C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\include\\flutter\\method_codec.h C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\include\\flutter\\method_result.h C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\include\\flutter\\method_result_functions.h C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\include\\flutter\\plugin_registrar.h C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\include\\flutter\\plugin_registrar_windows.h C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\include\\flutter\\plugin_registry.h C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\include\\flutter\\standard_codec_serializer.h C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\include\\flutter\\standard_message_codec.h C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\include\\flutter\\standard_method_codec.h C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\include\\flutter\\texture_registrar.h C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\plugin_registrar.cc C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\readme C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\standard_codec.cc C:\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\cpp_client_wrapper\\texture_registrar_impl.h

// File: .dart_tool\flutter_build\dart_plugin_registrant.dart
----------------------------------------
//
// Generated file. Do not edit.
// This file is generated from template in file `flutter_tools/lib/src/flutter_plugins.dart`.
//

// @dart = 3.6

import 'dart:io'; // flutter_ignore: dart_io_import.
import 'package:path_provider_android/path_provider_android.dart';
import 'package:path_provider_foundation/path_provider_foundation.dart';
import 'package:path_provider_linux/path_provider_linux.dart';
import 'package:path_provider_foundation/path_provider_foundation.dart';
import 'package:path_provider_windows/path_provider_windows.dart';

@pragma('vm:entry-point')
class _PluginRegistrant {

  @pragma('vm:entry-point')
  static void register() {
    if (Platform.isAndroid) {
      try {
        PathProviderAndroid.registerWith();
      } catch (err) {
        print(
          '`path_provider_android` threw an error: $err. '
          'The app may not function as expected until you remove this plugin from pubspec.yaml'
        );
      }

    } else if (Platform.isIOS) {
      try {
        PathProviderFoundation.registerWith();
      } catch (err) {
        print(
          '`path_provider_foundation` threw an error: $err. '
          'The app may not function as expected until you remove this plugin from pubspec.yaml'
        );
      }

    } else if (Platform.isLinux) {
      try {
        PathProviderLinux.registerWith();
      } catch (err) {
        print(
          '`path_provider_linux` threw an error: $err. '
          'The app may not function as expected until you remove this plugin from pubspec.yaml'
        );
      }

    } else if (Platform.isMacOS) {
      try {
        PathProviderFoundation.registerWith();
      } catch (err) {
        print(
          '`path_provider_foundation` threw an error: $err. '
          'The app may not function as expected until you remove this plugin from pubspec.yaml'
        );
      }

    } else if (Platform.isWindows) {
      try {
        PathProviderWindows.registerWith();
      } catch (err) {
        print(
          '`path_provider_windows` threw an error: $err. '
          'The app may not function as expected until you remove this plugin from pubspec.yaml'
        );
      }

    }
  }
}


// File: .dart_tool\package_config_subset
----------------------------------------
args
3.3
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/args-2.6.0/
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/args-2.6.0/lib/
async
2.18
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/async-2.11.0/
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/async-2.11.0/lib/
audio_session
3.4
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/audio_session-0.1.23/
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/audio_session-0.1.23/lib/
bloc
2.12
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/bloc-8.1.4/
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/bloc-8.1.4/lib/
boolean_selector
2.17
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/boolean_selector-2.1.1/
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/boolean_selector-2.1.1/lib/
characters
2.12
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/characters-1.3.0/
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/characters-1.3.0/lib/
cli_util
3.4
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/cli_util-0.4.2/
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/cli_util-0.4.2/lib/
clock
2.12
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/clock-1.1.1/
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/clock-1.1.1/lib/
collection
3.4
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/collection-1.19.0/
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/collection-1.19.0/lib/
crypto
3.4
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/crypto-3.0.6/
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/crypto-3.0.6/lib/
cupertino_icons
3.1
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/cupertino_icons-1.0.8/
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/cupertino_icons-1.0.8/lib/
equatable
2.12
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/equatable-2.0.7/
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/equatable-2.0.7/lib/
fake_async
2.12
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/fake_async-1.3.1/
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/fake_async-1.3.1/lib/
ffi
3.3
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/ffi-2.1.3/
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/ffi-2.1.3/lib/
ffigen
3.2
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/ffigen-11.0.0/
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/ffigen-11.0.0/lib/
file
3.0
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/file-7.0.1/
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/file-7.0.1/lib/
file_picker
2.19
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/file_picker-6.2.1/
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/file_picker-6.2.1/lib/
fixnum
3.1
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/fixnum-1.1.1/
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/fixnum-1.1.1/lib/
fl_chart
3.2
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/fl_chart-0.66.2/
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/fl_chart-0.66.2/lib/
flutter_bloc
2.12
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/flutter_bloc-8.1.6/
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/flutter_bloc-8.1.6/lib/
flutter_lints
3.5
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/flutter_lints-5.0.0/
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/flutter_lints-5.0.0/lib/
flutter_midi
2.12
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/flutter_midi-1.1.0/
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/flutter_midi-1.1.0/lib/
flutter_plugin_android_lifecycle
3.5
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/flutter_plugin_android_lifecycle-2.0.24/
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/flutter_plugin_android_lifecycle-2.0.24/lib/
glob
3.3
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/glob-2.1.3/
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/glob-2.1.3/lib/
js
2.19
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/js-0.6.7/
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/js-0.6.7/lib/
just_audio
3.0
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/just_audio-0.9.43/
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/just_audio-0.9.43/lib/
just_audio_platform_interface
2.17
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/just_audio_platform_interface-4.3.0/
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/just_audio_platform_interface-4.3.0/lib/
just_audio_web
3.2
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/just_audio_web-0.4.13/
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/just_audio_web-0.4.13/lib/
leak_tracker
3.2
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/leak_tracker-10.0.7/
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/leak_tracker-10.0.7/lib/
leak_tracker_flutter_testing
3.2
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/leak_tracker_flutter_testing-3.0.8/
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/leak_tracker_flutter_testing-3.0.8/lib/
leak_tracker_testing
3.2
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/leak_tracker_testing-3.0.1/
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/leak_tracker_testing-3.0.1/lib/
lints
3.6
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/lints-5.1.1/
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/lints-5.1.1/lib/
logging
3.4
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/logging-1.3.0/
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/logging-1.3.0/lib/
matcher
3.0
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/matcher-0.12.16+1/
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/matcher-0.12.16+1/lib/
material_color_utilities
2.17
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/material_color_utilities-0.11.1/
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/material_color_utilities-0.11.1/lib/
meta
2.12
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/meta-1.15.0/
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/meta-1.15.0/lib/
nested
2.12
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/nested-1.0.0/
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/nested-1.0.0/lib/
package_config
3.4
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/package_config-2.1.1/
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/package_config-2.1.1/lib/
path
3.0
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/path-1.9.0/
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/path-1.9.0/lib/
path_provider
3.4
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/path_provider-2.1.5/
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/path_provider-2.1.5/lib/
path_provider_android
3.5
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/path_provider_android-2.2.15/
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/path_provider_android-2.2.15/lib/
path_provider_foundation
3.3
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/path_provider_foundation-2.4.1/
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/path_provider_foundation-2.4.1/lib/
path_provider_linux
2.19
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/path_provider_linux-2.2.1/
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/path_provider_linux-2.2.1/lib/
path_provider_macos
2.12
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/path_provider_macos-2.0.7/
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/path_provider_macos-2.0.7/lib/
path_provider_platform_interface
3.0
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/path_provider_platform_interface-2.1.2/
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/path_provider_platform_interface-2.1.2/lib/
path_provider_windows
3.2
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/path_provider_windows-2.3.0/
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/path_provider_windows-2.3.0/lib/
platform
3.2
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/platform-3.1.6/
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/platform-3.1.6/lib/
plugin_platform_interface
3.0
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/plugin_platform_interface-2.1.8/
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/plugin_platform_interface-2.1.8/lib/
provider
2.12
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/provider-6.1.2/
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/provider-6.1.2/lib/
quiver
2.17
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/quiver-3.2.2/
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/quiver-3.2.2/lib/
rxdart
2.12
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/rxdart-0.28.0/
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/rxdart-0.28.0/lib/
screen_retriever
2.18
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/screen_retriever-0.1.9/
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/screen_retriever-0.1.9/lib/
source_span
2.18
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/source_span-1.10.0/
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/source_span-1.10.0/lib/
sprintf
2.12
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/sprintf-7.0.0/
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/sprintf-7.0.0/lib/
stack_trace
3.4
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/stack_trace-1.12.0/
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/stack_trace-1.12.0/lib/
stream_channel
2.19
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/stream_channel-2.1.2/
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/stream_channel-2.1.2/lib/
string_scanner
3.1
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/string_scanner-1.3.0/
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/string_scanner-1.3.0/lib/
term_glyph
2.12
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/term_glyph-1.2.1/
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/term_glyph-1.2.1/lib/
test_api
3.4
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/test_api-0.7.3/
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/test_api-0.7.3/lib/
tonic
2.12
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/tonic-0.2.5/
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/tonic-0.2.5/lib/
typed_data
3.5
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/typed_data-1.4.0/
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/typed_data-1.4.0/lib/
uuid
3.0
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/uuid-4.5.1/
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/uuid-4.5.1/lib/
vector_math
2.14
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/vector_math-2.1.4/
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/vector_math-2.1.4/lib/
vm_service
3.3
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/vm_service-14.3.0/
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/vm_service-14.3.0/lib/
web
3.4
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/web-1.1.0/
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/web-1.1.0/lib/
win32
3.5
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/win32-5.10.0/
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/win32-5.10.0/lib/
window_manager
3.0
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/window_manager-0.3.9/
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/window_manager-0.3.9/lib/
xdg_directories
3.3
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/xdg_directories-1.1.0/
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/xdg_directories-1.1.0/lib/
yaml
3.4
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/yaml-3.1.3/
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/yaml-3.1.3/lib/
yaml_edit
3.1
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/yaml_edit-2.2.2/
file:///C:/Users/vetle/AppData/Local/Pub/Cache/hosted/pub.dev/yaml_edit-2.2.2/lib/
audio_melodia_flutter
3.6
file:///C:/Users/vetle/Documents/GitHub/audio_to_midi_melodia/audio_melodia_flutter/
file:///C:/Users/vetle/Documents/GitHub/audio_to_midi_melodia/audio_melodia_flutter/lib/
sky_engine
3.2
file:///C:/flutter/bin/cache/pkg/sky_engine/
file:///C:/flutter/bin/cache/pkg/sky_engine/lib/
flutter
3.3
file:///C:/flutter/packages/flutter/
file:///C:/flutter/packages/flutter/lib/
flutter_test
3.3
file:///C:/flutter/packages/flutter_test/
file:///C:/flutter/packages/flutter_test/lib/
flutter_web_plugins
3.2
file:///C:/flutter/packages/flutter_web_plugins/
file:///C:/flutter/packages/flutter_web_plugins/lib/
2


// File: .dart_tool\version
----------------------------------------
3.27.2

// File: .flutter-plugins
----------------------------------------
# This is a generated file; do not edit or check into version control.
audio_session=C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\audio_session-0.1.23\\
file_picker=C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\file_picker-6.2.1\\
flutter_midi=C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\flutter_midi-1.1.0\\
flutter_plugin_android_lifecycle=C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\flutter_plugin_android_lifecycle-2.0.24\\
just_audio=C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\just_audio-0.9.43\\
just_audio_web=C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\just_audio_web-0.4.13\\
path_provider=C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider-2.1.5\\
path_provider_android=C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider_android-2.2.15\\
path_provider_foundation=C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider_foundation-2.4.1\\
path_provider_linux=C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider_linux-2.2.1\\
path_provider_macos=C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider_macos-2.0.7\\
path_provider_windows=C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider_windows-2.3.0\\
screen_retriever=C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\screen_retriever-0.1.9\\
window_manager=C:\\Users\\vetle\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\window_manager-0.3.9\\


// File: .flutter-plugins-dependencies
----------------------------------------
{"info":"This is a generated file; do not edit or check into version control.","plugins":{"ios":[{"name":"audio_session","path":"C:\\\\Users\\\\vetle\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\audio_session-0.1.23\\\\","native_build":true,"dependencies":[]},{"name":"file_picker","path":"C:\\\\Users\\\\vetle\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\file_picker-6.2.1\\\\","native_build":true,"dependencies":[]},{"name":"flutter_midi","path":"C:\\\\Users\\\\vetle\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\flutter_midi-1.1.0\\\\","native_build":true,"dependencies":[]},{"name":"just_audio","path":"C:\\\\Users\\\\vetle\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\just_audio-0.9.43\\\\","native_build":true,"dependencies":["audio_session"]},{"name":"path_provider_foundation","path":"C:\\\\Users\\\\vetle\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\path_provider_foundation-2.4.1\\\\","shared_darwin_source":true,"native_build":true,"dependencies":[]}],"android":[{"name":"audio_session","path":"C:\\\\Users\\\\vetle\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\audio_session-0.1.23\\\\","native_build":true,"dependencies":[]},{"name":"file_picker","path":"C:\\\\Users\\\\vetle\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\file_picker-6.2.1\\\\","native_build":true,"dependencies":["flutter_plugin_android_lifecycle"]},{"name":"flutter_midi","path":"C:\\\\Users\\\\vetle\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\flutter_midi-1.1.0\\\\","native_build":true,"dependencies":[]},{"name":"flutter_plugin_android_lifecycle","path":"C:\\\\Users\\\\vetle\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\flutter_plugin_android_lifecycle-2.0.24\\\\","native_build":true,"dependencies":[]},{"name":"just_audio","path":"C:\\\\Users\\\\vetle\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\just_audio-0.9.43\\\\","native_build":true,"dependencies":["audio_session"]},{"name":"path_provider_android","path":"C:\\\\Users\\\\vetle\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\path_provider_android-2.2.15\\\\","native_build":true,"dependencies":[]}],"macos":[{"name":"audio_session","path":"C:\\\\Users\\\\vetle\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\audio_session-0.1.23\\\\","native_build":true,"dependencies":[]},{"name":"just_audio","path":"C:\\\\Users\\\\vetle\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\just_audio-0.9.43\\\\","native_build":true,"dependencies":["audio_session"]},{"name":"path_provider_foundation","path":"C:\\\\Users\\\\vetle\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\path_provider_foundation-2.4.1\\\\","shared_darwin_source":true,"native_build":true,"dependencies":[]},{"name":"screen_retriever","path":"C:\\\\Users\\\\vetle\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\screen_retriever-0.1.9\\\\","native_build":true,"dependencies":[]},{"name":"window_manager","path":"C:\\\\Users\\\\vetle\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\window_manager-0.3.9\\\\","native_build":true,"dependencies":["screen_retriever"]}],"linux":[{"name":"path_provider_linux","path":"C:\\\\Users\\\\vetle\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\path_provider_linux-2.2.1\\\\","native_build":false,"dependencies":[]},{"name":"screen_retriever","path":"C:\\\\Users\\\\vetle\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\screen_retriever-0.1.9\\\\","native_build":true,"dependencies":[]},{"name":"window_manager","path":"C:\\\\Users\\\\vetle\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\window_manager-0.3.9\\\\","native_build":true,"dependencies":["screen_retriever"]}],"windows":[{"name":"path_provider_windows","path":"C:\\\\Users\\\\vetle\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\path_provider_windows-2.3.0\\\\","native_build":false,"dependencies":[]},{"name":"screen_retriever","path":"C:\\\\Users\\\\vetle\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\screen_retriever-0.1.9\\\\","native_build":true,"dependencies":[]},{"name":"window_manager","path":"C:\\\\Users\\\\vetle\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\window_manager-0.3.9\\\\","native_build":true,"dependencies":["screen_retriever"]}],"web":[{"name":"audio_session","path":"C:\\\\Users\\\\vetle\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\audio_session-0.1.23\\\\","dependencies":[]},{"name":"file_picker","path":"C:\\\\Users\\\\vetle\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\file_picker-6.2.1\\\\","dependencies":[]},{"name":"just_audio_web","path":"C:\\\\Users\\\\vetle\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\just_audio_web-0.4.13\\\\","dependencies":[]}]},"dependencyGraph":[{"name":"audio_session","dependencies":[]},{"name":"file_picker","dependencies":["flutter_plugin_android_lifecycle"]},{"name":"flutter_midi","dependencies":["path_provider","path_provider_macos"]},{"name":"flutter_plugin_android_lifecycle","dependencies":[]},{"name":"just_audio","dependencies":["just_audio_web","audio_session","path_provider"]},{"name":"just_audio_web","dependencies":[]},{"name":"path_provider","dependencies":["path_provider_android","path_provider_foundation","path_provider_linux","path_provider_windows"]},{"name":"path_provider_android","dependencies":[]},{"name":"path_provider_foundation","dependencies":[]},{"name":"path_provider_linux","dependencies":[]},{"name":"path_provider_macos","dependencies":[]},{"name":"path_provider_windows","dependencies":[]},{"name":"screen_retriever","dependencies":[]},{"name":"window_manager","dependencies":["screen_retriever"]}],"date_created":"2025-01-25 14:00:49.796144","version":"3.27.2","swift_package_manager_enabled":false}

// File: .gitignore
----------------------------------------
# Miscellaneous
*.class
*.log
*.pyc
*.swp
.DS_Store
.atom/
.build/
.buildlog/
.history
.svn/
.swiftpm/
migrate_working_dir/

# IntelliJ related
*.iml
*.ipr
*.iws
.idea/

# The .vscode folder contains launch configuration and tasks you configure in
# VS Code which you may wish to be included in version control, so this line
# is commented out by default.
#.vscode/

# Flutter/Dart/Pub related
**/doc/api/
**/ios/Flutter/.last_build_id
.dart_tool/
.flutter-plugins
.flutter-plugins-dependencies
.pub-cache/
.pub/
/build/

# Symbolication related
app.*.symbols

# Obfuscation related
app.*.map.json

# Android Studio will place build artifacts here
/android/app/debug
/android/app/profile
/android/app/release


// File: .idea\libraries\Dart_SDK.xml
----------------------------------------
<component name="libraryTable">
  <library name="Dart SDK">
    <CLASSES>
      <root url="file://C:\flutter/bin/cache/dart-sdk/lib/async" />
      <root url="file://C:\flutter/bin/cache/dart-sdk/lib/collection" />
      <root url="file://C:\flutter/bin/cache/dart-sdk/lib/convert" />
      <root url="file://C:\flutter/bin/cache/dart-sdk/lib/core" />
      <root url="file://C:\flutter/bin/cache/dart-sdk/lib/developer" />
      <root url="file://C:\flutter/bin/cache/dart-sdk/lib/html" />
      <root url="file://C:\flutter/bin/cache/dart-sdk/lib/io" />
      <root url="file://C:\flutter/bin/cache/dart-sdk/lib/isolate" />
      <root url="file://C:\flutter/bin/cache/dart-sdk/lib/math" />
      <root url="file://C:\flutter/bin/cache/dart-sdk/lib/mirrors" />
      <root url="file://C:\flutter/bin/cache/dart-sdk/lib/typed_data" />
    </CLASSES>
    <JAVADOC />
    <SOURCES />
  </library>
</component>

// File: .idea\libraries\KotlinJavaRuntime.xml
----------------------------------------
<component name="libraryTable">
  <library name="KotlinJavaRuntime">
    <CLASSES>
      <root url="jar://$KOTLIN_BUNDLED$/lib/kotlin-stdlib.jar!/" />
      <root url="jar://$KOTLIN_BUNDLED$/lib/kotlin-reflect.jar!/" />
      <root url="jar://$KOTLIN_BUNDLED$/lib/kotlin-test.jar!/" />
    </CLASSES>
    <JAVADOC />
    <SOURCES>
      <root url="jar://$KOTLIN_BUNDLED$/lib/kotlin-stdlib-sources.jar!/" />
      <root url="jar://$KOTLIN_BUNDLED$/lib/kotlin-reflect-sources.jar!/" />
      <root url="jar://$KOTLIN_BUNDLED$/lib/kotlin-test-sources.jar!/" />
    </SOURCES>
  </library>
</component>


// File: .idea\modules.xml
----------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ProjectModuleManager">
    <modules>
      <module fileurl="file://$PROJECT_DIR$/audio_melodia_flutter.iml" filepath="$PROJECT_DIR$/audio_melodia_flutter.iml" />
      <module fileurl="file://$PROJECT_DIR$/android/audio_melodia_flutter_android.iml" filepath="$PROJECT_DIR$/android/audio_melodia_flutter_android.iml" />
    </modules>
  </component>
</project>


// File: .idea\runConfigurations\main_dart.xml
----------------------------------------
<component name="ProjectRunConfigurationManager">
  <configuration default="false" name="main.dart" type="FlutterRunConfigurationType" factoryName="Flutter">
    <option name="filePath" value="$PROJECT_DIR$/lib/main.dart" />
    <method />
  </configuration>
</component>

// File: .idea\workspace.xml
----------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="FileEditorManager">
    <leaf>
      <file leaf-file-name="main.dart" pinned="false" current-in-tab="true">
        <entry file="file://$PROJECT_DIR$/lib/main.dart">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="0">
              <caret line="0" column="0" lean-forward="false" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
            </state>
          </provider>
        </entry>
      </file>
    </leaf>
  </component>
  <component name="ToolWindowManager">
    <editor active="true" />
    <layout>
      <window_info id="Project" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="true" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="0" side_tool="false" content_ui="combo" />
    </layout>
  </component>
  <component name="ProjectView">
    <navigator currentView="ProjectPane" proportions="" version="1">
    </navigator>
    <panes>
      <pane id="ProjectPane">
        <option name="show-excluded-files" value="false" />
      </pane>
    </panes>
  </component>
  <component name="PropertiesComponent">
    <property name="last_opened_file_path" value="$PROJECT_DIR$" />
    <property name="dart.analysis.tool.window.force.activate" value="true" />
    <property name="show.migrate.to.gradle.popup" value="false" />
  </component>
</project>


// File: .metadata
----------------------------------------
# This file tracks properties of this Flutter project.
# Used by Flutter tool to assess capabilities and perform upgrades etc.
#
# This file should be version controlled and should not be manually edited.

version:
  revision: "68415ad1d920f6fe5ec284f5c2febf7c4dd5b0b3"
  channel: "stable"

project_type: app

# Tracks metadata for the flutter migrate command
migration:
  platforms:
    - platform: root
      create_revision: 68415ad1d920f6fe5ec284f5c2febf7c4dd5b0b3
      base_revision: 68415ad1d920f6fe5ec284f5c2febf7c4dd5b0b3
    - platform: linux
      create_revision: 68415ad1d920f6fe5ec284f5c2febf7c4dd5b0b3
      base_revision: 68415ad1d920f6fe5ec284f5c2febf7c4dd5b0b3
    - platform: macos
      create_revision: 68415ad1d920f6fe5ec284f5c2febf7c4dd5b0b3
      base_revision: 68415ad1d920f6fe5ec284f5c2febf7c4dd5b0b3
    - platform: windows
      create_revision: 68415ad1d920f6fe5ec284f5c2febf7c4dd5b0b3
      base_revision: 68415ad1d920f6fe5ec284f5c2febf7c4dd5b0b3

  # User provided section

  # List of Local paths (relative to this file) that should be
  # ignored by the migrate tool.
  #
  # Files that are not part of the templates will be ignored by default.
  unmanaged_files:
    - 'lib/main.dart'
    - 'ios/Runner.xcodeproj/project.pbxproj'


// File: analysis_options.yaml
----------------------------------------
# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
include: package:flutter_lints/flutter.yaml

linter:
  # The lint rules applied to this project can be customized in the
  # section below to disable rules from the `package:flutter_lints/flutter.yaml`
  # included above or to enable additional rules. A list of all available lints
  # and their documentation is published at https://dart.dev/lints.
  #
  # Instead of disabling a lint rule for the entire project in the
  # section below, it can also be suppressed for a single line of code
  # or a specific dart file by using the `// ignore: name_of_lint` and
  # `// ignore_for_file: name_of_lint` syntax on the line or in the file
  # producing the lint.
  rules:
    # avoid_print: false  # Uncomment to disable the `avoid_print` rule
    # prefer_single_quotes: true  # Uncomment to enable the `prefer_single_quotes` rule

# Additional information about this file can be found at
# https://dart.dev/guides/language/analysis-options


// File: audio_melodia_flutter.iml
----------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/lib" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/test" isTestSource="true" />
      <excludeFolder url="file://$MODULE_DIR$/.dart_tool" />
      <excludeFolder url="file://$MODULE_DIR$/.idea" />
      <excludeFolder url="file://$MODULE_DIR$/build" />
    </content>
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="Dart SDK" level="project" />
    <orderEntry type="library" name="Flutter Plugins" level="project" />
    <orderEntry type="library" name="Dart Packages" level="project" />
  </component>
</module>


// File: devtools_options.yaml
----------------------------------------
description: This file stores settings for Dart & Flutter DevTools.
documentation: https://docs.flutter.dev/tools/devtools/extensions#configure-extension-enablement-states
extensions:


// File: lib\main.dart
----------------------------------------
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:window_manager/window_manager.dart';
import 'ui/app.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  
  // Initialize window settings for desktop
  await windowManager.ensureInitialized();
  await windowManager.setTitle('Audio Melodia');
  await windowManager.setMinimumSize(const Size(800, 600));
  await windowManager.setSize(const Size(1200, 800));

  runApp(const AudioMelodiaApp());
}


// File: lib\services\audio_processing\audio_service.dart
----------------------------------------
import 'dart:convert';
import 'dart:io';
import 'package:path/path.dart' as path;

class AudioService {
  static final AudioService _instance = AudioService._internal();
  factory AudioService() => _instance;

  AudioService._internal();

  String get _pythonScriptPath {
    return path.join(Directory.current.path, 'python', 'processor.py');
  }

  String get _pythonExecutable {
    return path.join(Directory.current.path, 'venv', 'Scripts', 'python.exe');
  }

  Future<Map<String, dynamic>> separateStems({
    required String inputPath,
    required String outputDir,
  }) async {
    try {
      // Escape paths to handle spaces and special characters
      final safeInputPath = inputPath.replaceAll('\\', '/');
      final safeOutputDir = outputDir.replaceAll('\\', '/');

      final result = await Process.run(_pythonExecutable, [
        _pythonScriptPath,
        'separate_stems',
        'input_path=$safeInputPath',
        'output_dir=$safeOutputDir',
      ]);

      if (result.stderr.toString().isNotEmpty) {
        throw Exception(result.stderr);
      }

      if (result.exitCode != 0) {
        throw Exception('Python process failed with exit code ${result.exitCode}');
      }

      final Map<String, dynamic> response = jsonDecode(result.stdout);
      
      if (response['status'] == 'error') {
        throw Exception(response['error']);
      }

      return response['result'];
    } catch (e) {
      throw Exception('Failed to separate stems: $e');
    }
  }

  Future<Map<String, dynamic>> checkCapabilities() async {
    try {
      final result = await Process.run(_pythonExecutable, [
        _pythonScriptPath,
        'get_capabilities',
      ]);

      if (result.stderr.toString().isNotEmpty) {
        throw Exception(result.stderr);
      }

      if (result.exitCode != 0) {
        throw Exception('Python process failed with exit code ${result.exitCode}');
      }

      final Map<String, dynamic> response = jsonDecode(result.stdout);
      
      if (response['status'] == 'error') {
        throw Exception(response['error']);
      }

      return response['result'];
    } catch (e) {
      throw Exception('Failed to check capabilities: $e');
    }
  }
}

// File: lib\ui\app.dart
----------------------------------------
import 'package:flutter/material.dart';
import 'screens/home_screen.dart';

class AudioMelodiaApp extends StatelessWidget {
  const AudioMelodiaApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Audio Melodia',
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(
          seedColor: Colors.blue,
          brightness: Brightness.dark,
        ),
        useMaterial3: true,
      ),
      home: const HomeScreen(),
    );
  }
}

// File: lib\ui\screens\home_screen.dart
----------------------------------------
import 'package:flutter/material.dart';
import 'package:file_picker/file_picker.dart';
import 'package:path_provider/path_provider.dart';
import 'package:path/path.dart' as path;
import '../../services/audio_processing/audio_service.dart';

class HomeScreen extends StatefulWidget {
  const HomeScreen({super.key});

  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  final AudioService _audioService = AudioService();
  String? _selectedFilePath;
  bool _isProcessing = false;
  String _statusMessage = '';

  Future<void> _selectFile() async {
    try {
      FilePickerResult? result = await FilePicker.platform.pickFiles(
        type: FileType.custom,
        allowedExtensions: ['wav', 'mp3', 'flac', 'ogg'],
      );

      if (result != null) {
        setState(() {
          _selectedFilePath = result.files.single.path;
          _statusMessage = 'Selected file: ${result.files.single.name}';
        });
      }
    } catch (e) {
      setState(() {
        _statusMessage = 'Error selecting file: $e';
      });
    }
  }

  Future<void> _processStemSeparation() async {
    if (_selectedFilePath == null) {
      setState(() {
        _statusMessage = 'Please select an audio file first';
      });
      return;
    }

    setState(() {
      _isProcessing = true;
      _statusMessage = 'Processing audio...\nThis may take a few minutes.';
    });

    try {
      final outputDir = await getApplicationDocumentsDirectory();
      final fileName = path.basenameWithoutExtension(_selectedFilePath!);
      final stemsDir = path.join(outputDir.path, '${fileName}_stems');
      
      final result = await _audioService.separateStems(
        inputPath: _selectedFilePath!,
        outputDir: stemsDir,
      );

      setState(() {
        _statusMessage = 'Stem separation complete!\n'
            'Stems saved to: $stemsDir\n'
            'Generated stems: ${(result['stems'] as Map).keys.join(', ')}';
      });
    } catch (e) {
      setState(() {
        _statusMessage = 'Error processing audio: $e';
      });
    } finally {
      setState(() {
        _isProcessing = false;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Audio Melodia'),
        centerTitle: true,
      ),
      body: Center(
        child: Padding(
          padding: const EdgeInsets.all(20.0),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              const Text(
                'Separate Audio into Stems',
                style: TextStyle(
                  fontSize: 24,
                  fontWeight: FontWeight.bold,
                ),
              ),
              const SizedBox(height: 10),
              const Text(
                'Supported formats: WAV, MP3, FLAC, OGG',
                style: TextStyle(
                  fontSize: 14,
                  color: Colors.grey,
                ),
              ),
              const SizedBox(height: 30),
              ElevatedButton.icon(
                icon: const Icon(Icons.audio_file),
                label: const Text('Select Audio File'),
                onPressed: _isProcessing ? null : _selectFile,
                style: ElevatedButton.styleFrom(
                  padding: const EdgeInsets.symmetric(
                    horizontal: 30,
                    vertical: 15,
                  ),
                ),
              ),
              const SizedBox(height: 20),
              ElevatedButton.icon(
                icon: const Icon(Icons.splitscreen),
                label: const Text('Separate Stems'),
                onPressed: _isProcessing || _selectedFilePath == null 
                  ? null 
                  : _processStemSeparation,
                style: ElevatedButton.styleFrom(
                  padding: const EdgeInsets.symmetric(
                    horizontal: 30,
                    vertical: 15,
                  ),
                ),
              ),
              const SizedBox(height: 30),
              if (_isProcessing) ...[
                const CircularProgressIndicator(),
                const SizedBox(height: 20),
                const Text(
                  'This process may take several minutes\ndepending on the file size',
                  textAlign: TextAlign.center,
                  style: TextStyle(
                    fontSize: 14,
                    color: Colors.grey,
                  ),
                ),
              ],
              if (_statusMessage.isNotEmpty)
                Container(
                  margin: const EdgeInsets.only(top: 20),
                  padding: const EdgeInsets.all(16.0),
                  decoration: BoxDecoration(
                    color: Theme.of(context).colorScheme.surfaceVariant,
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: Text(
                    _statusMessage,
                    textAlign: TextAlign.center,
                    style: Theme.of(context).textTheme.bodyLarge,
                  ),
                ),
            ],
          ),
        ),
      ),
    );
  }
}

// File: linux\.gitignore
----------------------------------------
flutter/ephemeral


// File: linux\CMakeLists.txt
----------------------------------------
# Project-level configuration.
cmake_minimum_required(VERSION 3.13)
project(runner LANGUAGES CXX)

# The name of the executable created for the application. Change this to change
# the on-disk name of your application.
set(BINARY_NAME "audio_melodia_flutter")
# The unique GTK application identifier for this application. See:
# https://wiki.gnome.org/HowDoI/ChooseApplicationID
set(APPLICATION_ID "com.melodia.audio_melodia_flutter")

# Explicitly opt in to modern CMake behaviors to avoid warnings with recent
# versions of CMake.
cmake_policy(SET CMP0063 NEW)

# Load bundled libraries from the lib/ directory relative to the binary.
set(CMAKE_INSTALL_RPATH "$ORIGIN/lib")

# Root filesystem for cross-building.
if(FLUTTER_TARGET_PLATFORM_SYSROOT)
  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})
  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})
  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)
  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
endif()

# Define build configuration options.
if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
  set(CMAKE_BUILD_TYPE "Debug" CACHE
    STRING "Flutter build mode" FORCE)
  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS
    "Debug" "Profile" "Release")
endif()

# Compilation settings that should be applied to most targets.
#
# Be cautious about adding new options here, as plugins use this function by
# default. In most cases, you should add new options to specific targets instead
# of modifying this function.
function(APPLY_STANDARD_SETTINGS TARGET)
  target_compile_features(${TARGET} PUBLIC cxx_std_14)
  target_compile_options(${TARGET} PRIVATE -Wall -Werror)
  target_compile_options(${TARGET} PRIVATE "$<$<NOT:$<CONFIG:Debug>>:-O3>")
  target_compile_definitions(${TARGET} PRIVATE "$<$<NOT:$<CONFIG:Debug>>:NDEBUG>")
endfunction()

# Flutter library and tool build rules.
set(FLUTTER_MANAGED_DIR "${CMAKE_CURRENT_SOURCE_DIR}/flutter")
add_subdirectory(${FLUTTER_MANAGED_DIR})

# System-level dependencies.
find_package(PkgConfig REQUIRED)
pkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)

# Application build; see runner/CMakeLists.txt.
add_subdirectory("runner")

# Run the Flutter tool portions of the build. This must not be removed.
add_dependencies(${BINARY_NAME} flutter_assemble)

# Only the install-generated bundle's copy of the executable will launch
# correctly, since the resources must in the right relative locations. To avoid
# people trying to run the unbundled copy, put it in a subdirectory instead of
# the default top-level location.
set_target_properties(${BINARY_NAME}
  PROPERTIES
  RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/intermediates_do_not_run"
)


# Generated plugin build rules, which manage building the plugins and adding
# them to the application.
include(flutter/generated_plugins.cmake)


# === Installation ===
# By default, "installing" just makes a relocatable bundle in the build
# directory.
set(BUILD_BUNDLE_DIR "${PROJECT_BINARY_DIR}/bundle")
if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
  set(CMAKE_INSTALL_PREFIX "${BUILD_BUNDLE_DIR}" CACHE PATH "..." FORCE)
endif()

# Start with a clean build bundle directory every time.
install(CODE "
  file(REMOVE_RECURSE \"${BUILD_BUNDLE_DIR}/\")
  " COMPONENT Runtime)

set(INSTALL_BUNDLE_DATA_DIR "${CMAKE_INSTALL_PREFIX}/data")
set(INSTALL_BUNDLE_LIB_DIR "${CMAKE_INSTALL_PREFIX}/lib")

install(TARGETS ${BINARY_NAME} RUNTIME DESTINATION "${CMAKE_INSTALL_PREFIX}"
  COMPONENT Runtime)

install(FILES "${FLUTTER_ICU_DATA_FILE}" DESTINATION "${INSTALL_BUNDLE_DATA_DIR}"
  COMPONENT Runtime)

install(FILES "${FLUTTER_LIBRARY}" DESTINATION "${INSTALL_BUNDLE_LIB_DIR}"
  COMPONENT Runtime)

foreach(bundled_library ${PLUGIN_BUNDLED_LIBRARIES})
  install(FILES "${bundled_library}"
    DESTINATION "${INSTALL_BUNDLE_LIB_DIR}"
    COMPONENT Runtime)
endforeach(bundled_library)

# Copy the native assets provided by the build.dart from all packages.
set(NATIVE_ASSETS_DIR "${PROJECT_BUILD_DIR}native_assets/linux/")
install(DIRECTORY "${NATIVE_ASSETS_DIR}"
   DESTINATION "${INSTALL_BUNDLE_LIB_DIR}"
   COMPONENT Runtime)

# Fully re-copy the assets directory on each build to avoid having stale files
# from a previous install.
set(FLUTTER_ASSET_DIR_NAME "flutter_assets")
install(CODE "
  file(REMOVE_RECURSE \"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\")
  " COMPONENT Runtime)
install(DIRECTORY "${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}"
  DESTINATION "${INSTALL_BUNDLE_DATA_DIR}" COMPONENT Runtime)

# Install the AOT library on non-Debug builds only.
if(NOT CMAKE_BUILD_TYPE MATCHES "Debug")
  install(FILES "${AOT_LIBRARY}" DESTINATION "${INSTALL_BUNDLE_LIB_DIR}"
    COMPONENT Runtime)
endif()


// File: linux\flutter\CMakeLists.txt
----------------------------------------
# This file controls Flutter-level build steps. It should not be edited.
cmake_minimum_required(VERSION 3.10)

set(EPHEMERAL_DIR "${CMAKE_CURRENT_SOURCE_DIR}/ephemeral")

# Configuration provided via flutter tool.
include(${EPHEMERAL_DIR}/generated_config.cmake)

# TODO: Move the rest of this into files in ephemeral. See
# https://github.com/flutter/flutter/issues/57146.

# Serves the same purpose as list(TRANSFORM ... PREPEND ...),
# which isn't available in 3.10.
function(list_prepend LIST_NAME PREFIX)
    set(NEW_LIST "")
    foreach(element ${${LIST_NAME}})
        list(APPEND NEW_LIST "${PREFIX}${element}")
    endforeach(element)
    set(${LIST_NAME} "${NEW_LIST}" PARENT_SCOPE)
endfunction()

# === Flutter Library ===
# System-level dependencies.
find_package(PkgConfig REQUIRED)
pkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)
pkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)
pkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)

set(FLUTTER_LIBRARY "${EPHEMERAL_DIR}/libflutter_linux_gtk.so")

# Published to parent scope for install step.
set(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)
set(FLUTTER_ICU_DATA_FILE "${EPHEMERAL_DIR}/icudtl.dat" PARENT_SCOPE)
set(PROJECT_BUILD_DIR "${PROJECT_DIR}/build/" PARENT_SCOPE)
set(AOT_LIBRARY "${PROJECT_DIR}/build/lib/libapp.so" PARENT_SCOPE)

list(APPEND FLUTTER_LIBRARY_HEADERS
  "fl_basic_message_channel.h"
  "fl_binary_codec.h"
  "fl_binary_messenger.h"
  "fl_dart_project.h"
  "fl_engine.h"
  "fl_json_message_codec.h"
  "fl_json_method_codec.h"
  "fl_message_codec.h"
  "fl_method_call.h"
  "fl_method_channel.h"
  "fl_method_codec.h"
  "fl_method_response.h"
  "fl_plugin_registrar.h"
  "fl_plugin_registry.h"
  "fl_standard_message_codec.h"
  "fl_standard_method_codec.h"
  "fl_string_codec.h"
  "fl_value.h"
  "fl_view.h"
  "flutter_linux.h"
)
list_prepend(FLUTTER_LIBRARY_HEADERS "${EPHEMERAL_DIR}/flutter_linux/")
add_library(flutter INTERFACE)
target_include_directories(flutter INTERFACE
  "${EPHEMERAL_DIR}"
)
target_link_libraries(flutter INTERFACE "${FLUTTER_LIBRARY}")
target_link_libraries(flutter INTERFACE
  PkgConfig::GTK
  PkgConfig::GLIB
  PkgConfig::GIO
)
add_dependencies(flutter flutter_assemble)

# === Flutter tool backend ===
# _phony_ is a non-existent file to force this command to run every time,
# since currently there's no way to get a full input/output list from the
# flutter tool.
add_custom_command(
  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}
    ${CMAKE_CURRENT_BINARY_DIR}/_phony_
  COMMAND ${CMAKE_COMMAND} -E env
    ${FLUTTER_TOOL_ENVIRONMENT}
    "${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh"
      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}
  VERBATIM
)
add_custom_target(flutter_assemble DEPENDS
  "${FLUTTER_LIBRARY}"
  ${FLUTTER_LIBRARY_HEADERS}
)


// File: linux\flutter\generated_plugin_registrant.cc
----------------------------------------
//
//  Generated file. Do not edit.
//

// clang-format off

#include "generated_plugin_registrant.h"

#include <screen_retriever/screen_retriever_plugin.h>
#include <window_manager/window_manager_plugin.h>

void fl_register_plugins(FlPluginRegistry* registry) {
  g_autoptr(FlPluginRegistrar) screen_retriever_registrar =
      fl_plugin_registry_get_registrar_for_plugin(registry, "ScreenRetrieverPlugin");
  screen_retriever_plugin_register_with_registrar(screen_retriever_registrar);
  g_autoptr(FlPluginRegistrar) window_manager_registrar =
      fl_plugin_registry_get_registrar_for_plugin(registry, "WindowManagerPlugin");
  window_manager_plugin_register_with_registrar(window_manager_registrar);
}


// File: linux\flutter\generated_plugin_registrant.h
----------------------------------------
//
//  Generated file. Do not edit.
//

// clang-format off

#ifndef GENERATED_PLUGIN_REGISTRANT_
#define GENERATED_PLUGIN_REGISTRANT_

#include <flutter_linux/flutter_linux.h>

// Registers Flutter plugins.
void fl_register_plugins(FlPluginRegistry* registry);

#endif  // GENERATED_PLUGIN_REGISTRANT_


// File: linux\flutter\generated_plugins.cmake
----------------------------------------
#
# Generated file, do not edit.
#

list(APPEND FLUTTER_PLUGIN_LIST
  screen_retriever
  window_manager
)

list(APPEND FLUTTER_FFI_PLUGIN_LIST
)

set(PLUGIN_BUNDLED_LIBRARIES)

foreach(plugin ${FLUTTER_PLUGIN_LIST})
  add_subdirectory(flutter/ephemeral/.plugin_symlinks/${plugin}/linux plugins/${plugin})
  target_link_libraries(${BINARY_NAME} PRIVATE ${plugin}_plugin)
  list(APPEND PLUGIN_BUNDLED_LIBRARIES $<TARGET_FILE:${plugin}_plugin>)
  list(APPEND PLUGIN_BUNDLED_LIBRARIES ${${plugin}_bundled_libraries})
endforeach(plugin)

foreach(ffi_plugin ${FLUTTER_FFI_PLUGIN_LIST})
  add_subdirectory(flutter/ephemeral/.plugin_symlinks/${ffi_plugin}/linux plugins/${ffi_plugin})
  list(APPEND PLUGIN_BUNDLED_LIBRARIES ${${ffi_plugin}_bundled_libraries})
endforeach(ffi_plugin)


// File: linux\runner\CMakeLists.txt
----------------------------------------
cmake_minimum_required(VERSION 3.13)
project(runner LANGUAGES CXX)

# Define the application target. To change its name, change BINARY_NAME in the
# top-level CMakeLists.txt, not the value here, or `flutter run` will no longer
# work.
#
# Any new source files that you add to the application should be added here.
add_executable(${BINARY_NAME}
  "main.cc"
  "my_application.cc"
  "${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc"
)

# Apply the standard set of build settings. This can be removed for applications
# that need different build settings.
apply_standard_settings(${BINARY_NAME})

# Add preprocessor definitions for the application ID.
add_definitions(-DAPPLICATION_ID="${APPLICATION_ID}")

# Add dependency libraries. Add any application-specific dependencies here.
target_link_libraries(${BINARY_NAME} PRIVATE flutter)
target_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)

target_include_directories(${BINARY_NAME} PRIVATE "${CMAKE_SOURCE_DIR}")


// File: linux\runner\main.cc
----------------------------------------
#include "my_application.h"

int main(int argc, char** argv) {
  g_autoptr(MyApplication) app = my_application_new();
  return g_application_run(G_APPLICATION(app), argc, argv);
}


// File: linux\runner\my_application.cc
----------------------------------------
#include "my_application.h"

#include <flutter_linux/flutter_linux.h>
#ifdef GDK_WINDOWING_X11
#include <gdk/gdkx.h>
#endif

#include "flutter/generated_plugin_registrant.h"

struct _MyApplication {
  GtkApplication parent_instance;
  char** dart_entrypoint_arguments;
};

G_DEFINE_TYPE(MyApplication, my_application, GTK_TYPE_APPLICATION)

// Implements GApplication::activate.
static void my_application_activate(GApplication* application) {
  MyApplication* self = MY_APPLICATION(application);
  GtkWindow* window =
      GTK_WINDOW(gtk_application_window_new(GTK_APPLICATION(application)));

  // Use a header bar when running in GNOME as this is the common style used
  // by applications and is the setup most users will be using (e.g. Ubuntu
  // desktop).
  // If running on X and not using GNOME then just use a traditional title bar
  // in case the window manager does more exotic layout, e.g. tiling.
  // If running on Wayland assume the header bar will work (may need changing
  // if future cases occur).
  gboolean use_header_bar = TRUE;
#ifdef GDK_WINDOWING_X11
  GdkScreen* screen = gtk_window_get_screen(window);
  if (GDK_IS_X11_SCREEN(screen)) {
    const gchar* wm_name = gdk_x11_screen_get_window_manager_name(screen);
    if (g_strcmp0(wm_name, "GNOME Shell") != 0) {
      use_header_bar = FALSE;
    }
  }
#endif
  if (use_header_bar) {
    GtkHeaderBar* header_bar = GTK_HEADER_BAR(gtk_header_bar_new());
    gtk_widget_show(GTK_WIDGET(header_bar));
    gtk_header_bar_set_title(header_bar, "audio_melodia_flutter");
    gtk_header_bar_set_show_close_button(header_bar, TRUE);
    gtk_window_set_titlebar(window, GTK_WIDGET(header_bar));
  } else {
    gtk_window_set_title(window, "audio_melodia_flutter");
  }

  gtk_window_set_default_size(window, 1280, 720);
  gtk_widget_show(GTK_WIDGET(window));

  g_autoptr(FlDartProject) project = fl_dart_project_new();
  fl_dart_project_set_dart_entrypoint_arguments(project, self->dart_entrypoint_arguments);

  FlView* view = fl_view_new(project);
  gtk_widget_show(GTK_WIDGET(view));
  gtk_container_add(GTK_CONTAINER(window), GTK_WIDGET(view));

  fl_register_plugins(FL_PLUGIN_REGISTRY(view));

  gtk_widget_grab_focus(GTK_WIDGET(view));
}

// Implements GApplication::local_command_line.
static gboolean my_application_local_command_line(GApplication* application, gchar*** arguments, int* exit_status) {
  MyApplication* self = MY_APPLICATION(application);
  // Strip out the first argument as it is the binary name.
  self->dart_entrypoint_arguments = g_strdupv(*arguments + 1);

  g_autoptr(GError) error = nullptr;
  if (!g_application_register(application, nullptr, &error)) {
     g_warning("Failed to register: %s", error->message);
     *exit_status = 1;
     return TRUE;
  }

  g_application_activate(application);
  *exit_status = 0;

  return TRUE;
}

// Implements GApplication::startup.
static void my_application_startup(GApplication* application) {
  //MyApplication* self = MY_APPLICATION(object);

  // Perform any actions required at application startup.

  G_APPLICATION_CLASS(my_application_parent_class)->startup(application);
}

// Implements GApplication::shutdown.
static void my_application_shutdown(GApplication* application) {
  //MyApplication* self = MY_APPLICATION(object);

  // Perform any actions required at application shutdown.

  G_APPLICATION_CLASS(my_application_parent_class)->shutdown(application);
}

// Implements GObject::dispose.
static void my_application_dispose(GObject* object) {
  MyApplication* self = MY_APPLICATION(object);
  g_clear_pointer(&self->dart_entrypoint_arguments, g_strfreev);
  G_OBJECT_CLASS(my_application_parent_class)->dispose(object);
}

static void my_application_class_init(MyApplicationClass* klass) {
  G_APPLICATION_CLASS(klass)->activate = my_application_activate;
  G_APPLICATION_CLASS(klass)->local_command_line = my_application_local_command_line;
  G_APPLICATION_CLASS(klass)->startup = my_application_startup;
  G_APPLICATION_CLASS(klass)->shutdown = my_application_shutdown;
  G_OBJECT_CLASS(klass)->dispose = my_application_dispose;
}

static void my_application_init(MyApplication* self) {}

MyApplication* my_application_new() {
  // Set the program name to the application ID, which helps various systems
  // like GTK and desktop environments map this running application to its
  // corresponding .desktop file. This ensures better integration by allowing
  // the application to be recognized beyond its binary name.
  g_set_prgname(APPLICATION_ID);

  return MY_APPLICATION(g_object_new(my_application_get_type(),
                                     "application-id", APPLICATION_ID,
                                     "flags", G_APPLICATION_NON_UNIQUE,
                                     nullptr));
}


// File: linux\runner\my_application.h
----------------------------------------
#ifndef FLUTTER_MY_APPLICATION_H_
#define FLUTTER_MY_APPLICATION_H_

#include <gtk/gtk.h>

G_DECLARE_FINAL_TYPE(MyApplication, my_application, MY, APPLICATION,
                     GtkApplication)

/**
 * my_application_new:
 *
 * Creates a new Flutter-based application.
 *
 * Returns: a new #MyApplication.
 */
MyApplication* my_application_new();

#endif  // FLUTTER_MY_APPLICATION_H_


// File: macos\.gitignore
----------------------------------------
# Flutter-related
**/Flutter/ephemeral/
**/Pods/

# Xcode-related
**/dgph
**/xcuserdata/


// File: macos\Flutter\ephemeral\Flutter-Generated.xcconfig
----------------------------------------
// This is a generated file; do not edit or check into version control.
FLUTTER_ROOT=C:\flutter
FLUTTER_APPLICATION_PATH=C:\Users\vetle\Documents\GitHub\audio_to_midi_melodia\audio_melodia_flutter
COCOAPODS_PARALLEL_CODE_SIGN=true
FLUTTER_BUILD_DIR=build
FLUTTER_BUILD_NAME=1.0.0
FLUTTER_BUILD_NUMBER=1
DART_OBFUSCATION=false
TRACK_WIDGET_CREATION=true
TREE_SHAKE_ICONS=false
PACKAGE_CONFIG=.dart_tool/package_config.json


// File: macos\Flutter\Flutter-Debug.xcconfig
----------------------------------------
#include "ephemeral/Flutter-Generated.xcconfig"


// File: macos\Flutter\Flutter-Release.xcconfig
----------------------------------------
#include "ephemeral/Flutter-Generated.xcconfig"


// File: macos\Flutter\GeneratedPluginRegistrant.swift
----------------------------------------
//
//  Generated file. Do not edit.
//

import FlutterMacOS
import Foundation

import audio_session
import just_audio
import path_provider_foundation
import screen_retriever
import window_manager

func RegisterGeneratedPlugins(registry: FlutterPluginRegistry) {
  AudioSessionPlugin.register(with: registry.registrar(forPlugin: "AudioSessionPlugin"))
  JustAudioPlugin.register(with: registry.registrar(forPlugin: "JustAudioPlugin"))
  PathProviderPlugin.register(with: registry.registrar(forPlugin: "PathProviderPlugin"))
  ScreenRetrieverPlugin.register(with: registry.registrar(forPlugin: "ScreenRetrieverPlugin"))
  WindowManagerPlugin.register(with: registry.registrar(forPlugin: "WindowManagerPlugin"))
}


// File: macos\Runner\AppDelegate.swift
----------------------------------------
import Cocoa
import FlutterMacOS

@main
class AppDelegate: FlutterAppDelegate {
  override func applicationShouldTerminateAfterLastWindowClosed(_ sender: NSApplication) -> Bool {
    return true
  }

  override func applicationSupportsSecureRestorableState(_ app: NSApplication) -> Bool {
    return true
  }
}


// File: macos\Runner\Base.lproj\MainMenu.xib
----------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<document type="com.apple.InterfaceBuilder3.Cocoa.XIB" version="3.0" toolsVersion="14490.70" targetRuntime="MacOSX.Cocoa" propertyAccessControl="none" useAutolayout="YES" customObjectInstantitationMethod="direct">
    <dependencies>
        <deployment identifier="macosx"/>
        <plugIn identifier="com.apple.InterfaceBuilder.CocoaPlugin" version="14490.70"/>
        <capability name="documents saved in the Xcode 8 format" minToolsVersion="8.0"/>
    </dependencies>
    <objects>
        <customObject id="-2" userLabel="File's Owner" customClass="NSApplication">
            <connections>
                <outlet property="delegate" destination="Voe-Tx-rLC" id="GzC-gU-4Uq"/>
            </connections>
        </customObject>
        <customObject id="-1" userLabel="First Responder" customClass="FirstResponder"/>
        <customObject id="-3" userLabel="Application" customClass="NSObject"/>
        <customObject id="Voe-Tx-rLC" customClass="AppDelegate" customModule="Runner" customModuleProvider="target">
            <connections>
                <outlet property="applicationMenu" destination="uQy-DD-JDr" id="XBo-yE-nKs"/>
                <outlet property="mainFlutterWindow" destination="QvC-M9-y7g" id="gIp-Ho-8D9"/>
            </connections>
        </customObject>
        <customObject id="YLy-65-1bz" customClass="NSFontManager"/>
        <menu title="Main Menu" systemMenu="main" id="AYu-sK-qS6">
            <items>
                <menuItem title="APP_NAME" id="1Xt-HY-uBw">
                    <modifierMask key="keyEquivalentModifierMask"/>
                    <menu key="submenu" title="APP_NAME" systemMenu="apple" id="uQy-DD-JDr">
                        <items>
                            <menuItem title="About APP_NAME" id="5kV-Vb-QxS">
                                <modifierMask key="keyEquivalentModifierMask"/>
                                <connections>
                                    <action selector="orderFrontStandardAboutPanel:" target="-1" id="Exp-CZ-Vem"/>
                                </connections>
                            </menuItem>
                            <menuItem isSeparatorItem="YES" id="VOq-y0-SEH"/>
                            <menuItem title="Preferences…" keyEquivalent="," id="BOF-NM-1cW"/>
                            <menuItem isSeparatorItem="YES" id="wFC-TO-SCJ"/>
                            <menuItem title="Services" id="NMo-om-nkz">
                                <modifierMask key="keyEquivalentModifierMask"/>
                                <menu key="submenu" title="Services" systemMenu="services" id="hz9-B4-Xy5"/>
                            </menuItem>
                            <menuItem isSeparatorItem="YES" id="4je-JR-u6R"/>
                            <menuItem title="Hide APP_NAME" keyEquivalent="h" id="Olw-nP-bQN">
                                <connections>
                                    <action selector="hide:" target="-1" id="PnN-Uc-m68"/>
                                </connections>
                            </menuItem>
                            <menuItem title="Hide Others" keyEquivalent="h" id="Vdr-fp-XzO">
                                <modifierMask key="keyEquivalentModifierMask" option="YES" command="YES"/>
                                <connections>
                                    <action selector="hideOtherApplications:" target="-1" id="VT4-aY-XCT"/>
                                </connections>
                            </menuItem>
                            <menuItem title="Show All" id="Kd2-mp-pUS">
                                <modifierMask key="keyEquivalentModifierMask"/>
                                <connections>
                                    <action selector="unhideAllApplications:" target="-1" id="Dhg-Le-xox"/>
                                </connections>
                            </menuItem>
                            <menuItem isSeparatorItem="YES" id="kCx-OE-vgT"/>
                            <menuItem title="Quit APP_NAME" keyEquivalent="q" id="4sb-4s-VLi">
                                <connections>
                                    <action selector="terminate:" target="-1" id="Te7-pn-YzF"/>
                                </connections>
                            </menuItem>
                        </items>
                    </menu>
                </menuItem>
                <menuItem title="Edit" id="5QF-Oa-p0T">
                    <modifierMask key="keyEquivalentModifierMask"/>
                    <menu key="submenu" title="Edit" id="W48-6f-4Dl">
                        <items>
                            <menuItem title="Undo" keyEquivalent="z" id="dRJ-4n-Yzg">
                                <connections>
                                    <action selector="undo:" target="-1" id="M6e-cu-g7V"/>
                                </connections>
                            </menuItem>
                            <menuItem title="Redo" keyEquivalent="Z" id="6dh-zS-Vam">
                                <connections>
                                    <action selector="redo:" target="-1" id="oIA-Rs-6OD"/>
                                </connections>
                            </menuItem>
                            <menuItem isSeparatorItem="YES" id="WRV-NI-Exz"/>
                            <menuItem title="Cut" keyEquivalent="x" id="uRl-iY-unG">
                                <connections>
                                    <action selector="cut:" target="-1" id="YJe-68-I9s"/>
                                </connections>
                            </menuItem>
                            <menuItem title="Copy" keyEquivalent="c" id="x3v-GG-iWU">
                                <connections>
                                    <action selector="copy:" target="-1" id="G1f-GL-Joy"/>
                                </connections>
                            </menuItem>
                            <menuItem title="Paste" keyEquivalent="v" id="gVA-U4-sdL">
                                <connections>
                                    <action selector="paste:" target="-1" id="UvS-8e-Qdg"/>
                                </connections>
                            </menuItem>
                            <menuItem title="Paste and Match Style" keyEquivalent="V" id="WeT-3V-zwk">
                                <modifierMask key="keyEquivalentModifierMask" option="YES" command="YES"/>
                                <connections>
                                    <action selector="pasteAsPlainText:" target="-1" id="cEh-KX-wJQ"/>
                                </connections>
                            </menuItem>
                            <menuItem title="Delete" id="pa3-QI-u2k">
                                <modifierMask key="keyEquivalentModifierMask"/>
                                <connections>
                                    <action selector="delete:" target="-1" id="0Mk-Ml-PaM"/>
                                </connections>
                            </menuItem>
                            <menuItem title="Select All" keyEquivalent="a" id="Ruw-6m-B2m">
                                <connections>
                                    <action selector="selectAll:" target="-1" id="VNm-Mi-diN"/>
                                </connections>
                            </menuItem>
                            <menuItem isSeparatorItem="YES" id="uyl-h8-XO2"/>
                            <menuItem title="Find" id="4EN-yA-p0u">
                                <modifierMask key="keyEquivalentModifierMask"/>
                                <menu key="submenu" title="Find" id="1b7-l0-nxx">
                                    <items>
                                        <menuItem title="Find…" tag="1" keyEquivalent="f" id="Xz5-n4-O0W">
                                            <connections>
                                                <action selector="performFindPanelAction:" target="-1" id="cD7-Qs-BN4"/>
                                            </connections>
                                        </menuItem>
                                        <menuItem title="Find and Replace…" tag="12" keyEquivalent="f" id="YEy-JH-Tfz">
                                            <modifierMask key="keyEquivalentModifierMask" option="YES" command="YES"/>
                                            <connections>
                                                <action selector="performFindPanelAction:" target="-1" id="WD3-Gg-5AJ"/>
                                            </connections>
                                        </menuItem>
                                        <menuItem title="Find Next" tag="2" keyEquivalent="g" id="q09-fT-Sye">
                                            <connections>
                                                <action selector="performFindPanelAction:" target="-1" id="NDo-RZ-v9R"/>
                                            </connections>
                                        </menuItem>
                                        <menuItem title="Find Previous" tag="3" keyEquivalent="G" id="OwM-mh-QMV">
                                            <connections>
                                                <action selector="performFindPanelAction:" target="-1" id="HOh-sY-3ay"/>
                                            </connections>
                                        </menuItem>
                                        <menuItem title="Use Selection for Find" tag="7" keyEquivalent="e" id="buJ-ug-pKt">
                                            <connections>
                                                <action selector="performFindPanelAction:" target="-1" id="U76-nv-p5D"/>
                                            </connections>
                                        </menuItem>
                                        <menuItem title="Jump to Selection" keyEquivalent="j" id="S0p-oC-mLd">
                                            <connections>
                                                <action selector="centerSelectionInVisibleArea:" target="-1" id="IOG-6D-g5B"/>
                                            </connections>
                                        </menuItem>
                                    </items>
                                </menu>
                            </menuItem>
                            <menuItem title="Spelling and Grammar" id="Dv1-io-Yv7">
                                <modifierMask key="keyEquivalentModifierMask"/>
                                <menu key="submenu" title="Spelling" id="3IN-sU-3Bg">
                                    <items>
                                        <menuItem title="Show Spelling and Grammar" keyEquivalent=":" id="HFo-cy-zxI">
                                            <connections>
                                                <action selector="showGuessPanel:" target="-1" id="vFj-Ks-hy3"/>
                                            </connections>
                                        </menuItem>
                                        <menuItem title="Check Document Now" keyEquivalent=";" id="hz2-CU-CR7">
                                            <connections>
                                                <action selector="checkSpelling:" target="-1" id="fz7-VC-reM"/>
                                            </connections>
                                        </menuItem>
                                        <menuItem isSeparatorItem="YES" id="bNw-od-mp5"/>
                                        <menuItem title="Check Spelling While Typing" id="rbD-Rh-wIN">
                                            <modifierMask key="keyEquivalentModifierMask"/>
                                            <connections>
                                                <action selector="toggleContinuousSpellChecking:" target="-1" id="7w6-Qz-0kB"/>
                                            </connections>
                                        </menuItem>
                                        <menuItem title="Check Grammar With Spelling" id="mK6-2p-4JG">
                                            <modifierMask key="keyEquivalentModifierMask"/>
                                            <connections>
                                                <action selector="toggleGrammarChecking:" target="-1" id="muD-Qn-j4w"/>
                                            </connections>
                                        </menuItem>
                                        <menuItem title="Correct Spelling Automatically" id="78Y-hA-62v">
                                            <modifierMask key="keyEquivalentModifierMask"/>
                                            <connections>
                                                <action selector="toggleAutomaticSpellingCorrection:" target="-1" id="2lM-Qi-WAP"/>
                                            </connections>
                                        </menuItem>
                                    </items>
                                </menu>
                            </menuItem>
                            <menuItem title="Substitutions" id="9ic-FL-obx">
                                <modifierMask key="keyEquivalentModifierMask"/>
                                <menu key="submenu" title="Substitutions" id="FeM-D8-WVr">
                                    <items>
                                        <menuItem title="Show Substitutions" id="z6F-FW-3nz">
                                            <modifierMask key="keyEquivalentModifierMask"/>
                                            <connections>
                                                <action selector="orderFrontSubstitutionsPanel:" target="-1" id="oku-mr-iSq"/>
                                            </connections>
                                        </menuItem>
                                        <menuItem isSeparatorItem="YES" id="gPx-C9-uUO"/>
                                        <menuItem title="Smart Copy/Paste" id="9yt-4B-nSM">
                                            <modifierMask key="keyEquivalentModifierMask"/>
                                            <connections>
                                                <action selector="toggleSmartInsertDelete:" target="-1" id="3IJ-Se-DZD"/>
                                            </connections>
                                        </menuItem>
                                        <menuItem title="Smart Quotes" id="hQb-2v-fYv">
                                            <modifierMask key="keyEquivalentModifierMask"/>
                                            <connections>
                                                <action selector="toggleAutomaticQuoteSubstitution:" target="-1" id="ptq-xd-QOA"/>
                                            </connections>
                                        </menuItem>
                                        <menuItem title="Smart Dashes" id="rgM-f4-ycn">
                                            <modifierMask key="keyEquivalentModifierMask"/>
                                            <connections>
                                                <action selector="toggleAutomaticDashSubstitution:" target="-1" id="oCt-pO-9gS"/>
                                            </connections>
                                        </menuItem>
                                        <menuItem title="Smart Links" id="cwL-P1-jid">
                                            <modifierMask key="keyEquivalentModifierMask"/>
                                            <connections>
                                                <action selector="toggleAutomaticLinkDetection:" target="-1" id="Gip-E3-Fov"/>
                                            </connections>
                                        </menuItem>
                                        <menuItem title="Data Detectors" id="tRr-pd-1PS">
                                            <modifierMask key="keyEquivalentModifierMask"/>
                                            <connections>
                                                <action selector="toggleAutomaticDataDetection:" target="-1" id="R1I-Nq-Kbl"/>
                                            </connections>
                                        </menuItem>
                                        <menuItem title="Text Replacement" id="HFQ-gK-NFA">
                                            <modifierMask key="keyEquivalentModifierMask"/>
                                            <connections>
                                                <action selector="toggleAutomaticTextReplacement:" target="-1" id="DvP-Fe-Py6"/>
                                            </connections>
                                        </menuItem>
                                    </items>
                                </menu>
                            </menuItem>
                            <menuItem title="Transformations" id="2oI-Rn-ZJC">
                                <modifierMask key="keyEquivalentModifierMask"/>
                                <menu key="submenu" title="Transformations" id="c8a-y6-VQd">
                                    <items>
                                        <menuItem title="Make Upper Case" id="vmV-6d-7jI">
                                            <modifierMask key="keyEquivalentModifierMask"/>
                                            <connections>
                                                <action selector="uppercaseWord:" target="-1" id="sPh-Tk-edu"/>
                                            </connections>
                                        </menuItem>
                                        <menuItem title="Make Lower Case" id="d9M-CD-aMd">
                                            <modifierMask key="keyEquivalentModifierMask"/>
                                            <connections>
                                                <action selector="lowercaseWord:" target="-1" id="iUZ-b5-hil"/>
                                            </connections>
                                        </menuItem>
                                        <menuItem title="Capitalize" id="UEZ-Bs-lqG">
                                            <modifierMask key="keyEquivalentModifierMask"/>
                                            <connections>
                                                <action selector="capitalizeWord:" target="-1" id="26H-TL-nsh"/>
                                            </connections>
                                        </menuItem>
                                    </items>
                                </menu>
                            </menuItem>
                            <menuItem title="Speech" id="xrE-MZ-jX0">
                                <modifierMask key="keyEquivalentModifierMask"/>
                                <menu key="submenu" title="Speech" id="3rS-ZA-NoH">
                                    <items>
                                        <menuItem title="Start Speaking" id="Ynk-f8-cLZ">
                                            <modifierMask key="keyEquivalentModifierMask"/>
                                            <connections>
                                                <action selector="startSpeaking:" target="-1" id="654-Ng-kyl"/>
                                            </connections>
                                        </menuItem>
                                        <menuItem title="Stop Speaking" id="Oyz-dy-DGm">
                                            <modifierMask key="keyEquivalentModifierMask"/>
                                            <connections>
                                                <action selector="stopSpeaking:" target="-1" id="dX8-6p-jy9"/>
                                            </connections>
                                        </menuItem>
                                    </items>
                                </menu>
                            </menuItem>
                        </items>
                    </menu>
                </menuItem>
                <menuItem title="View" id="H8h-7b-M4v">
                    <modifierMask key="keyEquivalentModifierMask"/>
                    <menu key="submenu" title="View" id="HyV-fh-RgO">
                        <items>
                            <menuItem title="Enter Full Screen" keyEquivalent="f" id="4J7-dP-txa">
                                <modifierMask key="keyEquivalentModifierMask" control="YES" command="YES"/>
                                <connections>
                                    <action selector="toggleFullScreen:" target="-1" id="dU3-MA-1Rq"/>
                                </connections>
                            </menuItem>
                        </items>
                    </menu>
                </menuItem>
                <menuItem title="Window" id="aUF-d1-5bR">
                    <modifierMask key="keyEquivalentModifierMask"/>
                    <menu key="submenu" title="Window" systemMenu="window" id="Td7-aD-5lo">
                        <items>
                            <menuItem title="Minimize" keyEquivalent="m" id="OY7-WF-poV">
                                <connections>
                                    <action selector="performMiniaturize:" target="-1" id="VwT-WD-YPe"/>
                                </connections>
                            </menuItem>
                            <menuItem title="Zoom" id="R4o-n2-Eq4">
                                <modifierMask key="keyEquivalentModifierMask"/>
                                <connections>
                                    <action selector="performZoom:" target="-1" id="DIl-cC-cCs"/>
                                </connections>
                            </menuItem>
                            <menuItem isSeparatorItem="YES" id="eu3-7i-yIM"/>
                            <menuItem title="Bring All to Front" id="LE2-aR-0XJ">
                                <modifierMask key="keyEquivalentModifierMask"/>
                                <connections>
                                    <action selector="arrangeInFront:" target="-1" id="DRN-fu-gQh"/>
                                </connections>
                            </menuItem>
                        </items>
                    </menu>
                </menuItem>
                <menuItem title="Help" id="EPT-qC-fAb">
                    <modifierMask key="keyEquivalentModifierMask"/>
                    <menu key="submenu" title="Help" systemMenu="help" id="rJ0-wn-3NY"/>
                </menuItem>
            </items>
            <point key="canvasLocation" x="142" y="-258"/>
        </menu>
        <window title="APP_NAME" allowsToolTipsWhenApplicationIsInactive="NO" autorecalculatesKeyViewLoop="NO" releasedWhenClosed="NO" animationBehavior="default" id="QvC-M9-y7g" customClass="MainFlutterWindow" customModule="Runner" customModuleProvider="target">
            <windowStyleMask key="styleMask" titled="YES" closable="YES" miniaturizable="YES" resizable="YES"/>
            <rect key="contentRect" x="335" y="390" width="800" height="600"/>
            <rect key="screenRect" x="0.0" y="0.0" width="2560" height="1577"/>
            <view key="contentView" wantsLayer="YES" id="EiT-Mj-1SZ">
                <rect key="frame" x="0.0" y="0.0" width="800" height="600"/>
                <autoresizingMask key="autoresizingMask"/>
            </view>
        </window>
    </objects>
</document>


// File: macos\Runner\Configs\AppInfo.xcconfig
----------------------------------------
// Application-level settings for the Runner target.
//
// This may be replaced with something auto-generated from metadata (e.g., pubspec.yaml) in the
// future. If not, the values below would default to using the project name when this becomes a
// 'flutter create' template.

// The application's name. By default this is also the title of the Flutter window.
PRODUCT_NAME = audio_melodia_flutter

// The application's bundle identifier
PRODUCT_BUNDLE_IDENTIFIER = com.melodia.audioMelodiaFlutter

// The copyright displayed in application information
PRODUCT_COPYRIGHT = Copyright © 2025 com.melodia. All rights reserved.


// File: macos\Runner\Configs\Debug.xcconfig
----------------------------------------
#include "../../Flutter/Flutter-Debug.xcconfig"
#include "Warnings.xcconfig"


// File: macos\Runner\Configs\Release.xcconfig
----------------------------------------
#include "../../Flutter/Flutter-Release.xcconfig"
#include "Warnings.xcconfig"


// File: macos\Runner\Configs\Warnings.xcconfig
----------------------------------------
WARNING_CFLAGS = -Wall -Wconditional-uninitialized -Wnullable-to-nonnull-conversion -Wmissing-method-return-type -Woverlength-strings
GCC_WARN_UNDECLARED_SELECTOR = YES
CLANG_UNDEFINED_BEHAVIOR_SANITIZER_NULLABILITY = YES
CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE
CLANG_WARN__DUPLICATE_METHOD_MATCH = YES
CLANG_WARN_PRAGMA_PACK = YES
CLANG_WARN_STRICT_PROTOTYPES = YES
CLANG_WARN_COMMA = YES
GCC_WARN_STRICT_SELECTOR_MATCH = YES
CLANG_WARN_OBJC_REPEATED_USE_OF_WEAK = YES
CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES
GCC_WARN_SHADOW = YES
CLANG_WARN_UNREACHABLE_CODE = YES


// File: macos\Runner\DebugProfile.entitlements
----------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>com.apple.security.app-sandbox</key>
	<true/>
	<key>com.apple.security.cs.allow-jit</key>
	<true/>
	<key>com.apple.security.network.server</key>
	<true/>
</dict>
</plist>


// File: macos\Runner\Info.plist
----------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>CFBundleDevelopmentRegion</key>
	<string>$(DEVELOPMENT_LANGUAGE)</string>
	<key>CFBundleExecutable</key>
	<string>$(EXECUTABLE_NAME)</string>
	<key>CFBundleIconFile</key>
	<string></string>
	<key>CFBundleIdentifier</key>
	<string>$(PRODUCT_BUNDLE_IDENTIFIER)</string>
	<key>CFBundleInfoDictionaryVersion</key>
	<string>6.0</string>
	<key>CFBundleName</key>
	<string>$(PRODUCT_NAME)</string>
	<key>CFBundlePackageType</key>
	<string>APPL</string>
	<key>CFBundleShortVersionString</key>
	<string>$(FLUTTER_BUILD_NAME)</string>
	<key>CFBundleVersion</key>
	<string>$(FLUTTER_BUILD_NUMBER)</string>
	<key>LSMinimumSystemVersion</key>
	<string>$(MACOSX_DEPLOYMENT_TARGET)</string>
	<key>NSHumanReadableCopyright</key>
	<string>$(PRODUCT_COPYRIGHT)</string>
	<key>NSMainNibFile</key>
	<string>MainMenu</string>
	<key>NSPrincipalClass</key>
	<string>NSApplication</string>
</dict>
</plist>


// File: macos\Runner\MainFlutterWindow.swift
----------------------------------------
import Cocoa
import FlutterMacOS

class MainFlutterWindow: NSWindow {
  override func awakeFromNib() {
    let flutterViewController = FlutterViewController()
    let windowFrame = self.frame
    self.contentViewController = flutterViewController
    self.setFrame(windowFrame, display: true)

    RegisterGeneratedPlugins(registry: flutterViewController)

    super.awakeFromNib()
  }
}


// File: macos\Runner\Release.entitlements
----------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>com.apple.security.app-sandbox</key>
	<true/>
</dict>
</plist>


// File: macos\Runner.xcodeproj\project.pbxproj
----------------------------------------
// !$*UTF8*$!
{
	archiveVersion = 1;
	classes = {
	};
	objectVersion = 54;
	objects = {

/* Begin PBXAggregateTarget section */
		33CC111A2044C6BA0003C045 /* Flutter Assemble */ = {
			isa = PBXAggregateTarget;
			buildConfigurationList = 33CC111B2044C6BA0003C045 /* Build configuration list for PBXAggregateTarget "Flutter Assemble" */;
			buildPhases = (
				33CC111E2044C6BF0003C045 /* ShellScript */,
			);
			dependencies = (
			);
			name = "Flutter Assemble";
			productName = FLX;
		};
/* End PBXAggregateTarget section */

/* Begin PBXBuildFile section */
		331C80D8294CF71000263BE5 /* RunnerTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 331C80D7294CF71000263BE5 /* RunnerTests.swift */; };
		335BBD1B22A9A15E00E9071D /* GeneratedPluginRegistrant.swift in Sources */ = {isa = PBXBuildFile; fileRef = 335BBD1A22A9A15E00E9071D /* GeneratedPluginRegistrant.swift */; };
		33CC10F12044A3C60003C045 /* AppDelegate.swift in Sources */ = {isa = PBXBuildFile; fileRef = 33CC10F02044A3C60003C045 /* AppDelegate.swift */; };
		33CC10F32044A3C60003C045 /* Assets.xcassets in Resources */ = {isa = PBXBuildFile; fileRef = 33CC10F22044A3C60003C045 /* Assets.xcassets */; };
		33CC10F62044A3C60003C045 /* MainMenu.xib in Resources */ = {isa = PBXBuildFile; fileRef = 33CC10F42044A3C60003C045 /* MainMenu.xib */; };
		33CC11132044BFA00003C045 /* MainFlutterWindow.swift in Sources */ = {isa = PBXBuildFile; fileRef = 33CC11122044BFA00003C045 /* MainFlutterWindow.swift */; };
/* End PBXBuildFile section */

/* Begin PBXContainerItemProxy section */
		331C80D9294CF71000263BE5 /* PBXContainerItemProxy */ = {
			isa = PBXContainerItemProxy;
			containerPortal = 33CC10E52044A3C60003C045 /* Project object */;
			proxyType = 1;
			remoteGlobalIDString = 33CC10EC2044A3C60003C045;
			remoteInfo = Runner;
		};
		33CC111F2044C79F0003C045 /* PBXContainerItemProxy */ = {
			isa = PBXContainerItemProxy;
			containerPortal = 33CC10E52044A3C60003C045 /* Project object */;
			proxyType = 1;
			remoteGlobalIDString = 33CC111A2044C6BA0003C045;
			remoteInfo = FLX;
		};
/* End PBXContainerItemProxy section */

/* Begin PBXCopyFilesBuildPhase section */
		33CC110E2044A8840003C045 /* Bundle Framework */ = {
			isa = PBXCopyFilesBuildPhase;
			buildActionMask = 2147483647;
			dstPath = "";
			dstSubfolderSpec = 10;
			files = (
			);
			name = "Bundle Framework";
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXCopyFilesBuildPhase section */

/* Begin PBXFileReference section */
		331C80D5294CF71000263BE5 /* RunnerTests.xctest */ = {isa = PBXFileReference; explicitFileType = wrapper.cfbundle; includeInIndex = 0; path = RunnerTests.xctest; sourceTree = BUILT_PRODUCTS_DIR; };
		331C80D7294CF71000263BE5 /* RunnerTests.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = RunnerTests.swift; sourceTree = "<group>"; };
		333000ED22D3DE5D00554162 /* Warnings.xcconfig */ = {isa = PBXFileReference; lastKnownFileType = text.xcconfig; path = Warnings.xcconfig; sourceTree = "<group>"; };
		335BBD1A22A9A15E00E9071D /* GeneratedPluginRegistrant.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = GeneratedPluginRegistrant.swift; sourceTree = "<group>"; };
		33CC10ED2044A3C60003C045 /* audio_melodia_flutter.app */ = {isa = PBXFileReference; explicitFileType = wrapper.application; includeInIndex = 0; path = "audio_melodia_flutter.app"; sourceTree = BUILT_PRODUCTS_DIR; };
		33CC10F02044A3C60003C045 /* AppDelegate.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = AppDelegate.swift; sourceTree = "<group>"; };
		33CC10F22044A3C60003C045 /* Assets.xcassets */ = {isa = PBXFileReference; lastKnownFileType = folder.assetcatalog; name = Assets.xcassets; path = Runner/Assets.xcassets; sourceTree = "<group>"; };
		33CC10F52044A3C60003C045 /* Base */ = {isa = PBXFileReference; lastKnownFileType = file.xib; name = Base; path = Base.lproj/MainMenu.xib; sourceTree = "<group>"; };
		33CC10F72044A3C60003C045 /* Info.plist */ = {isa = PBXFileReference; lastKnownFileType = text.plist.xml; name = Info.plist; path = Runner/Info.plist; sourceTree = "<group>"; };
		33CC11122044BFA00003C045 /* MainFlutterWindow.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = MainFlutterWindow.swift; sourceTree = "<group>"; };
		33CEB47222A05771004F2AC0 /* Flutter-Debug.xcconfig */ = {isa = PBXFileReference; lastKnownFileType = text.xcconfig; path = "Flutter-Debug.xcconfig"; sourceTree = "<group>"; };
		33CEB47422A05771004F2AC0 /* Flutter-Release.xcconfig */ = {isa = PBXFileReference; lastKnownFileType = text.xcconfig; path = "Flutter-Release.xcconfig"; sourceTree = "<group>"; };
		33CEB47722A0578A004F2AC0 /* Flutter-Generated.xcconfig */ = {isa = PBXFileReference; lastKnownFileType = text.xcconfig; name = "Flutter-Generated.xcconfig"; path = "ephemeral/Flutter-Generated.xcconfig"; sourceTree = "<group>"; };
		33E51913231747F40026EE4D /* DebugProfile.entitlements */ = {isa = PBXFileReference; lastKnownFileType = text.plist.entitlements; path = DebugProfile.entitlements; sourceTree = "<group>"; };
		33E51914231749380026EE4D /* Release.entitlements */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.plist.entitlements; path = Release.entitlements; sourceTree = "<group>"; };
		33E5194F232828860026EE4D /* AppInfo.xcconfig */ = {isa = PBXFileReference; lastKnownFileType = text.xcconfig; path = AppInfo.xcconfig; sourceTree = "<group>"; };
		7AFA3C8E1D35360C0083082E /* Release.xcconfig */ = {isa = PBXFileReference; lastKnownFileType = text.xcconfig; path = Release.xcconfig; sourceTree = "<group>"; };
		9740EEB21CF90195004384FC /* Debug.xcconfig */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.xcconfig; path = Debug.xcconfig; sourceTree = "<group>"; };
/* End PBXFileReference section */

/* Begin PBXFrameworksBuildPhase section */
		331C80D2294CF70F00263BE5 /* Frameworks */ = {
			isa = PBXFrameworksBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		33CC10EA2044A3C60003C045 /* Frameworks */ = {
			isa = PBXFrameworksBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXFrameworksBuildPhase section */

/* Begin PBXGroup section */
		331C80D6294CF71000263BE5 /* RunnerTests */ = {
			isa = PBXGroup;
			children = (
				331C80D7294CF71000263BE5 /* RunnerTests.swift */,
			);
			path = RunnerTests;
			sourceTree = "<group>";
		};
		33BA886A226E78AF003329D5 /* Configs */ = {
			isa = PBXGroup;
			children = (
				33E5194F232828860026EE4D /* AppInfo.xcconfig */,
				9740EEB21CF90195004384FC /* Debug.xcconfig */,
				7AFA3C8E1D35360C0083082E /* Release.xcconfig */,
				333000ED22D3DE5D00554162 /* Warnings.xcconfig */,
			);
			path = Configs;
			sourceTree = "<group>";
		};
		33CC10E42044A3C60003C045 = {
			isa = PBXGroup;
			children = (
				33FAB671232836740065AC1E /* Runner */,
				33CEB47122A05771004F2AC0 /* Flutter */,
				331C80D6294CF71000263BE5 /* RunnerTests */,
				33CC10EE2044A3C60003C045 /* Products */,
				D73912EC22F37F3D000D13A0 /* Frameworks */,
			);
			sourceTree = "<group>";
		};
		33CC10EE2044A3C60003C045 /* Products */ = {
			isa = PBXGroup;
			children = (
				33CC10ED2044A3C60003C045 /* audio_melodia_flutter.app */,
				331C80D5294CF71000263BE5 /* RunnerTests.xctest */,
			);
			name = Products;
			sourceTree = "<group>";
		};
		33CC11242044D66E0003C045 /* Resources */ = {
			isa = PBXGroup;
			children = (
				33CC10F22044A3C60003C045 /* Assets.xcassets */,
				33CC10F42044A3C60003C045 /* MainMenu.xib */,
				33CC10F72044A3C60003C045 /* Info.plist */,
			);
			name = Resources;
			path = ..;
			sourceTree = "<group>";
		};
		33CEB47122A05771004F2AC0 /* Flutter */ = {
			isa = PBXGroup;
			children = (
				335BBD1A22A9A15E00E9071D /* GeneratedPluginRegistrant.swift */,
				33CEB47222A05771004F2AC0 /* Flutter-Debug.xcconfig */,
				33CEB47422A05771004F2AC0 /* Flutter-Release.xcconfig */,
				33CEB47722A0578A004F2AC0 /* Flutter-Generated.xcconfig */,
			);
			path = Flutter;
			sourceTree = "<group>";
		};
		33FAB671232836740065AC1E /* Runner */ = {
			isa = PBXGroup;
			children = (
				33CC10F02044A3C60003C045 /* AppDelegate.swift */,
				33CC11122044BFA00003C045 /* MainFlutterWindow.swift */,
				33E51913231747F40026EE4D /* DebugProfile.entitlements */,
				33E51914231749380026EE4D /* Release.entitlements */,
				33CC11242044D66E0003C045 /* Resources */,
				33BA886A226E78AF003329D5 /* Configs */,
			);
			path = Runner;
			sourceTree = "<group>";
		};
		D73912EC22F37F3D000D13A0 /* Frameworks */ = {
			isa = PBXGroup;
			children = (
			);
			name = Frameworks;
			sourceTree = "<group>";
		};
/* End PBXGroup section */

/* Begin PBXNativeTarget section */
		331C80D4294CF70F00263BE5 /* RunnerTests */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = 331C80DE294CF71000263BE5 /* Build configuration list for PBXNativeTarget "RunnerTests" */;
			buildPhases = (
				331C80D1294CF70F00263BE5 /* Sources */,
				331C80D2294CF70F00263BE5 /* Frameworks */,
				331C80D3294CF70F00263BE5 /* Resources */,
			);
			buildRules = (
			);
			dependencies = (
				331C80DA294CF71000263BE5 /* PBXTargetDependency */,
			);
			name = RunnerTests;
			productName = RunnerTests;
			productReference = 331C80D5294CF71000263BE5 /* RunnerTests.xctest */;
			productType = "com.apple.product-type.bundle.unit-test";
		};
		33CC10EC2044A3C60003C045 /* Runner */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = 33CC10FB2044A3C60003C045 /* Build configuration list for PBXNativeTarget "Runner" */;
			buildPhases = (
				33CC10E92044A3C60003C045 /* Sources */,
				33CC10EA2044A3C60003C045 /* Frameworks */,
				33CC10EB2044A3C60003C045 /* Resources */,
				33CC110E2044A8840003C045 /* Bundle Framework */,
				3399D490228B24CF009A79C7 /* ShellScript */,
			);
			buildRules = (
			);
			dependencies = (
				33CC11202044C79F0003C045 /* PBXTargetDependency */,
			);
			name = Runner;
			productName = Runner;
			productReference = 33CC10ED2044A3C60003C045 /* audio_melodia_flutter.app */;
			productType = "com.apple.product-type.application";
		};
/* End PBXNativeTarget section */

/* Begin PBXProject section */
		33CC10E52044A3C60003C045 /* Project object */ = {
			isa = PBXProject;
			attributes = {
				BuildIndependentTargetsInParallel = YES;
				LastSwiftUpdateCheck = 0920;
				LastUpgradeCheck = 1510;
				ORGANIZATIONNAME = "";
				TargetAttributes = {
					331C80D4294CF70F00263BE5 = {
						CreatedOnToolsVersion = 14.0;
						TestTargetID = 33CC10EC2044A3C60003C045;
					};
					33CC10EC2044A3C60003C045 = {
						CreatedOnToolsVersion = 9.2;
						LastSwiftMigration = 1100;
						ProvisioningStyle = Automatic;
						SystemCapabilities = {
							com.apple.Sandbox = {
								enabled = 1;
							};
						};
					};
					33CC111A2044C6BA0003C045 = {
						CreatedOnToolsVersion = 9.2;
						ProvisioningStyle = Manual;
					};
				};
			};
			buildConfigurationList = 33CC10E82044A3C60003C045 /* Build configuration list for PBXProject "Runner" */;
			compatibilityVersion = "Xcode 9.3";
			developmentRegion = en;
			hasScannedForEncodings = 0;
			knownRegions = (
				en,
				Base,
			);
			mainGroup = 33CC10E42044A3C60003C045;
			productRefGroup = 33CC10EE2044A3C60003C045 /* Products */;
			projectDirPath = "";
			projectRoot = "";
			targets = (
				33CC10EC2044A3C60003C045 /* Runner */,
				331C80D4294CF70F00263BE5 /* RunnerTests */,
				33CC111A2044C6BA0003C045 /* Flutter Assemble */,
			);
		};
/* End PBXProject section */

/* Begin PBXResourcesBuildPhase section */
		331C80D3294CF70F00263BE5 /* Resources */ = {
			isa = PBXResourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		33CC10EB2044A3C60003C045 /* Resources */ = {
			isa = PBXResourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				33CC10F32044A3C60003C045 /* Assets.xcassets in Resources */,
				33CC10F62044A3C60003C045 /* MainMenu.xib in Resources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXResourcesBuildPhase section */

/* Begin PBXShellScriptBuildPhase section */
		3399D490228B24CF009A79C7 /* ShellScript */ = {
			isa = PBXShellScriptBuildPhase;
			alwaysOutOfDate = 1;
			buildActionMask = 2147483647;
			files = (
			);
			inputFileListPaths = (
			);
			inputPaths = (
			);
			outputFileListPaths = (
			);
			outputPaths = (
			);
			runOnlyForDeploymentPostprocessing = 0;
			shellPath = /bin/sh;
			shellScript = "echo \"$PRODUCT_NAME.app\" > \"$PROJECT_DIR\"/Flutter/ephemeral/.app_filename && \"$FLUTTER_ROOT\"/packages/flutter_tools/bin/macos_assemble.sh embed\n";
		};
		33CC111E2044C6BF0003C045 /* ShellScript */ = {
			isa = PBXShellScriptBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			inputFileListPaths = (
				Flutter/ephemeral/FlutterInputs.xcfilelist,
			);
			inputPaths = (
				Flutter/ephemeral/tripwire,
			);
			outputFileListPaths = (
				Flutter/ephemeral/FlutterOutputs.xcfilelist,
			);
			outputPaths = (
			);
			runOnlyForDeploymentPostprocessing = 0;
			shellPath = /bin/sh;
			shellScript = "\"$FLUTTER_ROOT\"/packages/flutter_tools/bin/macos_assemble.sh && touch Flutter/ephemeral/tripwire";
		};
/* End PBXShellScriptBuildPhase section */

/* Begin PBXSourcesBuildPhase section */
		331C80D1294CF70F00263BE5 /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				331C80D8294CF71000263BE5 /* RunnerTests.swift in Sources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		33CC10E92044A3C60003C045 /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				33CC11132044BFA00003C045 /* MainFlutterWindow.swift in Sources */,
				33CC10F12044A3C60003C045 /* AppDelegate.swift in Sources */,
				335BBD1B22A9A15E00E9071D /* GeneratedPluginRegistrant.swift in Sources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXSourcesBuildPhase section */

/* Begin PBXTargetDependency section */
		331C80DA294CF71000263BE5 /* PBXTargetDependency */ = {
			isa = PBXTargetDependency;
			target = 33CC10EC2044A3C60003C045 /* Runner */;
			targetProxy = 331C80D9294CF71000263BE5 /* PBXContainerItemProxy */;
		};
		33CC11202044C79F0003C045 /* PBXTargetDependency */ = {
			isa = PBXTargetDependency;
			target = 33CC111A2044C6BA0003C045 /* Flutter Assemble */;
			targetProxy = 33CC111F2044C79F0003C045 /* PBXContainerItemProxy */;
		};
/* End PBXTargetDependency section */

/* Begin PBXVariantGroup section */
		33CC10F42044A3C60003C045 /* MainMenu.xib */ = {
			isa = PBXVariantGroup;
			children = (
				33CC10F52044A3C60003C045 /* Base */,
			);
			name = MainMenu.xib;
			path = Runner;
			sourceTree = "<group>";
		};
/* End PBXVariantGroup section */

/* Begin XCBuildConfiguration section */
		331C80DB294CF71000263BE5 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				BUNDLE_LOADER = "$(TEST_HOST)";
				CURRENT_PROJECT_VERSION = 1;
				GENERATE_INFOPLIST_FILE = YES;
				MARKETING_VERSION = 1.0;
				PRODUCT_BUNDLE_IDENTIFIER = com.melodia.audioMelodiaFlutter.RunnerTests;
				PRODUCT_NAME = "$(TARGET_NAME)";
				SWIFT_VERSION = 5.0;
				TEST_HOST = "$(BUILT_PRODUCTS_DIR)/audio_melodia_flutter.app/$(BUNDLE_EXECUTABLE_FOLDER_PATH)/audio_melodia_flutter";
			};
			name = Debug;
		};
		331C80DC294CF71000263BE5 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				BUNDLE_LOADER = "$(TEST_HOST)";
				CURRENT_PROJECT_VERSION = 1;
				GENERATE_INFOPLIST_FILE = YES;
				MARKETING_VERSION = 1.0;
				PRODUCT_BUNDLE_IDENTIFIER = com.melodia.audioMelodiaFlutter.RunnerTests;
				PRODUCT_NAME = "$(TARGET_NAME)";
				SWIFT_VERSION = 5.0;
				TEST_HOST = "$(BUILT_PRODUCTS_DIR)/audio_melodia_flutter.app/$(BUNDLE_EXECUTABLE_FOLDER_PATH)/audio_melodia_flutter";
			};
			name = Release;
		};
		331C80DD294CF71000263BE5 /* Profile */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				BUNDLE_LOADER = "$(TEST_HOST)";
				CURRENT_PROJECT_VERSION = 1;
				GENERATE_INFOPLIST_FILE = YES;
				MARKETING_VERSION = 1.0;
				PRODUCT_BUNDLE_IDENTIFIER = com.melodia.audioMelodiaFlutter.RunnerTests;
				PRODUCT_NAME = "$(TARGET_NAME)";
				SWIFT_VERSION = 5.0;
				TEST_HOST = "$(BUILT_PRODUCTS_DIR)/audio_melodia_flutter.app/$(BUNDLE_EXECUTABLE_FOLDER_PATH)/audio_melodia_flutter";
			};
			name = Profile;
		};
		338D0CE9231458BD00FA5F75 /* Profile */ = {
			isa = XCBuildConfiguration;
			baseConfigurationReference = 7AFA3C8E1D35360C0083082E /* Release.xcconfig */;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				ASSETCATALOG_COMPILER_GENERATE_SWIFT_ASSET_SYMBOL_EXTENSIONS = YES;
				CLANG_ANALYZER_NONNULL = YES;
				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++14";
				CLANG_CXX_LIBRARY = "libc++";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CODE_SIGN_IDENTITY = "-";
				COPY_PHASE_STRIP = NO;
				DEAD_CODE_STRIPPING = YES;
				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
				ENABLE_NS_ASSERTIONS = NO;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				ENABLE_USER_SCRIPT_SANDBOXING = NO;
				GCC_C_LANGUAGE_STANDARD = gnu11;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				MACOSX_DEPLOYMENT_TARGET = 10.14;
				MTL_ENABLE_DEBUG_INFO = NO;
				SDKROOT = macosx;
				SWIFT_COMPILATION_MODE = wholemodule;
				SWIFT_OPTIMIZATION_LEVEL = "-O";
			};
			name = Profile;
		};
		338D0CEA231458BD00FA5F75 /* Profile */ = {
			isa = XCBuildConfiguration;
			baseConfigurationReference = 33E5194F232828860026EE4D /* AppInfo.xcconfig */;
			buildSettings = {
				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
				CLANG_ENABLE_MODULES = YES;
				CODE_SIGN_ENTITLEMENTS = Runner/DebugProfile.entitlements;
				CODE_SIGN_STYLE = Automatic;
				COMBINE_HIDPI_IMAGES = YES;
				INFOPLIST_FILE = Runner/Info.plist;
				LD_RUNPATH_SEARCH_PATHS = (
					"$(inherited)",
					"@executable_path/../Frameworks",
				);
				PROVISIONING_PROFILE_SPECIFIER = "";
				SWIFT_VERSION = 5.0;
			};
			name = Profile;
		};
		338D0CEB231458BD00FA5F75 /* Profile */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				CODE_SIGN_STYLE = Manual;
				PRODUCT_NAME = "$(TARGET_NAME)";
			};
			name = Profile;
		};
		33CC10F92044A3C60003C045 /* Debug */ = {
			isa = XCBuildConfiguration;
			baseConfigurationReference = 9740EEB21CF90195004384FC /* Debug.xcconfig */;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				ASSETCATALOG_COMPILER_GENERATE_SWIFT_ASSET_SYMBOL_EXTENSIONS = YES;
				CLANG_ANALYZER_NONNULL = YES;
				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++14";
				CLANG_CXX_LIBRARY = "libc++";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CODE_SIGN_IDENTITY = "-";
				COPY_PHASE_STRIP = NO;
				DEAD_CODE_STRIPPING = YES;
				DEBUG_INFORMATION_FORMAT = dwarf;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				ENABLE_TESTABILITY = YES;
				ENABLE_USER_SCRIPT_SANDBOXING = NO;
				GCC_C_LANGUAGE_STANDARD = gnu11;
				GCC_DYNAMIC_NO_PIC = NO;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_OPTIMIZATION_LEVEL = 0;
				GCC_PREPROCESSOR_DEFINITIONS = (
					"DEBUG=1",
					"$(inherited)",
				);
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				MACOSX_DEPLOYMENT_TARGET = 10.14;
				MTL_ENABLE_DEBUG_INFO = YES;
				ONLY_ACTIVE_ARCH = YES;
				SDKROOT = macosx;
				SWIFT_ACTIVE_COMPILATION_CONDITIONS = DEBUG;
				SWIFT_OPTIMIZATION_LEVEL = "-Onone";
			};
			name = Debug;
		};
		33CC10FA2044A3C60003C045 /* Release */ = {
			isa = XCBuildConfiguration;
			baseConfigurationReference = 7AFA3C8E1D35360C0083082E /* Release.xcconfig */;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				ASSETCATALOG_COMPILER_GENERATE_SWIFT_ASSET_SYMBOL_EXTENSIONS = YES;
				CLANG_ANALYZER_NONNULL = YES;
				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++14";
				CLANG_CXX_LIBRARY = "libc++";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CODE_SIGN_IDENTITY = "-";
				COPY_PHASE_STRIP = NO;
				DEAD_CODE_STRIPPING = YES;
				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
				ENABLE_NS_ASSERTIONS = NO;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				ENABLE_USER_SCRIPT_SANDBOXING = NO;
				GCC_C_LANGUAGE_STANDARD = gnu11;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				MACOSX_DEPLOYMENT_TARGET = 10.14;
				MTL_ENABLE_DEBUG_INFO = NO;
				SDKROOT = macosx;
				SWIFT_COMPILATION_MODE = wholemodule;
				SWIFT_OPTIMIZATION_LEVEL = "-O";
			};
			name = Release;
		};
		33CC10FC2044A3C60003C045 /* Debug */ = {
			isa = XCBuildConfiguration;
			baseConfigurationReference = 33E5194F232828860026EE4D /* AppInfo.xcconfig */;
			buildSettings = {
				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
				CLANG_ENABLE_MODULES = YES;
				CODE_SIGN_ENTITLEMENTS = Runner/DebugProfile.entitlements;
				CODE_SIGN_STYLE = Automatic;
				COMBINE_HIDPI_IMAGES = YES;
				INFOPLIST_FILE = Runner/Info.plist;
				LD_RUNPATH_SEARCH_PATHS = (
					"$(inherited)",
					"@executable_path/../Frameworks",
				);
				PROVISIONING_PROFILE_SPECIFIER = "";
				SWIFT_OPTIMIZATION_LEVEL = "-Onone";
				SWIFT_VERSION = 5.0;
			};
			name = Debug;
		};
		33CC10FD2044A3C60003C045 /* Release */ = {
			isa = XCBuildConfiguration;
			baseConfigurationReference = 33E5194F232828860026EE4D /* AppInfo.xcconfig */;
			buildSettings = {
				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
				CLANG_ENABLE_MODULES = YES;
				CODE_SIGN_ENTITLEMENTS = Runner/Release.entitlements;
				CODE_SIGN_STYLE = Automatic;
				COMBINE_HIDPI_IMAGES = YES;
				INFOPLIST_FILE = Runner/Info.plist;
				LD_RUNPATH_SEARCH_PATHS = (
					"$(inherited)",
					"@executable_path/../Frameworks",
				);
				PROVISIONING_PROFILE_SPECIFIER = "";
				SWIFT_VERSION = 5.0;
			};
			name = Release;
		};
		33CC111C2044C6BA0003C045 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				CODE_SIGN_STYLE = Manual;
				PRODUCT_NAME = "$(TARGET_NAME)";
			};
			name = Debug;
		};
		33CC111D2044C6BA0003C045 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				CODE_SIGN_STYLE = Automatic;
				PRODUCT_NAME = "$(TARGET_NAME)";
			};
			name = Release;
		};
/* End XCBuildConfiguration section */

/* Begin XCConfigurationList section */
		331C80DE294CF71000263BE5 /* Build configuration list for PBXNativeTarget "RunnerTests" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				331C80DB294CF71000263BE5 /* Debug */,
				331C80DC294CF71000263BE5 /* Release */,
				331C80DD294CF71000263BE5 /* Profile */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		33CC10E82044A3C60003C045 /* Build configuration list for PBXProject "Runner" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				33CC10F92044A3C60003C045 /* Debug */,
				33CC10FA2044A3C60003C045 /* Release */,
				338D0CE9231458BD00FA5F75 /* Profile */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		33CC10FB2044A3C60003C045 /* Build configuration list for PBXNativeTarget "Runner" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				33CC10FC2044A3C60003C045 /* Debug */,
				33CC10FD2044A3C60003C045 /* Release */,
				338D0CEA231458BD00FA5F75 /* Profile */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		33CC111B2044C6BA0003C045 /* Build configuration list for PBXAggregateTarget "Flutter Assemble" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				33CC111C2044C6BA0003C045 /* Debug */,
				33CC111D2044C6BA0003C045 /* Release */,
				338D0CEB231458BD00FA5F75 /* Profile */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
/* End XCConfigurationList section */
	};
	rootObject = 33CC10E52044A3C60003C045 /* Project object */;
}


// File: macos\Runner.xcodeproj\project.xcworkspace\xcshareddata\IDEWorkspaceChecks.plist
----------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDEDidComputeMac32BitWarning</key>
	<true/>
</dict>
</plist>


// File: macos\Runner.xcodeproj\xcshareddata\xcschemes\Runner.xcscheme
----------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<Scheme
   LastUpgradeVersion = "1510"
   version = "1.3">
   <BuildAction
      parallelizeBuildables = "YES"
      buildImplicitDependencies = "YES">
      <BuildActionEntries>
         <BuildActionEntry
            buildForTesting = "YES"
            buildForRunning = "YES"
            buildForProfiling = "YES"
            buildForArchiving = "YES"
            buildForAnalyzing = "YES">
            <BuildableReference
               BuildableIdentifier = "primary"
               BlueprintIdentifier = "33CC10EC2044A3C60003C045"
               BuildableName = "audio_melodia_flutter.app"
               BlueprintName = "Runner"
               ReferencedContainer = "container:Runner.xcodeproj">
            </BuildableReference>
         </BuildActionEntry>
      </BuildActionEntries>
   </BuildAction>
   <TestAction
      buildConfiguration = "Debug"
      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
      shouldUseLaunchSchemeArgsEnv = "YES">
      <MacroExpansion>
         <BuildableReference
            BuildableIdentifier = "primary"
            BlueprintIdentifier = "33CC10EC2044A3C60003C045"
            BuildableName = "audio_melodia_flutter.app"
            BlueprintName = "Runner"
            ReferencedContainer = "container:Runner.xcodeproj">
         </BuildableReference>
      </MacroExpansion>
      <Testables>
         <TestableReference
            skipped = "NO"
            parallelizable = "YES">
            <BuildableReference
               BuildableIdentifier = "primary"
               BlueprintIdentifier = "331C80D4294CF70F00263BE5"
               BuildableName = "RunnerTests.xctest"
               BlueprintName = "RunnerTests"
               ReferencedContainer = "container:Runner.xcodeproj">
            </BuildableReference>
         </TestableReference>
      </Testables>
   </TestAction>
   <LaunchAction
      buildConfiguration = "Debug"
      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
      launchStyle = "0"
      useCustomWorkingDirectory = "NO"
      ignoresPersistentStateOnLaunch = "NO"
      debugDocumentVersioning = "YES"
      debugServiceExtension = "internal"
      allowLocationSimulation = "YES">
      <BuildableProductRunnable
         runnableDebuggingMode = "0">
         <BuildableReference
            BuildableIdentifier = "primary"
            BlueprintIdentifier = "33CC10EC2044A3C60003C045"
            BuildableName = "audio_melodia_flutter.app"
            BlueprintName = "Runner"
            ReferencedContainer = "container:Runner.xcodeproj">
         </BuildableReference>
      </BuildableProductRunnable>
   </LaunchAction>
   <ProfileAction
      buildConfiguration = "Profile"
      shouldUseLaunchSchemeArgsEnv = "YES"
      savedToolIdentifier = ""
      useCustomWorkingDirectory = "NO"
      debugDocumentVersioning = "YES">
      <BuildableProductRunnable
         runnableDebuggingMode = "0">
         <BuildableReference
            BuildableIdentifier = "primary"
            BlueprintIdentifier = "33CC10EC2044A3C60003C045"
            BuildableName = "audio_melodia_flutter.app"
            BlueprintName = "Runner"
            ReferencedContainer = "container:Runner.xcodeproj">
         </BuildableReference>
      </BuildableProductRunnable>
   </ProfileAction>
   <AnalyzeAction
      buildConfiguration = "Debug">
   </AnalyzeAction>
   <ArchiveAction
      buildConfiguration = "Release"
      revealArchiveInOrganizer = "YES">
   </ArchiveAction>
</Scheme>


// File: macos\Runner.xcworkspace\contents.xcworkspacedata
----------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<Workspace
   version = "1.0">
   <FileRef
      location = "group:Runner.xcodeproj">
   </FileRef>
</Workspace>


// File: macos\Runner.xcworkspace\xcshareddata\IDEWorkspaceChecks.plist
----------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDEDidComputeMac32BitWarning</key>
	<true/>
</dict>
</plist>


// File: macos\RunnerTests\RunnerTests.swift
----------------------------------------
import Cocoa
import FlutterMacOS
import XCTest

class RunnerTests: XCTestCase {

  func testExample() {
    // If you add code to the Runner application, consider adding tests here.
    // See https://developer.apple.com/documentation/xctest for more information about using XCTest.
  }

}


// File: pubspec.lock
----------------------------------------
# Generated by pub
# See https://dart.dev/tools/pub/glossary#lockfile
packages:
  args:
    dependency: transitive
    description:
      name: args
      sha256: bf9f5caeea8d8fe6721a9c358dd8a5c1947b27f1cfaa18b39c301273594919e6
      url: "https://pub.dev"
    source: hosted
    version: "2.6.0"
  async:
    dependency: transitive
    description:
      name: async
      sha256: "947bfcf187f74dbc5e146c9eb9c0f10c9f8b30743e341481c1e2ed3ecc18c20c"
      url: "https://pub.dev"
    source: hosted
    version: "2.11.0"
  audio_session:
    dependency: transitive
    description:
      name: audio_session
      sha256: b2a26ba8b7efa1790d6460e82971fde3e398cfbe2295df9dea22f3499d2c12a7
      url: "https://pub.dev"
    source: hosted
    version: "0.1.23"
  bloc:
    dependency: transitive
    description:
      name: bloc
      sha256: "106842ad6569f0b60297619e9e0b1885c2fb9bf84812935490e6c5275777804e"
      url: "https://pub.dev"
    source: hosted
    version: "8.1.4"
  boolean_selector:
    dependency: transitive
    description:
      name: boolean_selector
      sha256: "6cfb5af12253eaf2b368f07bacc5a80d1301a071c73360d746b7f2e32d762c66"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.1"
  characters:
    dependency: transitive
    description:
      name: characters
      sha256: "04a925763edad70e8443c99234dc3328f442e811f1d8fd1a72f1c8ad0f69a605"
      url: "https://pub.dev"
    source: hosted
    version: "1.3.0"
  cli_util:
    dependency: transitive
    description:
      name: cli_util
      sha256: ff6785f7e9e3c38ac98b2fb035701789de90154024a75b6cb926445e83197d1c
      url: "https://pub.dev"
    source: hosted
    version: "0.4.2"
  clock:
    dependency: transitive
    description:
      name: clock
      sha256: cb6d7f03e1de671e34607e909a7213e31d7752be4fb66a86d29fe1eb14bfb5cf
      url: "https://pub.dev"
    source: hosted
    version: "1.1.1"
  collection:
    dependency: transitive
    description:
      name: collection
      sha256: a1ace0a119f20aabc852d165077c036cd864315bd99b7eaa10a60100341941bf
      url: "https://pub.dev"
    source: hosted
    version: "1.19.0"
  crypto:
    dependency: transitive
    description:
      name: crypto
      sha256: "1e445881f28f22d6140f181e07737b22f1e099a5e1ff94b0af2f9e4a463f4855"
      url: "https://pub.dev"
    source: hosted
    version: "3.0.6"
  cupertino_icons:
    dependency: "direct main"
    description:
      name: cupertino_icons
      sha256: ba631d1c7f7bef6b729a622b7b752645a2d076dba9976925b8f25725a30e1ee6
      url: "https://pub.dev"
    source: hosted
    version: "1.0.8"
  equatable:
    dependency: transitive
    description:
      name: equatable
      sha256: "567c64b3cb4cf82397aac55f4f0cbd3ca20d77c6c03bedbc4ceaddc08904aef7"
      url: "https://pub.dev"
    source: hosted
    version: "2.0.7"
  fake_async:
    dependency: transitive
    description:
      name: fake_async
      sha256: "511392330127add0b769b75a987850d136345d9227c6b94c96a04cf4a391bf78"
      url: "https://pub.dev"
    source: hosted
    version: "1.3.1"
  ffi:
    dependency: "direct main"
    description:
      name: ffi
      sha256: "16ed7b077ef01ad6170a3d0c57caa4a112a38d7a2ed5602e0aca9ca6f3d98da6"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.3"
  ffigen:
    dependency: "direct dev"
    description:
      name: ffigen
      sha256: dead012f29db2be71ea152458f5eab600de98fbc244e01088ae6bf2616bceca7
      url: "https://pub.dev"
    source: hosted
    version: "11.0.0"
  file:
    dependency: transitive
    description:
      name: file
      sha256: a3b4f84adafef897088c160faf7dfffb7696046cb13ae90b508c2cbc95d3b8d4
      url: "https://pub.dev"
    source: hosted
    version: "7.0.1"
  file_picker:
    dependency: "direct main"
    description:
      name: file_picker
      sha256: "1bbf65dd997458a08b531042ec3794112a6c39c07c37ff22113d2e7e4f81d4e4"
      url: "https://pub.dev"
    source: hosted
    version: "6.2.1"
  fixnum:
    dependency: transitive
    description:
      name: fixnum
      sha256: b6dc7065e46c974bc7c5f143080a6764ec7a4be6da1285ececdc37be96de53be
      url: "https://pub.dev"
    source: hosted
    version: "1.1.1"
  fl_chart:
    dependency: "direct main"
    description:
      name: fl_chart
      sha256: "00b74ae680df6b1135bdbea00a7d1fc072a9180b7c3f3702e4b19a9943f5ed7d"
      url: "https://pub.dev"
    source: hosted
    version: "0.66.2"
  flutter:
    dependency: "direct main"
    description: flutter
    source: sdk
    version: "0.0.0"
  flutter_bloc:
    dependency: "direct main"
    description:
      name: flutter_bloc
      sha256: b594505eac31a0518bdcb4b5b79573b8d9117b193cc80cc12e17d639b10aa27a
      url: "https://pub.dev"
    source: hosted
    version: "8.1.6"
  flutter_lints:
    dependency: "direct dev"
    description:
      name: flutter_lints
      sha256: "5398f14efa795ffb7a33e9b6a08798b26a180edac4ad7db3f231e40f82ce11e1"
      url: "https://pub.dev"
    source: hosted
    version: "5.0.0"
  flutter_midi:
    dependency: "direct main"
    description:
      name: flutter_midi
      sha256: "000e513736a316439b3cf5cf67066a3093ea0dc36c89b69734383554d3b2f757"
      url: "https://pub.dev"
    source: hosted
    version: "1.1.0"
  flutter_plugin_android_lifecycle:
    dependency: transitive
    description:
      name: flutter_plugin_android_lifecycle
      sha256: "615a505aef59b151b46bbeef55b36ce2b6ed299d160c51d84281946f0aa0ce0e"
      url: "https://pub.dev"
    source: hosted
    version: "2.0.24"
  flutter_test:
    dependency: "direct dev"
    description: flutter
    source: sdk
    version: "0.0.0"
  flutter_web_plugins:
    dependency: transitive
    description: flutter
    source: sdk
    version: "0.0.0"
  glob:
    dependency: transitive
    description:
      name: glob
      sha256: c3f1ee72c96f8f78935e18aa8cecced9ab132419e8625dc187e1c2408efc20de
      url: "https://pub.dev"
    source: hosted
    version: "2.1.3"
  js:
    dependency: transitive
    description:
      name: js
      sha256: f2c445dce49627136094980615a031419f7f3eb393237e4ecd97ac15dea343f3
      url: "https://pub.dev"
    source: hosted
    version: "0.6.7"
  just_audio:
    dependency: "direct main"
    description:
      name: just_audio
      sha256: "1a1eb86e7d81e69a1d36943f2b3efd62dece3dad2cafd9ec2e62e6db7c04d9b7"
      url: "https://pub.dev"
    source: hosted
    version: "0.9.43"
  just_audio_platform_interface:
    dependency: transitive
    description:
      name: just_audio_platform_interface
      sha256: "0243828cce503c8366cc2090cefb2b3c871aa8ed2f520670d76fd47aa1ab2790"
      url: "https://pub.dev"
    source: hosted
    version: "4.3.0"
  just_audio_web:
    dependency: transitive
    description:
      name: just_audio_web
      sha256: "9a98035b8b24b40749507687520ec5ab404e291d2b0937823ff45d92cb18d448"
      url: "https://pub.dev"
    source: hosted
    version: "0.4.13"
  leak_tracker:
    dependency: transitive
    description:
      name: leak_tracker
      sha256: "7bb2830ebd849694d1ec25bf1f44582d6ac531a57a365a803a6034ff751d2d06"
      url: "https://pub.dev"
    source: hosted
    version: "10.0.7"
  leak_tracker_flutter_testing:
    dependency: transitive
    description:
      name: leak_tracker_flutter_testing
      sha256: "9491a714cca3667b60b5c420da8217e6de0d1ba7a5ec322fab01758f6998f379"
      url: "https://pub.dev"
    source: hosted
    version: "3.0.8"
  leak_tracker_testing:
    dependency: transitive
    description:
      name: leak_tracker_testing
      sha256: "6ba465d5d76e67ddf503e1161d1f4a6bc42306f9d66ca1e8f079a47290fb06d3"
      url: "https://pub.dev"
    source: hosted
    version: "3.0.1"
  lints:
    dependency: transitive
    description:
      name: lints
      sha256: c35bb79562d980e9a453fc715854e1ed39e24e7d0297a880ef54e17f9874a9d7
      url: "https://pub.dev"
    source: hosted
    version: "5.1.1"
  logging:
    dependency: transitive
    description:
      name: logging
      sha256: c8245ada5f1717ed44271ed1c26b8ce85ca3228fd2ffdb75468ab01979309d61
      url: "https://pub.dev"
    source: hosted
    version: "1.3.0"
  matcher:
    dependency: transitive
    description:
      name: matcher
      sha256: d2323aa2060500f906aa31a895b4030b6da3ebdcc5619d14ce1aada65cd161cb
      url: "https://pub.dev"
    source: hosted
    version: "0.12.16+1"
  material_color_utilities:
    dependency: transitive
    description:
      name: material_color_utilities
      sha256: f7142bb1154231d7ea5f96bc7bde4bda2a0945d2806bb11670e30b850d56bdec
      url: "https://pub.dev"
    source: hosted
    version: "0.11.1"
  meta:
    dependency: transitive
    description:
      name: meta
      sha256: bdb68674043280c3428e9ec998512fb681678676b3c54e773629ffe74419f8c7
      url: "https://pub.dev"
    source: hosted
    version: "1.15.0"
  nested:
    dependency: transitive
    description:
      name: nested
      sha256: "03bac4c528c64c95c722ec99280375a6f2fc708eec17c7b3f07253b626cd2a20"
      url: "https://pub.dev"
    source: hosted
    version: "1.0.0"
  package_config:
    dependency: transitive
    description:
      name: package_config
      sha256: "92d4488434b520a62570293fbd33bb556c7d49230791c1b4bbd973baf6d2dc67"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.1"
  path:
    dependency: transitive
    description:
      name: path
      sha256: "087ce49c3f0dc39180befefc60fdb4acd8f8620e5682fe2476afd0b3688bb4af"
      url: "https://pub.dev"
    source: hosted
    version: "1.9.0"
  path_provider:
    dependency: "direct main"
    description:
      name: path_provider
      sha256: "50c5dd5b6e1aaf6fb3a78b33f6aa3afca52bf903a8a5298f53101fdaee55bbcd"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.5"
  path_provider_android:
    dependency: transitive
    description:
      name: path_provider_android
      sha256: "4adf4fd5423ec60a29506c76581bc05854c55e3a0b72d35bb28d661c9686edf2"
      url: "https://pub.dev"
    source: hosted
    version: "2.2.15"
  path_provider_foundation:
    dependency: transitive
    description:
      name: path_provider_foundation
      sha256: "4843174df4d288f5e29185bd6e72a6fbdf5a4a4602717eed565497429f179942"
      url: "https://pub.dev"
    source: hosted
    version: "2.4.1"
  path_provider_linux:
    dependency: transitive
    description:
      name: path_provider_linux
      sha256: f7a1fe3a634fe7734c8d3f2766ad746ae2a2884abe22e241a8b301bf5cac3279
      url: "https://pub.dev"
    source: hosted
    version: "2.2.1"
  path_provider_macos:
    dependency: transitive
    description:
      name: path_provider_macos
      sha256: cd57cb98a30ce9d12fdd1896d9d3b0517ce689f942de6ccd2708cd39b3d18a7c
      url: "https://pub.dev"
    source: hosted
    version: "2.0.7"
  path_provider_platform_interface:
    dependency: transitive
    description:
      name: path_provider_platform_interface
      sha256: "88f5779f72ba699763fa3a3b06aa4bf6de76c8e5de842cf6f29e2e06476c2334"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.2"
  path_provider_windows:
    dependency: transitive
    description:
      name: path_provider_windows
      sha256: bd6f00dbd873bfb70d0761682da2b3a2c2fccc2b9e84c495821639601d81afe7
      url: "https://pub.dev"
    source: hosted
    version: "2.3.0"
  platform:
    dependency: transitive
    description:
      name: platform
      sha256: "5d6b1b0036a5f331ebc77c850ebc8506cbc1e9416c27e59b439f917a902a4984"
      url: "https://pub.dev"
    source: hosted
    version: "3.1.6"
  plugin_platform_interface:
    dependency: transitive
    description:
      name: plugin_platform_interface
      sha256: "4820fbfdb9478b1ebae27888254d445073732dae3d6ea81f0b7e06d5dedc3f02"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.8"
  provider:
    dependency: "direct main"
    description:
      name: provider
      sha256: c8a055ee5ce3fd98d6fc872478b03823ffdb448699c6ebdbbc71d59b596fd48c
      url: "https://pub.dev"
    source: hosted
    version: "6.1.2"
  quiver:
    dependency: transitive
    description:
      name: quiver
      sha256: ea0b925899e64ecdfbf9c7becb60d5b50e706ade44a85b2363be2a22d88117d2
      url: "https://pub.dev"
    source: hosted
    version: "3.2.2"
  rxdart:
    dependency: transitive
    description:
      name: rxdart
      sha256: "5c3004a4a8dbb94bd4bf5412a4def4acdaa12e12f269737a5751369e12d1a962"
      url: "https://pub.dev"
    source: hosted
    version: "0.28.0"
  screen_retriever:
    dependency: transitive
    description:
      name: screen_retriever
      sha256: "6ee02c8a1158e6dae7ca430da79436e3b1c9563c8cf02f524af997c201ac2b90"
      url: "https://pub.dev"
    source: hosted
    version: "0.1.9"
  sky_engine:
    dependency: transitive
    description: flutter
    source: sdk
    version: "0.0.0"
  source_span:
    dependency: transitive
    description:
      name: source_span
      sha256: "53e943d4206a5e30df338fd4c6e7a077e02254531b138a15aec3bd143c1a8b3c"
      url: "https://pub.dev"
    source: hosted
    version: "1.10.0"
  sprintf:
    dependency: transitive
    description:
      name: sprintf
      sha256: "1fc9ffe69d4df602376b52949af107d8f5703b77cda567c4d7d86a0693120f23"
      url: "https://pub.dev"
    source: hosted
    version: "7.0.0"
  stack_trace:
    dependency: transitive
    description:
      name: stack_trace
      sha256: "9f47fd3630d76be3ab26f0ee06d213679aa425996925ff3feffdec504931c377"
      url: "https://pub.dev"
    source: hosted
    version: "1.12.0"
  stream_channel:
    dependency: transitive
    description:
      name: stream_channel
      sha256: ba2aa5d8cc609d96bbb2899c28934f9e1af5cddbd60a827822ea467161eb54e7
      url: "https://pub.dev"
    source: hosted
    version: "2.1.2"
  string_scanner:
    dependency: transitive
    description:
      name: string_scanner
      sha256: "688af5ed3402a4bde5b3a6c15fd768dbf2621a614950b17f04626c431ab3c4c3"
      url: "https://pub.dev"
    source: hosted
    version: "1.3.0"
  term_glyph:
    dependency: transitive
    description:
      name: term_glyph
      sha256: a29248a84fbb7c79282b40b8c72a1209db169a2e0542bce341da992fe1bc7e84
      url: "https://pub.dev"
    source: hosted
    version: "1.2.1"
  test_api:
    dependency: transitive
    description:
      name: test_api
      sha256: "664d3a9a64782fcdeb83ce9c6b39e78fd2971d4e37827b9b06c3aa1edc5e760c"
      url: "https://pub.dev"
    source: hosted
    version: "0.7.3"
  tonic:
    dependency: transitive
    description:
      name: tonic
      sha256: "4c5f3cc7d41cb256822aa5875cd89ccd94a2854912db3dddf4425a46d3d3dd15"
      url: "https://pub.dev"
    source: hosted
    version: "0.2.5"
  typed_data:
    dependency: transitive
    description:
      name: typed_data
      sha256: f9049c039ebfeb4cf7a7104a675823cd72dba8297f264b6637062516699fa006
      url: "https://pub.dev"
    source: hosted
    version: "1.4.0"
  uuid:
    dependency: transitive
    description:
      name: uuid
      sha256: a5be9ef6618a7ac1e964353ef476418026db906c4facdedaa299b7a2e71690ff
      url: "https://pub.dev"
    source: hosted
    version: "4.5.1"
  vector_math:
    dependency: transitive
    description:
      name: vector_math
      sha256: "80b3257d1492ce4d091729e3a67a60407d227c27241d6927be0130c98e741803"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.4"
  vm_service:
    dependency: transitive
    description:
      name: vm_service
      sha256: f6be3ed8bd01289b34d679c2b62226f63c0e69f9fd2e50a6b3c1c729a961041b
      url: "https://pub.dev"
    source: hosted
    version: "14.3.0"
  web:
    dependency: transitive
    description:
      name: web
      sha256: cd3543bd5798f6ad290ea73d210f423502e71900302dde696f8bff84bf89a1cb
      url: "https://pub.dev"
    source: hosted
    version: "1.1.0"
  win32:
    dependency: transitive
    description:
      name: win32
      sha256: "154360849a56b7b67331c21f09a386562d88903f90a1099c5987afc1912e1f29"
      url: "https://pub.dev"
    source: hosted
    version: "5.10.0"
  window_manager:
    dependency: "direct main"
    description:
      name: window_manager
      sha256: "8699323b30da4cdbe2aa2e7c9de567a6abd8a97d9a5c850a3c86dcd0b34bbfbf"
      url: "https://pub.dev"
    source: hosted
    version: "0.3.9"
  xdg_directories:
    dependency: transitive
    description:
      name: xdg_directories
      sha256: "7a3f37b05d989967cdddcbb571f1ea834867ae2faa29725fd085180e0883aa15"
      url: "https://pub.dev"
    source: hosted
    version: "1.1.0"
  yaml:
    dependency: transitive
    description:
      name: yaml
      sha256: b9da305ac7c39faa3f030eccd175340f968459dae4af175130b3fc47e40d76ce
      url: "https://pub.dev"
    source: hosted
    version: "3.1.3"
  yaml_edit:
    dependency: transitive
    description:
      name: yaml_edit
      sha256: fb38626579fb345ad00e674e2af3a5c9b0cc4b9bfb8fd7f7ff322c7c9e62aef5
      url: "https://pub.dev"
    source: hosted
    version: "2.2.2"
sdks:
  dart: ">=3.6.1 <4.0.0"
  flutter: ">=3.24.0"


// File: pubspec.yaml
----------------------------------------
name: audio_melodia_flutter
description: "A modern audio stem separator and MIDI extractor."
publish_to: 'none'
version: 1.0.0+1

environment:
  sdk: ^3.6.1

dependencies:
  flutter:
    sdk: flutter
  cupertino_icons: ^1.0.8
  # Audio processing
  just_audio: ^0.9.36
  flutter_midi: ^1.1.0
  # FFI for Python integration
  ffi: ^2.1.0
  # File management
  path_provider: ^2.1.2
  file_picker: ^6.1.1
  # State management
  provider: ^6.1.1
  # UI components
  flutter_bloc: ^8.1.3
  fl_chart: ^0.66.0
  # Desktop window management
  window_manager: ^0.3.7

dev_dependencies:
  flutter_test:
    sdk: flutter
  flutter_lints: ^5.0.0
  ffigen: ^11.0.0

flutter:
  uses-material-design: true


// File: python\processor.py
----------------------------------------
import os
import json
import sys
import logging
import tempfile
from typing import Dict, Any, List

# Set up logging
logging.basicConfig(
    level=logging.INFO,
    format='%(levelname)s: %(message)s',
    stream=sys.stderr  # Send logs to stderr to keep stdout clean for JSON
)
logger = logging.getLogger(__name__)

def write_json_response(data: Dict[str, Any]) -> None:
    """Write JSON response using a temporary file to ensure proper formatting."""
    with tempfile.NamedTemporaryFile(mode='w', delete=False, suffix='.json') as f:
        json.dump(data, f)
        temp_path = f.name
    
    try:
        with open(temp_path, 'r') as f:
            print(f.read().strip(), flush=True)
    finally:
        try:
            os.unlink(temp_path)
        except:
            pass

def format_json_response(status: str, data: Any = None, error: str = None) -> Dict[str, Any]:
    """Format response as JSON object."""
    response = {'status': status}
    if data is not None:
        response['result'] = data
    if error is not None:
        response['error'] = error
    return response

def parse_args(args: List[str]) -> Dict[str, str]:
    """Parse command line arguments in the format key=value."""
    result = {}
    for arg in args:
        if '=' in arg:
            key, value = arg.split('=', 1)
            # Remove any quotes that might have been added
            value = value.strip('"\'')
            result[key] = value
    return result

class DependencyManager:
    def __init__(self):
        self.torch_available = False
        self.torchaudio_available = False
        self.demucs_available = False
        self.soundfile_available = False
        self._check_dependencies()
        
    def _check_dependencies(self):
        """Check which dependencies are available."""
        try:
            import torch
            import torchaudio
            self.torch_available = True
            self.torchaudio_available = True
            logger.info(f"PyTorch loaded successfully (device: {torch.device('cuda' if torch.cuda.is_available() else 'cpu')})")
        except ImportError as e:
            logger.error(f"Failed to import PyTorch/torchaudio: {e}")
            
        try:
            import soundfile
            self.soundfile_available = True
            logger.info("SoundFile loaded successfully")
        except ImportError:
            logger.error("Failed to import soundfile")
            
        try:
            from demucs.pretrained import get_model
            from demucs.apply import apply_model
            self.demucs_available = True
            logger.info("Demucs loaded successfully")
        except ImportError:
            logger.error("Failed to import demucs")

    def get_missing_dependencies(self) -> List[str]:
        """Get list of missing dependencies."""
        missing = []
        if not self.torch_available or not self.torchaudio_available:
            missing.extend(['torch', 'torchaudio'])
        if not self.soundfile_available:
            missing.append('soundfile')
        if not self.demucs_available:
            missing.append('demucs')
        return missing

    def can_separate_stems(self) -> bool:
        """Check if stem separation is possible."""
        return all([
            self.torch_available,
            self.torchaudio_available,
            self.soundfile_available,
            self.demucs_available
        ])

class AudioProcessor:
    def __init__(self):
        self.deps = DependencyManager()
        self.device = None
        self.demucs_model = None
        
        if self.deps.torch_available:
            import torch
            self.device = 'cuda' if torch.cuda.is_available() else 'cpu'
            logger.info(f"AudioProcessor initialized (device: {self.device})")
        
    def load_models(self):
        """Load all required models."""
        if not self.deps.can_separate_stems():
            raise ImportError("Required dependencies for stem separation not available")
            
        if self.demucs_model is None:
            from demucs.pretrained import get_model
            logger.info("Loading Demucs model...")
            self.demucs_model = get_model('htdemucs')
            self.demucs_model.to(self.device)
            logger.info("Demucs model loaded successfully")
    
    def load_audio(self, audio_path: str):
        """Load audio file with proper format handling."""
        import soundfile as sf
        import torch
        import numpy as np
        
        logger.info(f"Loading audio file: {audio_path}")
        
        if not os.path.exists(audio_path):
            raise FileNotFoundError(f"Audio file not found: {audio_path}")
        
        try:
            # Try loading with soundfile first
            data, sr = sf.read(audio_path)
            # Convert to float32 tensor
            if data.dtype != np.float32:
                data = data.astype(np.float32)
            # Convert to mono if stereo
            if len(data.shape) > 1 and data.shape[1] > 1:
                data = data.mean(axis=1)
            # Convert to torch tensor
            wav = torch.from_numpy(data).unsqueeze(0)
            logger.info(f"Audio loaded successfully with soundfile (sample rate: {sr}Hz)")
            return wav, sr
        except Exception as e:
            logger.error(f"Failed to load audio with soundfile: {e}")
            try:
                # Fallback to torchaudio
                import torchaudio
                wav, sr = torchaudio.load(audio_path)
                if wav.shape[0] > 1:  # Convert to mono if stereo
                    wav = wav.mean(dim=0, keepdim=True)
                logger.info(f"Audio loaded successfully with torchaudio (sample rate: {sr}Hz)")
                return wav, sr
            except Exception as e:
                logger.error(f"Failed to load audio with torchaudio: {e}")
                raise ValueError(f"Could not load audio file {audio_path}. Supported formats: WAV, FLAC, OGG, MP3")
    
    def separate_stems(self, audio_path: str, output_dir: str) -> dict:
        """Separate audio into stems using Demucs."""
        if not self.deps.can_separate_stems():
            raise ImportError("Required dependencies for stem separation not available")
            
        import torch
        import torchaudio
        from demucs.apply import apply_model
        
        logger.info(f"Starting stem separation for {audio_path}")
        self.load_models()
        
        # Load audio
        wav, sr = self.load_audio(audio_path)
        wav = wav.to(self.device)
        
        # Apply separation
        logger.info("Applying source separation...")
        sources = apply_model(self.demucs_model, wav, shifts=1, split=True, overlap=0.25)
        sources = sources.cpu().numpy()
        logger.info("Source separation completed")
        
        # Create output directory
        os.makedirs(output_dir, exist_ok=True)
        
        # Save stems
        stem_paths = {}
        for source, name in zip(sources, ['drums', 'bass', 'other', 'vocals']):
            output_path = os.path.join(output_dir, f"{name}.wav")
            torchaudio.save(output_path, torch.tensor(source), sr)
            stem_paths[name] = output_path
            logger.info(f"Saved {name} stem to {output_path}")
            
        return stem_paths

def get_capabilities() -> Dict[str, Any]:
    """Get current capabilities based on available dependencies."""
    deps = DependencyManager()
    return {
        'can_separate_stems': deps.can_separate_stems(),
        'missing_dependencies': deps.get_missing_dependencies()
    }

def process_command(action: str, args: Dict[str, str]) -> Dict[str, Any]:
    """Process command and return response object."""
    try:
        processor = AudioProcessor()
        
        if action == 'get_capabilities':
            return format_json_response('success', get_capabilities())
        elif action == 'separate_stems':
            if not processor.deps.can_separate_stems():
                return format_json_response(
                    'error',
                    error='Stem separation not available. Missing dependencies: ' + 
                          ', '.join(processor.deps.get_missing_dependencies())
                )
                
            if 'input_path' not in args or 'output_dir' not in args:
                return format_json_response(
                    'error',
                    error='Missing required arguments: input_path and output_dir'
                )
                
            result = processor.separate_stems(args['input_path'], args['output_dir'])
            return format_json_response('success', {'stems': result})
        else:
            return format_json_response(
                'error',
                error=f'Invalid action specified: {action}'
            )
    except Exception as e:
        logger.exception("Error processing command")
        return format_json_response('error', error=str(e))

if __name__ == '__main__':
    if len(sys.argv) > 1:
        action = sys.argv[1]
        kwargs = parse_args(sys.argv[2:])
        write_json_response(process_command(action, kwargs))
    else:
        write_json_response(format_json_response('error', error='No arguments provided'))

// File: python\requirements.txt
----------------------------------------
--find-links https://download.pytorch.org/whl/torch_stable.html
torch>=2.2.0
torchaudio>=2.2.0
basic-pitch==0.3.0
demucs==4.0.0
librosa==0.10.0
numpy==1.23.5
scipy>=1.10.0
soundfile>=0.12.0
tensorflow>=2.4.1,<2.16.0

// File: README.md
----------------------------------------
# audio_melodia_flutter

A new Flutter project.

## Getting Started

This project is a starting point for a Flutter application.

A few resources to get you started if this is your first Flutter project:

- [Lab: Write your first Flutter app](https://docs.flutter.dev/get-started/codelab)
- [Cookbook: Useful Flutter samples](https://docs.flutter.dev/cookbook)

For help getting started with Flutter development, view the
[online documentation](https://docs.flutter.dev/), which offers tutorials,
samples, guidance on mobile development, and a full API reference.


// File: test\widget_test.dart
----------------------------------------
import 'package:flutter_test/flutter_test.dart';
import 'package:audio_melodia_flutter/ui/app.dart';

void main() {
  testWidgets('App smoke test', (WidgetTester tester) async {
    await tester.pumpWidget(const AudioMelodiaApp());
    expect(find.text('Audio Melodia'), findsOneWidget);
  });
}


// File: venv\Lib\site-packages\_distutils_hack\__init__.py
----------------------------------------
# don't import any costly modules
import sys
import os


def warn_distutils_present():
    if 'distutils' not in sys.modules:
        return
    import warnings

    warnings.warn(
        "Distutils was imported before Setuptools, but importing Setuptools "
        "also replaces the `distutils` module in `sys.modules`. This may lead "
        "to undesirable behaviors or errors. To avoid these issues, avoid "
        "using distutils directly, ensure that setuptools is installed in the "
        "traditional way (e.g. not an editable install), and/or make sure "
        "that setuptools is always imported before distutils."
    )


def clear_distutils():
    if 'distutils' not in sys.modules:
        return
    import warnings

    warnings.warn("Setuptools is replacing distutils.")
    mods = [
        name
        for name in sys.modules
        if name == "distutils" or name.startswith("distutils.")
    ]
    for name in mods:
        del sys.modules[name]


def enabled():
    """
    Allow selection of distutils by environment variable.
    """
    which = os.environ.get('SETUPTOOLS_USE_DISTUTILS', 'local')
    return which == 'local'


def ensure_local_distutils():
    import importlib

    clear_distutils()

    # With the DistutilsMetaFinder in place,
    # perform an import to cause distutils to be
    # loaded from setuptools._distutils. Ref #2906.
    with shim():
        importlib.import_module('distutils')

    # check that submodules load as expected
    core = importlib.import_module('distutils.core')
    assert '_distutils' in core.__file__, core.__file__
    assert 'setuptools._distutils.log' not in sys.modules


def do_override():
    """
    Ensure that the local copy of distutils is preferred over stdlib.

    See https://github.com/pypa/setuptools/issues/417#issuecomment-392298401
    for more motivation.
    """
    if enabled():
        warn_distutils_present()
        ensure_local_distutils()


class _TrivialRe:
    def __init__(self, *patterns):
        self._patterns = patterns

    def match(self, string):
        return all(pat in string for pat in self._patterns)


class DistutilsMetaFinder:
    def find_spec(self, fullname, path, target=None):
        # optimization: only consider top level modules and those
        # found in the CPython test suite.
        if path is not None and not fullname.startswith('test.'):
            return None

        method_name = 'spec_for_{fullname}'.format(**locals())
        method = getattr(self, method_name, lambda: None)
        return method()

    def spec_for_distutils(self):
        if self.is_cpython():
            return None

        import importlib
        import importlib.abc
        import importlib.util

        try:
            mod = importlib.import_module('setuptools._distutils')
        except Exception:
            # There are a couple of cases where setuptools._distutils
            # may not be present:
            # - An older Setuptools without a local distutils is
            #   taking precedence. Ref #2957.
            # - Path manipulation during sitecustomize removes
            #   setuptools from the path but only after the hook
            #   has been loaded. Ref #2980.
            # In either case, fall back to stdlib behavior.
            return None

        class DistutilsLoader(importlib.abc.Loader):
            def create_module(self, spec):
                mod.__name__ = 'distutils'
                return mod

            def exec_module(self, module):
                pass

        return importlib.util.spec_from_loader(
            'distutils', DistutilsLoader(), origin=mod.__file__
        )

    @staticmethod
    def is_cpython():
        """
        Suppress supplying distutils for CPython (build and tests).
        Ref #2965 and #3007.
        """
        return os.path.isfile('pybuilddir.txt')

    def spec_for_pip(self):
        """
        Ensure stdlib distutils when running under pip.
        See pypa/pip#8761 for rationale.
        """
        if sys.version_info >= (3, 12) or self.pip_imported_during_build():
            return
        clear_distutils()
        self.spec_for_distutils = lambda: None

    @classmethod
    def pip_imported_during_build(cls):
        """
        Detect if pip is being imported in a build script. Ref #2355.
        """
        import traceback

        return any(
            cls.frame_file_is_setup(frame) for frame, line in traceback.walk_stack(None)
        )

    @staticmethod
    def frame_file_is_setup(frame):
        """
        Return True if the indicated frame suggests a setup.py file.
        """
        # some frames may not have __file__ (#2940)
        return frame.f_globals.get('__file__', '').endswith('setup.py')

    def spec_for_sensitive_tests(self):
        """
        Ensure stdlib distutils when running select tests under CPython.

        python/cpython#91169
        """
        clear_distutils()
        self.spec_for_distutils = lambda: None

    sensitive_tests = (
        [
            'test.test_distutils',
            'test.test_peg_generator',
            'test.test_importlib',
        ]
        if sys.version_info < (3, 10)
        else [
            'test.test_distutils',
        ]
    )


for name in DistutilsMetaFinder.sensitive_tests:
    setattr(
        DistutilsMetaFinder,
        f'spec_for_{name}',
        DistutilsMetaFinder.spec_for_sensitive_tests,
    )


DISTUTILS_FINDER = DistutilsMetaFinder()


def add_shim():
    DISTUTILS_FINDER in sys.meta_path or insert_shim()


class shim:
    def __enter__(self):
        insert_shim()

    def __exit__(self, exc, value, tb):
        _remove_shim()


def insert_shim():
    sys.meta_path.insert(0, DISTUTILS_FINDER)


def _remove_shim():
    try:
        sys.meta_path.remove(DISTUTILS_FINDER)
    except ValueError:
        pass


if sys.version_info < (3, 12):
    # DistutilsMetaFinder can only be disabled in Python < 3.12 (PEP 632)
    remove_shim = _remove_shim


// File: venv\Lib\site-packages\_distutils_hack\override.py
----------------------------------------
__import__('_distutils_hack').do_override()


// File: venv\Lib\site-packages\_soundfile.py
----------------------------------------
# auto-generated file
import _cffi_backend

ffi = _cffi_backend.FFI('_soundfile',
    _version = 0x2601,
    _types = b'\x00\x00\x17\x0D\x00\x00\x6D\x03\x00\x00\x07\x01\x00\x00\x6C\x03\x00\x00\x7A\x03\x00\x00\x00\x0F\x00\x00\x17\x0D\x00\x00\x6F\x03\x00\x00\x07\x01\x00\x00\x03\x11\x00\x00\x00\x0F\x00\x00\x17\x0D\x00\x00\x07\x01\x00\x00\x07\x01\x00\x00\x03\x11\x00\x00\x07\x01\x00\x00\x00\x0F\x00\x00\x17\x0D\x00\x00\x7B\x03\x00\x00\x07\x01\x00\x00\x03\x11\x00\x00\x00\x0F\x00\x00\x07\x0D\x00\x00\x6E\x03\x00\x00\x00\x0F\x00\x00\x07\x0D\x00\x00\x17\x11\x00\x00\x07\x01\x00\x00\x00\x0F\x00\x00\x07\x0D\x00\x00\x07\x01\x00\x00\x00\x0F\x00\x00\x07\x0D\x00\x00\x00\x0F\x00\x00\x02\x0D\x00\x00\x6C\x03\x00\x00\x00\x0F\x00\x00\x02\x0D\x00\x00\x17\x11\x00\x00\x00\x0F\x00\x00\x02\x0D\x00\x00\x17\x11\x00\x00\x6F\x03\x00\x00\x1C\x01\x00\x00\x00\x0F\x00\x00\x02\x0D\x00\x00\x17\x11\x00\x00\x07\x01\x00\x00\x07\x11\x00\x00\x00\x0F\x00\x00\x02\x0D\x00\x00\x17\x11\x00\x00\x07\x01\x00\x00\x04\x11\x00\x00\x07\x01\x00\x00\x00\x0F\x00\x00\x3B\x0D\x00\x00\x17\x11\x00\x00\x70\x03\x00\x00\x17\x01\x00\x00\x00\x0F\x00\x00\x3B\x0D\x00\x00\x17\x11\x00\x00\x74\x03\x00\x00\x17\x01\x00\x00\x00\x0F\x00\x00\x3B\x0D\x00\x00\x17\x11\x00\x00\x02\x03\x00\x00\x17\x01\x00\x00\x00\x0F\x00\x00\x3B\x0D\x00\x00\x17\x11\x00\x00\x17\x01\x00\x00\x07\x01\x00\x00\x00\x0F\x00\x00\x3B\x0D\x00\x00\x17\x11\x00\x00\x79\x03\x00\x00\x17\x01\x00\x00\x00\x0F\x00\x00\x3B\x0D\x00\x00\x17\x11\x00\x00\x04\x11\x00\x00\x17\x01\x00\x00\x00\x0F\x00\x00\x3B\x0D\x00\x00\x17\x01\x00\x00\x07\x01\x00\x00\x04\x11\x00\x00\x00\x0F\x00\x00\x3B\x0D\x00\x00\x04\x11\x00\x00\x00\x0F\x00\x00\x3B\x0D\x00\x00\x04\x11\x00\x00\x17\x01\x00\x00\x04\x11\x00\x00\x00\x0F\x00\x00\x3B\x0D\x00\x00\x7A\x03\x00\x00\x17\x01\x00\x00\x04\x11\x00\x00\x00\x0F\x00\x00\x7A\x0D\x00\x00\x17\x11\x00\x00\x00\x0F\x00\x00\x00\x09\x00\x00\x01\x09\x00\x00\x02\x09\x00\x00\x03\x09\x00\x00\x02\x01\x00\x00\x0E\x01\x00\x00\x00\x0B\x00\x00\x01\x0B\x00\x00\x02\x0B\x00\x00\x0D\x01\x00\x00\x56\x03\x00\x00\x5B\x03\x00\x00\x5E\x03\x00\x00\x63\x03\x00\x00\x05\x01\x00\x00\x00\x01\x00\x00\x10\x01',
    _globals = (b'\xFF\xFF\xFF\x0BSFC_FILE_TRUNCATE',4224,b'\xFF\xFF\xFF\x0BSFC_GET_FORMAT_INFO',4136,b'\xFF\xFF\xFF\x0BSFC_GET_FORMAT_MAJOR',4145,b'\xFF\xFF\xFF\x0BSFC_GET_FORMAT_MAJOR_COUNT',4144,b'\xFF\xFF\xFF\x0BSFC_GET_FORMAT_SUBTYPE',4147,b'\xFF\xFF\xFF\x0BSFC_GET_FORMAT_SUBTYPE_COUNT',4146,b'\xFF\xFF\xFF\x0BSFC_GET_LIB_VERSION',4096,b'\xFF\xFF\xFF\x0BSFC_GET_LOG_INFO',4097,b'\xFF\xFF\xFF\x0BSFC_SET_BITRATE_MODE',4869,b'\xFF\xFF\xFF\x0BSFC_SET_CLIPPING',4288,b'\xFF\xFF\xFF\x0BSFC_SET_COMPRESSION_LEVEL',4865,b'\xFF\xFF\xFF\x0BSFC_SET_SCALE_FLOAT_INT_READ',4116,b'\xFF\xFF\xFF\x0BSFC_SET_SCALE_INT_FLOAT_WRITE',4117,b'\xFF\xFF\xFF\x0BSFM_RDWR',48,b'\xFF\xFF\xFF\x0BSFM_READ',16,b'\xFF\xFF\xFF\x0BSFM_WRITE',32,b'\xFF\xFF\xFF\x0BSF_BITRATE_MODE_AVERAGE',1,b'\xFF\xFF\xFF\x0BSF_BITRATE_MODE_CONSTANT',0,b'\xFF\xFF\xFF\x0BSF_BITRATE_MODE_VARIABLE',2,b'\xFF\xFF\xFF\x0BSF_FALSE',0,b'\xFF\xFF\xFF\x0BSF_FORMAT_ENDMASK',805306368,b'\xFF\xFF\xFF\x0BSF_FORMAT_SUBMASK',65535,b'\xFF\xFF\xFF\x0BSF_FORMAT_TYPEMASK',268369920,b'\xFF\xFF\xFF\x0BSF_TRUE',1,b'\x00\x00\x25\x23sf_close',0,b'\x00\x00\x32\x23sf_command',0,b'\x00\x00\x25\x23sf_error',0,b'\x00\x00\x1D\x23sf_error_number',0,b'\x00\x00\x28\x23sf_error_str',0,b'\x00\x00\x22\x23sf_format_check',0,b'\x00\x00\x19\x23sf_get_string',0,b'\x00\x00\x06\x23sf_open',0,b'\x00\x00\x0B\x23sf_open_fd',0,b'\x00\x00\x00\x23sf_open_virtual',0,b'\x00\x00\x25\x23sf_perror',0,b'\x00\x00\x38\x23sf_read_double',0,b'\x00\x00\x3D\x23sf_read_float',0,b'\x00\x00\x42\x23sf_read_int',0,b'\x00\x00\x51\x23sf_read_raw',0,b'\x00\x00\x4C\x23sf_read_short',0,b'\x00\x00\x51\x23sf_readf_double',0,b'\x00\x00\x51\x23sf_readf_float',0,b'\x00\x00\x51\x23sf_readf_int',0,b'\x00\x00\x51\x23sf_readf_short',0,b'\x00\x00\x47\x23sf_seek',0,b'\x00\x00\x2D\x23sf_set_string',0,b'\x00\x00\x16\x23sf_strerror',0,b'\x00\x00\x20\x23sf_version_string',0,b'\x00\x00\x11\x23sf_wchar_open',0,b'\x00\x00\x38\x23sf_write_double',0,b'\x00\x00\x3D\x23sf_write_float',0,b'\x00\x00\x42\x23sf_write_int',0,b'\x00\x00\x51\x23sf_write_raw',0,b'\x00\x00\x4C\x23sf_write_short',0,b'\x00\x00\x68\x23sf_write_sync',0,b'\x00\x00\x51\x23sf_writef_double',0,b'\x00\x00\x51\x23sf_writef_float',0,b'\x00\x00\x51\x23sf_writef_int',0,b'\x00\x00\x51\x23sf_writef_short',0),
    _struct_unions = ((b'\x00\x00\x00\x6B\x00\x00\x00\x02SF_FORMAT_INFO',b'\x00\x00\x02\x11format',b'\x00\x00\x07\x11name',b'\x00\x00\x07\x11extension'),(b'\x00\x00\x00\x6C\x00\x00\x00\x02SF_INFO',b'\x00\x00\x3B\x11frames',b'\x00\x00\x02\x11samplerate',b'\x00\x00\x02\x11channels',b'\x00\x00\x02\x11format',b'\x00\x00\x02\x11sections',b'\x00\x00\x02\x11seekable'),(b'\x00\x00\x00\x6D\x00\x00\x00\x02SF_VIRTUAL_IO',b'\x00\x00\x76\x11get_filelen',b'\x00\x00\x75\x11seek',b'\x00\x00\x77\x11read',b'\x00\x00\x78\x11write',b'\x00\x00\x76\x11tell'),(b'\x00\x00\x00\x6E\x00\x00\x00\x10SNDFILE_tag',)),
    _enums = (b'\x00\x00\x00\x71\x00\x00\x00\x16$1\x00SF_FORMAT_SUBMASK,SF_FORMAT_TYPEMASK,SF_FORMAT_ENDMASK',b'\x00\x00\x00\x72\x00\x00\x00\x16$2\x00SFC_GET_LIB_VERSION,SFC_GET_LOG_INFO,SFC_GET_FORMAT_INFO,SFC_GET_FORMAT_MAJOR_COUNT,SFC_GET_FORMAT_MAJOR,SFC_GET_FORMAT_SUBTYPE_COUNT,SFC_GET_FORMAT_SUBTYPE,SFC_FILE_TRUNCATE,SFC_SET_CLIPPING,SFC_SET_SCALE_FLOAT_INT_READ,SFC_SET_SCALE_INT_FLOAT_WRITE,SFC_SET_COMPRESSION_LEVEL,SFC_SET_BITRATE_MODE',b'\x00\x00\x00\x73\x00\x00\x00\x16$3\x00SF_FALSE,SF_TRUE,SFM_READ,SFM_WRITE,SFM_RDWR,SF_BITRATE_MODE_CONSTANT,SF_BITRATE_MODE_AVERAGE,SF_BITRATE_MODE_VARIABLE'),
    _typenames = (b'\x00\x00\x00\x6BSF_FORMAT_INFO',b'\x00\x00\x00\x6CSF_INFO',b'\x00\x00\x00\x6DSF_VIRTUAL_IO',b'\x00\x00\x00\x6ESNDFILE',b'\x00\x00\x00\x3Bsf_count_t',b'\x00\x00\x00\x76sf_vio_get_filelen',b'\x00\x00\x00\x77sf_vio_read',b'\x00\x00\x00\x75sf_vio_seek',b'\x00\x00\x00\x76sf_vio_tell',b'\x00\x00\x00\x78sf_vio_write'),
)


// File: venv\Lib\site-packages\_soundfile_data\__init__.py
----------------------------------------
# this file makes _soundfile_data importable, so we can query its path
# when searching for the libsndfile binaries.
pass


// File: venv\Lib\site-packages\_soundfile_data\COPYING
----------------------------------------
                  GNU LESSER GENERAL PUBLIC LICENSE
                       Version 2.1, February 1999

 Copyright (C) 1991, 1999 Free Software Foundation, Inc.
     59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 Everyone is permitted to copy and distribute verbatim copies
 of this license document, but changing it is not allowed.

[This is the first released version of the Lesser GPL.  It also counts
 as the successor of the GNU Library Public License, version 2, hence
 the version number 2.1.]

                            Preamble

  The licenses for most software are designed to take away your
freedom to share and change it.  By contrast, the GNU General Public
Licenses are intended to guarantee your freedom to share and change
free software--to make sure the software is free for all its users.

  This license, the Lesser General Public License, applies to some
specially designated software packages--typically libraries--of the
Free Software Foundation and other authors who decide to use it.  You
can use it too, but we suggest you first think carefully about whether
this license or the ordinary General Public License is the better
strategy to use in any particular case, based on the explanations below.

  When we speak of free software, we are referring to freedom of use,
not price.  Our General Public Licenses are designed to make sure that
you have the freedom to distribute copies of free software (and charge
for this service if you wish); that you receive source code or can get
it if you want it; that you can change the software and use pieces of
it in new free programs; and that you are informed that you can do
these things.

  To protect your rights, we need to make restrictions that forbid
distributors to deny you these rights or to ask you to surrender these
rights.  These restrictions translate to certain responsibilities for
you if you distribute copies of the library or if you modify it.

  For example, if you distribute copies of the library, whether gratis
or for a fee, you must give the recipients all the rights that we gave
you.  You must make sure that they, too, receive or can get the source
code.  If you link other code with the library, you must provide
complete object files to the recipients, so that they can relink them
with the library after making changes to the library and recompiling
it.  And you must show them these terms so they know their rights.

  We protect your rights with a two-step method: (1) we copyright the
library, and (2) we offer you this license, which gives you legal
permission to copy, distribute and/or modify the library.

  To protect each distributor, we want to make it very clear that
there is no warranty for the free library.  Also, if the library is
modified by someone else and passed on, the recipients should know
that what they have is not the original version, so that the original
author's reputation will not be affected by problems that might be
introduced by others.

  Finally, software patents pose a constant threat to the existence of
any free program.  We wish to make sure that a company cannot
effectively restrict the users of a free program by obtaining a
restrictive license from a patent holder.  Therefore, we insist that
any patent license obtained for a version of the library must be
consistent with the full freedom of use specified in this license.

  Most GNU software, including some libraries, is covered by the
ordinary GNU General Public License.  This license, the GNU Lesser
General Public License, applies to certain designated libraries, and
is quite different from the ordinary General Public License.  We use
this license for certain libraries in order to permit linking those
libraries into non-free programs.

  When a program is linked with a library, whether statically or using
a shared library, the combination of the two is legally speaking a
combined work, a derivative of the original library.  The ordinary
General Public License therefore permits such linking only if the
entire combination fits its criteria of freedom.  The Lesser General
Public License permits more lax criteria for linking other code with
the library.

  We call this license the "Lesser" General Public License because it
does Less to protect the user's freedom than the ordinary General
Public License.  It also provides other free software developers Less
of an advantage over competing non-free programs.  These disadvantages
are the reason we use the ordinary General Public License for many
libraries.  However, the Lesser license provides advantages in certain
special circumstances.

  For example, on rare occasions, there may be a special need to
encourage the widest possible use of a certain library, so that it becomes
a de-facto standard.  To achieve this, non-free programs must be
allowed to use the library.  A more frequent case is that a free
library does the same job as widely used non-free libraries.  In this
case, there is little to gain by limiting the free library to free
software only, so we use the Lesser General Public License.

  In other cases, permission to use a particular library in non-free
programs enables a greater number of people to use a large body of
free software.  For example, permission to use the GNU C Library in
non-free programs enables many more people to use the whole GNU
operating system, as well as its variant, the GNU/Linux operating
system.

  Although the Lesser General Public License is Less protective of the
users' freedom, it does ensure that the user of a program that is
linked with the Library has the freedom and the wherewithal to run
that program using a modified version of the Library.

  The precise terms and conditions for copying, distribution and
modification follow.  Pay close attention to the difference between a
"work based on the library" and a "work that uses the library".  The
former contains code derived from the library, whereas the latter must
be combined with the library in order to run.

                  GNU LESSER GENERAL PUBLIC LICENSE
   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION

  0. This License Agreement applies to any software library or other
program which contains a notice placed by the copyright holder or
other authorized party saying it may be distributed under the terms of
this Lesser General Public License (also called "this License").
Each licensee is addressed as "you".

  A "library" means a collection of software functions and/or data
prepared so as to be conveniently linked with application programs
(which use some of those functions and data) to form executables.

  The "Library", below, refers to any such software library or work
which has been distributed under these terms.  A "work based on the
Library" means either the Library or any derivative work under
copyright law: that is to say, a work containing the Library or a
portion of it, either verbatim or with modifications and/or translated
straightforwardly into another language.  (Hereinafter, translation is
included without limitation in the term "modification".)

  "Source code" for a work means the preferred form of the work for
making modifications to it.  For a library, complete source code means
all the source code for all modules it contains, plus any associated
interface definition files, plus the scripts used to control compilation
and installation of the library.

  Activities other than copying, distribution and modification are not
covered by this License; they are outside its scope.  The act of
running a program using the Library is not restricted, and output from
such a program is covered only if its contents constitute a work based
on the Library (independent of the use of the Library in a tool for
writing it).  Whether that is true depends on what the Library does
and what the program that uses the Library does.
  
  1. You may copy and distribute verbatim copies of the Library's
complete source code as you receive it, in any medium, provided that
you conspicuously and appropriately publish on each copy an
appropriate copyright notice and disclaimer of warranty; keep intact
all the notices that refer to this License and to the absence of any
warranty; and distribute a copy of this License along with the
Library.

  You may charge a fee for the physical act of transferring a copy,
and you may at your option offer warranty protection in exchange for a
fee.

  2. You may modify your copy or copies of the Library or any portion
of it, thus forming a work based on the Library, and copy and
distribute such modifications or work under the terms of Section 1
above, provided that you also meet all of these conditions:

    a) The modified work must itself be a software library.

    b) You must cause the files modified to carry prominent notices
    stating that you changed the files and the date of any change.

    c) You must cause the whole of the work to be licensed at no
    charge to all third parties under the terms of this License.

    d) If a facility in the modified Library refers to a function or a
    table of data to be supplied by an application program that uses
    the facility, other than as an argument passed when the facility
    is invoked, then you must make a good faith effort to ensure that,
    in the event an application does not supply such function or
    table, the facility still operates, and performs whatever part of
    its purpose remains meaningful.

    (For example, a function in a library to compute square roots has
    a purpose that is entirely well-defined independent of the
    application.  Therefore, Subsection 2d requires that any
    application-supplied function or table used by this function must
    be optional: if the application does not supply it, the square
    root function must still compute square roots.)

These requirements apply to the modified work as a whole.  If
identifiable sections of that work are not derived from the Library,
and can be reasonably considered independent and separate works in
themselves, then this License, and its terms, do not apply to those
sections when you distribute them as separate works.  But when you
distribute the same sections as part of a whole which is a work based
on the Library, the distribution of the whole must be on the terms of
this License, whose permissions for other licensees extend to the
entire whole, and thus to each and every part regardless of who wrote
it.

Thus, it is not the intent of this section to claim rights or contest
your rights to work written entirely by you; rather, the intent is to
exercise the right to control the distribution of derivative or
collective works based on the Library.

In addition, mere aggregation of another work not based on the Library
with the Library (or with a work based on the Library) on a volume of
a storage or distribution medium does not bring the other work under
the scope of this License.

  3. You may opt to apply the terms of the ordinary GNU General Public
License instead of this License to a given copy of the Library.  To do
this, you must alter all the notices that refer to this License, so
that they refer to the ordinary GNU General Public License, version 2,
instead of to this License.  (If a newer version than version 2 of the
ordinary GNU General Public License has appeared, then you can specify
that version instead if you wish.)  Do not make any other change in
these notices.

  Once this change is made in a given copy, it is irreversible for
that copy, so the ordinary GNU General Public License applies to all
subsequent copies and derivative works made from that copy.

  This option is useful when you wish to copy part of the code of
the Library into a program that is not a library.

  4. You may copy and distribute the Library (or a portion or
derivative of it, under Section 2) in object code or executable form
under the terms of Sections 1 and 2 above provided that you accompany
it with the complete corresponding machine-readable source code, which
must be distributed under the terms of Sections 1 and 2 above on a
medium customarily used for software interchange.

  If distribution of object code is made by offering access to copy
from a designated place, then offering equivalent access to copy the
source code from the same place satisfies the requirement to
distribute the source code, even though third parties are not
compelled to copy the source along with the object code.

  5. A program that contains no derivative of any portion of the
Library, but is designed to work with the Library by being compiled or
linked with it, is called a "work that uses the Library".  Such a
work, in isolation, is not a derivative work of the Library, and
therefore falls outside the scope of this License.

  However, linking a "work that uses the Library" with the Library
creates an executable that is a derivative of the Library (because it
contains portions of the Library), rather than a "work that uses the
library".  The executable is therefore covered by this License.
Section 6 states terms for distribution of such executables.

  When a "work that uses the Library" uses material from a header file
that is part of the Library, the object code for the work may be a
derivative work of the Library even though the source code is not.
Whether this is true is especially significant if the work can be
linked without the Library, or if the work is itself a library.  The
threshold for this to be true is not precisely defined by law.

  If such an object file uses only numerical parameters, data
structure layouts and accessors, and small macros and small inline
functions (ten lines or less in length), then the use of the object
file is unrestricted, regardless of whether it is legally a derivative
work.  (Executables containing this object code plus portions of the
Library will still fall under Section 6.)

  Otherwise, if the work is a derivative of the Library, you may
distribute the object code for the work under the terms of Section 6.
Any executables containing that work also fall under Section 6,
whether or not they are linked directly with the Library itself.

  6. As an exception to the Sections above, you may also combine or
link a "work that uses the Library" with the Library to produce a
work containing portions of the Library, and distribute that work
under terms of your choice, provided that the terms permit
modification of the work for the customer's own use and reverse
engineering for debugging such modifications.

  You must give prominent notice with each copy of the work that the
Library is used in it and that the Library and its use are covered by
this License.  You must supply a copy of this License.  If the work
during execution displays copyright notices, you must include the
copyright notice for the Library among them, as well as a reference
directing the user to the copy of this License.  Also, you must do one
of these things:

    a) Accompany the work with the complete corresponding
    machine-readable source code for the Library including whatever
    changes were used in the work (which must be distributed under
    Sections 1 and 2 above); and, if the work is an executable linked
    with the Library, with the complete machine-readable "work that
    uses the Library", as object code and/or source code, so that the
    user can modify the Library and then relink to produce a modified
    executable containing the modified Library.  (It is understood
    that the user who changes the contents of definitions files in the
    Library will not necessarily be able to recompile the application
    to use the modified definitions.)

    b) Use a suitable shared library mechanism for linking with the
    Library.  A suitable mechanism is one that (1) uses at run time a
    copy of the library already present on the user's computer system,
    rather than copying library functions into the executable, and (2)
    will operate properly with a modified version of the library, if
    the user installs one, as long as the modified version is
    interface-compatible with the version that the work was made with.

    c) Accompany the work with a written offer, valid for at
    least three years, to give the same user the materials
    specified in Subsection 6a, above, for a charge no more
    than the cost of performing this distribution.

    d) If distribution of the work is made by offering access to copy
    from a designated place, offer equivalent access to copy the above
    specified materials from the same place.

    e) Verify that the user has already received a copy of these
    materials or that you have already sent this user a copy.

  For an executable, the required form of the "work that uses the
Library" must include any data and utility programs needed for
reproducing the executable from it.  However, as a special exception,
the materials to be distributed need not include anything that is
normally distributed (in either source or binary form) with the major
components (compiler, kernel, and so on) of the operating system on
which the executable runs, unless that component itself accompanies
the executable.

  It may happen that this requirement contradicts the license
restrictions of other proprietary libraries that do not normally
accompany the operating system.  Such a contradiction means you cannot
use both them and the Library together in an executable that you
distribute.

  7. You may place library facilities that are a work based on the
Library side-by-side in a single library together with other library
facilities not covered by this License, and distribute such a combined
library, provided that the separate distribution of the work based on
the Library and of the other library facilities is otherwise
permitted, and provided that you do these two things:

    a) Accompany the combined library with a copy of the same work
    based on the Library, uncombined with any other library
    facilities.  This must be distributed under the terms of the
    Sections above.

    b) Give prominent notice with the combined library of the fact
    that part of it is a work based on the Library, and explaining
    where to find the accompanying uncombined form of the same work.

  8. You may not copy, modify, sublicense, link with, or distribute
the Library except as expressly provided under this License.  Any
attempt otherwise to copy, modify, sublicense, link with, or
distribute the Library is void, and will automatically terminate your
rights under this License.  However, parties who have received copies,
or rights, from you under this License will not have their licenses
terminated so long as such parties remain in full compliance.

  9. You are not required to accept this License, since you have not
signed it.  However, nothing else grants you permission to modify or
distribute the Library or its derivative works.  These actions are
prohibited by law if you do not accept this License.  Therefore, by
modifying or distributing the Library (or any work based on the
Library), you indicate your acceptance of this License to do so, and
all its terms and conditions for copying, distributing or modifying
the Library or works based on it.

  10. Each time you redistribute the Library (or any work based on the
Library), the recipient automatically receives a license from the
original licensor to copy, distribute, link with or modify the Library
subject to these terms and conditions.  You may not impose any further
restrictions on the recipients' exercise of the rights granted herein.
You are not responsible for enforcing compliance by third parties with
this License.

  11. If, as a consequence of a court judgment or allegation of patent
infringement or for any other reason (not limited to patent issues),
conditions are imposed on you (whether by court order, agreement or
otherwise) that contradict the conditions of this License, they do not
excuse you from the conditions of this License.  If you cannot
distribute so as to satisfy simultaneously your obligations under this
License and any other pertinent obligations, then as a consequence you
may not distribute the Library at all.  For example, if a patent
license would not permit royalty-free redistribution of the Library by
all those who receive copies directly or indirectly through you, then
the only way you could satisfy both it and this License would be to
refrain entirely from distribution of the Library.

If any portion of this section is held invalid or unenforceable under any
particular circumstance, the balance of the section is intended to apply,
and the section as a whole is intended to apply in other circumstances.

It is not the purpose of this section to induce you to infringe any
patents or other property right claims or to contest validity of any
such claims; this section has the sole purpose of protecting the
integrity of the free software distribution system which is
implemented by public license practices.  Many people have made
generous contributions to the wide range of software distributed
through that system in reliance on consistent application of that
system; it is up to the author/donor to decide if he or she is willing
to distribute software through any other system and a licensee cannot
impose that choice.

This section is intended to make thoroughly clear what is believed to
be a consequence of the rest of this License.

  12. If the distribution and/or use of the Library is restricted in
certain countries either by patents or by copyrighted interfaces, the
original copyright holder who places the Library under this License may add
an explicit geographical distribution limitation excluding those countries,
so that distribution is permitted only in or among countries not thus
excluded.  In such case, this License incorporates the limitation as if
written in the body of this License.

  13. The Free Software Foundation may publish revised and/or new
versions of the Lesser General Public License from time to time.
Such new versions will be similar in spirit to the present version,
but may differ in detail to address new problems or concerns.

Each version is given a distinguishing version number.  If the Library
specifies a version number of this License which applies to it and
"any later version", you have the option of following the terms and
conditions either of that version or of any later version published by
the Free Software Foundation.  If the Library does not specify a
license version number, you may choose any version ever published by
the Free Software Foundation.

  14. If you wish to incorporate parts of the Library into other free
programs whose distribution conditions are incompatible with these,
write to the author to ask for permission.  For software which is
copyrighted by the Free Software Foundation, write to the Free
Software Foundation; we sometimes make exceptions for this.  Our
decision will be guided by the two goals of preserving the free status
of all derivatives of our free software and of promoting the sharing
and reuse of software generally.

                            NO WARRANTY

  15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO
WARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE LAW.
EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR
OTHER PARTIES PROVIDE THE LIBRARY "AS IS" WITHOUT WARRANTY OF ANY
KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE
LIBRARY IS WITH YOU.  SHOULD THE LIBRARY PROVE DEFECTIVE, YOU ASSUME
THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.

  16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN
WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY
AND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE LIABLE TO YOU
FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR
CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE
LIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING
RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A
FAILURE OF THE LIBRARY TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF
SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH
DAMAGES.

                     END OF TERMS AND CONDITIONS

           How to Apply These Terms to Your New Libraries

  If you develop a new library, and you want it to be of the greatest
possible use to the public, we recommend making it free software that
everyone can redistribute and change.  You can do so by permitting
redistribution under these terms (or, alternatively, under the terms of the
ordinary General Public License).

  To apply these terms, attach the following notices to the library.  It is
safest to attach them to the start of each source file to most effectively
convey the exclusion of warranty; and each file should have at least the
"copyright" line and a pointer to where the full notice is found.

    <one line to give the library's name and a brief idea of what it does.>
    Copyright (C) <year>  <name of author>

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

Also add information on how to contact you by electronic and paper mail.

You should also get your employer (if you work as a programmer) or your
school, if any, to sign a "copyright disclaimer" for the library, if
necessary.  Here is a sample; alter the names:

  Yoyodyne, Inc., hereby disclaims all copyright interest in the
  library `Frob' (a library for tweaking knobs) written by James Random Hacker.

  <signature of Ty Coon>, 1 April 1990
  Ty Coon, President of Vice

That's all there is to it!



// File: venv\Lib\site-packages\_yaml\__init__.py
----------------------------------------
# This is a stub package designed to roughly emulate the _yaml
# extension module, which previously existed as a standalone module
# and has been moved into the `yaml` package namespace.
# It does not perfectly mimic its old counterpart, but should get
# close enough for anyone who's relying on it even when they shouldn't.
import yaml

# in some circumstances, the yaml module we imoprted may be from a different version, so we need
# to tread carefully when poking at it here (it may not have the attributes we expect)
if not getattr(yaml, '__with_libyaml__', False):
    from sys import version_info

    exc = ModuleNotFoundError if version_info >= (3, 6) else ImportError
    raise exc("No module named '_yaml'")
else:
    from yaml._yaml import *
    import warnings
    warnings.warn(
        'The _yaml extension module is now located at yaml._yaml'
        ' and its location is subject to change.  To use the'
        ' LibYAML-based parser and emitter, import from `yaml`:'
        ' `from yaml import CLoader as Loader, CDumper as Dumper`.',
        DeprecationWarning
    )
    del warnings
    # Don't `del yaml` here because yaml is actually an existing
    # namespace member of _yaml.

__name__ = '_yaml'
# If the module is top-level (i.e. not a part of any specific package)
# then the attribute should be set to ''.
# https://docs.python.org/3.8/library/types.html
__package__ = ''


// File: venv\Lib\site-packages\antlr4\__init__.py
----------------------------------------
from antlr4.Token import Token
from antlr4.InputStream import InputStream
from antlr4.FileStream import FileStream
from antlr4.StdinStream import StdinStream
from antlr4.BufferedTokenStream import TokenStream
from antlr4.CommonTokenStream import CommonTokenStream
from antlr4.Lexer import Lexer
from antlr4.Parser import Parser
from antlr4.dfa.DFA import DFA
from antlr4.atn.ATN import ATN
from antlr4.atn.ATNDeserializer import ATNDeserializer
from antlr4.atn.LexerATNSimulator import LexerATNSimulator
from antlr4.atn.ParserATNSimulator import ParserATNSimulator
from antlr4.atn.PredictionMode import PredictionMode
from antlr4.PredictionContext import PredictionContextCache
from antlr4.ParserRuleContext import RuleContext, ParserRuleContext
from antlr4.tree.Tree import ParseTreeListener, ParseTreeVisitor, ParseTreeWalker, TerminalNode, ErrorNode, RuleNode
from antlr4.error.Errors import RecognitionException, IllegalStateException, NoViableAltException
from antlr4.error.ErrorStrategy import BailErrorStrategy
from antlr4.error.DiagnosticErrorListener import DiagnosticErrorListener
from antlr4.Utils import str_list


// File: venv\Lib\site-packages\antlr4\atn\__init__.py
----------------------------------------
__author__ = 'ericvergnaud'


// File: venv\Lib\site-packages\antlr4\atn\ATN.py
----------------------------------------
# Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
# Use of this file is governed by the BSD 3-clause license that
# can be found in the LICENSE.txt file in the project root.
#/
from antlr4.IntervalSet import IntervalSet

from antlr4.RuleContext import RuleContext

from antlr4.Token import Token
from antlr4.atn.ATNType import ATNType
from antlr4.atn.ATNState import ATNState, DecisionState


class ATN(object):
    __slots__ = (
        'grammarType', 'maxTokenType', 'states', 'decisionToState',
        'ruleToStartState', 'ruleToStopState', 'modeNameToStartState',
        'ruleToTokenType', 'lexerActions', 'modeToStartState'
    )

    INVALID_ALT_NUMBER = 0

    # Used for runtime deserialization of ATNs from strings#/
    def __init__(self, grammarType:ATNType , maxTokenType:int ):
        # The type of the ATN.
        self.grammarType = grammarType
        # The maximum value for any symbol recognized by a transition in the ATN.
        self.maxTokenType = maxTokenType
        self.states = []
        # Each subrule/rule is a decision point and we must track them so we
        #  can go back later and build DFA predictors for them.  This includes
        #  all the rules, subrules, optional blocks, ()+, ()* etc...
        self.decisionToState = []
        # Maps from rule index to starting state number.
        self.ruleToStartState = []
        # Maps from rule index to stop state number.
        self.ruleToStopState = None
        self.modeNameToStartState = dict()
        # For lexer ATNs, this maps the rule index to the resulting token type.
        # For parser ATNs, this maps the rule index to the generated bypass token
        # type if the
        # {@link ATNDeserializationOptions#isGenerateRuleBypassTransitions}
        # deserialization option was specified; otherwise, this is {@code null}.
        self.ruleToTokenType = None
        # For lexer ATNs, this is an array of {@link LexerAction} objects which may
        # be referenced by action transitions in the ATN.
        self.lexerActions = None
        self.modeToStartState = []

    # Compute the set of valid tokens that can occur starting in state {@code s}.
    #  If {@code ctx} is null, the set of tokens will not include what can follow
    #  the rule surrounding {@code s}. In other words, the set will be
    #  restricted to tokens reachable staying within {@code s}'s rule.
    def nextTokensInContext(self, s:ATNState, ctx:RuleContext):
        from antlr4.LL1Analyzer import LL1Analyzer
        anal = LL1Analyzer(self)
        return anal.LOOK(s, ctx=ctx)

    # Compute the set of valid tokens that can occur starting in {@code s} and
    # staying in same rule. {@link Token#EPSILON} is in set if we reach end of
    # rule.
    def nextTokensNoContext(self, s:ATNState):
        if s.nextTokenWithinRule is not None:
            return s.nextTokenWithinRule
        s.nextTokenWithinRule = self.nextTokensInContext(s, None)
        s.nextTokenWithinRule.readonly = True
        return s.nextTokenWithinRule

    def nextTokens(self, s:ATNState, ctx:RuleContext = None):
        if ctx==None:
            return self.nextTokensNoContext(s)
        else:
            return self.nextTokensInContext(s, ctx)

    def addState(self, state:ATNState):
        if state is not None:
            state.atn = self
            state.stateNumber = len(self.states)
        self.states.append(state)

    def removeState(self, state:ATNState):
        self.states[state.stateNumber] = None # just free mem, don't shift states in list

    def defineDecisionState(self, s:DecisionState):
        self.decisionToState.append(s)
        s.decision = len(self.decisionToState)-1
        return s.decision

    def getDecisionState(self, decision:int):
        if len(self.decisionToState)==0:
            return None
        else:
            return self.decisionToState[decision]

    # Computes the set of input symbols which could follow ATN state number
    # {@code stateNumber} in the specified full {@code context}. This method
    # considers the complete parser context, but does not evaluate semantic
    # predicates (i.e. all predicates encountered during the calculation are
    # assumed true). If a path in the ATN exists from the starting state to the
    # {@link RuleStopState} of the outermost context without matching any
    # symbols, {@link Token#EOF} is added to the returned set.
    #
    # <p>If {@code context} is {@code null}, it is treated as
    # {@link ParserRuleContext#EMPTY}.</p>
    #
    # @param stateNumber the ATN state number
    # @param context the full parse context
    # @return The set of potentially valid input symbols which could follow the
    # specified state in the specified context.
    # @throws IllegalArgumentException if the ATN does not contain a state with
    # number {@code stateNumber}
    #/
    def getExpectedTokens(self, stateNumber:int, ctx:RuleContext ):
        if stateNumber < 0 or stateNumber >= len(self.states):
            raise Exception("Invalid state number.")
        s = self.states[stateNumber]
        following = self.nextTokens(s)
        if Token.EPSILON not in following:
            return following
        expected = IntervalSet()
        expected.addSet(following)
        expected.removeOne(Token.EPSILON)
        while (ctx != None and ctx.invokingState >= 0 and Token.EPSILON in following):
            invokingState = self.states[ctx.invokingState]
            rt = invokingState.transitions[0]
            following = self.nextTokens(rt.followState)
            expected.addSet(following)
            expected.removeOne(Token.EPSILON)
            ctx = ctx.parentCtx
        if Token.EPSILON in following:
            expected.addOne(Token.EOF)
        return expected


// File: venv\Lib\site-packages\antlr4\atn\ATNConfig.py
----------------------------------------
#
# Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
# Use of this file is governed by the BSD 3-clause license that
# can be found in the LICENSE.txt file in the project root.
#/

# A tuple: (ATN state, predicted alt, syntactic, semantic context).
#  The syntactic context is a graph-structured stack node whose
#  path(s) to the root is the rule invocation(s)
#  chain used to arrive at the state.  The semantic context is
#  the tree of semantic predicates encountered before reaching
#  an ATN state.
#/
from io import StringIO
from antlr4.PredictionContext import PredictionContext
from antlr4.atn.ATNState import ATNState, DecisionState
from antlr4.atn.LexerActionExecutor import LexerActionExecutor
from antlr4.atn.SemanticContext import SemanticContext

# need a forward declaration
ATNConfig = None

class ATNConfig(object):
    __slots__ = (
        'state', 'alt', 'context', 'semanticContext', 'reachesIntoOuterContext',
        'precedenceFilterSuppressed'
    )

    def __init__(self, state:ATNState=None, alt:int=None, context:PredictionContext=None, semantic:SemanticContext=None, config:ATNConfig=None):
        if config is not None:
            if state is None:
                state = config.state
            if alt is None:
                alt = config.alt
            if context is None:
                context = config.context
            if semantic is None:
                semantic = config.semanticContext
        if semantic is None:
            semantic = SemanticContext.NONE
        # The ATN state associated with this configuration#/
        self.state = state
        # What alt (or lexer rule) is predicted by this configuration#/
        self.alt = alt
        # The stack of invoking states leading to the rule/states associated
        #  with this config.  We track only those contexts pushed during
        #  execution of the ATN simulator.
        self.context = context
        self.semanticContext = semantic
        # We cannot execute predicates dependent upon local context unless
        # we know for sure we are in the correct context. Because there is
        # no way to do this efficiently, we simply cannot evaluate
        # dependent predicates unless we are in the rule that initially
        # invokes the ATN simulator.
        #
        # closure() tracks the depth of how far we dip into the
        # outer context: depth &gt; 0.  Note that it may not be totally
        # accurate depth since I don't ever decrement. TODO: make it a boolean then
        self.reachesIntoOuterContext = 0 if config is None else config.reachesIntoOuterContext
        self.precedenceFilterSuppressed = False if config is None else config.precedenceFilterSuppressed

    # An ATN configuration is equal to another if both have
    #  the same state, they predict the same alternative, and
    #  syntactic/semantic contexts are the same.
    #/
    def __eq__(self, other):
        if self is other:
            return True
        elif not isinstance(other, ATNConfig):
            return False
        else:
            return self.state.stateNumber==other.state.stateNumber \
                and self.alt==other.alt \
                and ((self.context is other.context) or (self.context==other.context)) \
                and self.semanticContext==other.semanticContext \
                and self.precedenceFilterSuppressed==other.precedenceFilterSuppressed

    def __hash__(self):
        return hash((self.state.stateNumber, self.alt, self.context, self.semanticContext))

    def hashCodeForConfigSet(self):
        return hash((self.state.stateNumber, self.alt, hash(self.semanticContext)))

    def equalsForConfigSet(self, other):
        if self is other:
            return True
        elif not isinstance(other, ATNConfig):
            return False
        else:
            return self.state.stateNumber==other.state.stateNumber \
                and self.alt==other.alt \
                and self.semanticContext==other.semanticContext

    def __str__(self):
        with StringIO() as buf:
            buf.write('(')
            buf.write(str(self.state))
            buf.write(",")
            buf.write(str(self.alt))
            if self.context is not None:
                buf.write(",[")
                buf.write(str(self.context))
                buf.write("]")
            if self.semanticContext is not None and self.semanticContext is not SemanticContext.NONE:
                buf.write(",")
                buf.write(str(self.semanticContext))
            if self.reachesIntoOuterContext>0:
                buf.write(",up=")
                buf.write(str(self.reachesIntoOuterContext))
            buf.write(')')
            return buf.getvalue()

# need a forward declaration
LexerATNConfig = None

class LexerATNConfig(ATNConfig):
    __slots__ = ('lexerActionExecutor', 'passedThroughNonGreedyDecision')

    def __init__(self, state:ATNState, alt:int=None, context:PredictionContext=None, semantic:SemanticContext=SemanticContext.NONE,
                 lexerActionExecutor:LexerActionExecutor=None, config:LexerATNConfig=None):
        super().__init__(state=state, alt=alt, context=context, semantic=semantic, config=config)
        if config is not None:
            if lexerActionExecutor is None:
                lexerActionExecutor = config.lexerActionExecutor
        # This is the backing field for {@link #getLexerActionExecutor}.
        self.lexerActionExecutor = lexerActionExecutor
        self.passedThroughNonGreedyDecision = False if config is None else self.checkNonGreedyDecision(config, state)

    def __hash__(self):
        return hash((self.state.stateNumber, self.alt, self.context,
                self.semanticContext, self.passedThroughNonGreedyDecision,
                self.lexerActionExecutor))

    def __eq__(self, other):
        if self is other:
            return True
        elif not isinstance(other, LexerATNConfig):
            return False
        if self.passedThroughNonGreedyDecision != other.passedThroughNonGreedyDecision:
            return False
        if not(self.lexerActionExecutor == other.lexerActionExecutor):
            return False
        return super().__eq__(other)



    def hashCodeForConfigSet(self):
        return hash(self)



    def equalsForConfigSet(self, other):
        return self==other



    def checkNonGreedyDecision(self, source:LexerATNConfig, target:ATNState):
        return source.passedThroughNonGreedyDecision \
            or isinstance(target, DecisionState) and target.nonGreedy


// File: venv\Lib\site-packages\antlr4\atn\ATNConfigSet.py
----------------------------------------
#
# Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
# Use of this file is governed by the BSD 3-clause license that
# can be found in the LICENSE.txt file in the project root.

#
# Specialized {@link Set}{@code <}{@link ATNConfig}{@code >} that can track
# info about the set, with support for combining similar configurations using a
# graph-structured stack.
#/
from io import StringIO
from functools import reduce
from antlr4.PredictionContext import PredictionContext, merge
from antlr4.Utils import str_list
from antlr4.atn.ATN import ATN
from antlr4.atn.ATNConfig import ATNConfig
from antlr4.atn.SemanticContext import SemanticContext
from antlr4.error.Errors import UnsupportedOperationException, IllegalStateException

ATNSimulator = None

class ATNConfigSet(object):
    __slots__ = (
        'configLookup', 'fullCtx', 'readonly', 'configs', 'uniqueAlt',
        'conflictingAlts', 'hasSemanticContext', 'dipsIntoOuterContext',
        'cachedHashCode'
    )

    #
    # The reason that we need this is because we don't want the hash map to use
    # the standard hash code and equals. We need all configurations with the same
    # {@code (s,i,_,semctx)} to be equal. Unfortunately, this key effectively doubles
    # the number of objects associated with ATNConfigs. The other solution is to
    # use a hash table that lets us specify the equals/hashcode operation.

    def __init__(self, fullCtx:bool=True):
        # All configs but hashed by (s, i, _, pi) not including context. Wiped out
        # when we go readonly as this set becomes a DFA state.
        self.configLookup = dict()
        # Indicates that this configuration set is part of a full context
        #  LL prediction. It will be used to determine how to merge $. With SLL
        #  it's a wildcard whereas it is not for LL context merge.
        self.fullCtx = fullCtx
        # Indicates that the set of configurations is read-only. Do not
        #  allow any code to manipulate the set; DFA states will point at
        #  the sets and they must not change. This does not protect the other
        #  fields; in particular, conflictingAlts is set after
        #  we've made this readonly.
        self.readonly = False
        # Track the elements as they are added to the set; supports get(i)#/
        self.configs = []

        # TODO: these fields make me pretty uncomfortable but nice to pack up info together, saves recomputation
        # TODO: can we track conflicts as they are added to save scanning configs later?
        self.uniqueAlt = 0
        self.conflictingAlts = None

        # Used in parser and lexer. In lexer, it indicates we hit a pred
        # while computing a closure operation.  Don't make a DFA state from this.
        self.hasSemanticContext = False
        self.dipsIntoOuterContext = False

        self.cachedHashCode = -1

    def __iter__(self):
        return self.configs.__iter__()

    # Adding a new config means merging contexts with existing configs for
    # {@code (s, i, pi, _)}, where {@code s} is the
    # {@link ATNConfig#state}, {@code i} is the {@link ATNConfig#alt}, and
    # {@code pi} is the {@link ATNConfig#semanticContext}. We use
    # {@code (s,i,pi)} as key.
    #
    # <p>This method updates {@link #dipsIntoOuterContext} and
    # {@link #hasSemanticContext} when necessary.</p>
    #/
    def add(self, config:ATNConfig, mergeCache=None):
        if self.readonly:
            raise Exception("This set is readonly")
        if config.semanticContext is not SemanticContext.NONE:
            self.hasSemanticContext = True
        if config.reachesIntoOuterContext > 0:
            self.dipsIntoOuterContext = True
        existing = self.getOrAdd(config)
        if existing is config:
            self.cachedHashCode = -1
            self.configs.append(config)  # track order here
            return True
        # a previous (s,i,pi,_), merge with it and save result
        rootIsWildcard = not self.fullCtx
        merged = merge(existing.context, config.context, rootIsWildcard, mergeCache)
        # no need to check for existing.context, config.context in cache
        # since only way to create new graphs is "call rule" and here.
        # We cache at both places.
        existing.reachesIntoOuterContext = max(existing.reachesIntoOuterContext, config.reachesIntoOuterContext)
        # make sure to preserve the precedence filter suppression during the merge
        if config.precedenceFilterSuppressed:
            existing.precedenceFilterSuppressed = True
        existing.context = merged # replace context; no need to alt mapping
        return True

    def getOrAdd(self, config:ATNConfig):
        h = config.hashCodeForConfigSet()
        l = self.configLookup.get(h, None)
        if l is not None:
            r = next((cfg for cfg in l if config.equalsForConfigSet(cfg)), None)
            if r is not None:
                return r
        if l is None:
            l = [config]
            self.configLookup[h] = l
        else:
            l.append(config)
        return config

    def getStates(self):
        return set(c.state for c in self.configs)

    def getPredicates(self):
        return list(cfg.semanticContext for cfg in self.configs if cfg.semanticContext!=SemanticContext.NONE)

    def get(self, i:int):
        return self.configs[i]

    def optimizeConfigs(self, interpreter:ATNSimulator):
        if self.readonly:
            raise IllegalStateException("This set is readonly")
        if len(self.configs)==0:
            return
        for config in self.configs:
            config.context = interpreter.getCachedContext(config.context)

    def addAll(self, coll:list):
        for c in coll:
            self.add(c)
        return False

    def __eq__(self, other):
        if self is other:
            return True
        elif not isinstance(other, ATNConfigSet):
            return False

        same = self.configs is not None and \
            self.configs==other.configs and \
            self.fullCtx == other.fullCtx and \
            self.uniqueAlt == other.uniqueAlt and \
            self.conflictingAlts == other.conflictingAlts and \
            self.hasSemanticContext == other.hasSemanticContext and \
            self.dipsIntoOuterContext == other.dipsIntoOuterContext

        return same

    def __hash__(self):
        if self.readonly:
            if self.cachedHashCode == -1:
                self.cachedHashCode = self.hashConfigs()
            return self.cachedHashCode
        return self.hashConfigs()

    def hashConfigs(self):
        return reduce(lambda h, cfg: hash((h, cfg)), self.configs, 0)

    def __len__(self):
        return len(self.configs)

    def isEmpty(self):
        return len(self.configs)==0

    def __contains__(self, config):
        if self.configLookup is None:
            raise UnsupportedOperationException("This method is not implemented for readonly sets.")
        h = config.hashCodeForConfigSet()
        l = self.configLookup.get(h, None)
        if l is not None:
            for c in l:
                if config.equalsForConfigSet(c):
                    return True
        return False

    def clear(self):
        if self.readonly:
            raise IllegalStateException("This set is readonly")
        self.configs.clear()
        self.cachedHashCode = -1
        self.configLookup.clear()

    def setReadonly(self, readonly:bool):
        self.readonly = readonly
        self.configLookup = None # can't mod, no need for lookup cache

    def __str__(self):
        with StringIO() as buf:
            buf.write(str_list(self.configs))
            if self.hasSemanticContext:
                buf.write(",hasSemanticContext=")
                buf.write(str(self.hasSemanticContext))
            if self.uniqueAlt!=ATN.INVALID_ALT_NUMBER:
                buf.write(",uniqueAlt=")
                buf.write(str(self.uniqueAlt))
            if self.conflictingAlts is not None:
                buf.write(",conflictingAlts=")
                buf.write(str(self.conflictingAlts))
            if self.dipsIntoOuterContext:
                buf.write(",dipsIntoOuterContext")
            return buf.getvalue()


class OrderedATNConfigSet(ATNConfigSet):

    def __init__(self):
        super().__init__()


// File: venv\Lib\site-packages\antlr4\atn\ATNDeserializationOptions.py
----------------------------------------
# Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
# Use of this file is governed by the BSD 3-clause license that
# can be found in the LICENSE.txt file in the project root.

# need a forward declaration
ATNDeserializationOptions = None

class ATNDeserializationOptions(object):
    __slots__ = ('readonly', 'verifyATN', 'generateRuleBypassTransitions')

    defaultOptions = None

    def __init__(self, copyFrom:ATNDeserializationOptions = None):
        self.readonly = False
        self.verifyATN = True if copyFrom is None else copyFrom.verifyATN
        self.generateRuleBypassTransitions = False if copyFrom is None else copyFrom.generateRuleBypassTransitions

    def __setattr__(self, key, value):
        if key!="readonly" and self.readonly:
            raise Exception("The object is read only.")
        super(type(self), self).__setattr__(key,value)

ATNDeserializationOptions.defaultOptions = ATNDeserializationOptions()
ATNDeserializationOptions.defaultOptions.readonly = True


// File: venv\Lib\site-packages\antlr4\atn\ATNDeserializer.py
----------------------------------------
# Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
# Use of this file is governed by the BSD 3-clause license that
# can be found in the LICENSE.txt file in the project root.
#/
from uuid import UUID
from io import StringIO
from typing import Callable
from antlr4.Token import Token
from antlr4.atn.ATN import ATN
from antlr4.atn.ATNType import ATNType
from antlr4.atn.ATNState import *
from antlr4.atn.Transition import *
from antlr4.atn.LexerAction import *
from antlr4.atn.ATNDeserializationOptions import ATNDeserializationOptions

# This is the earliest supported serialized UUID.
BASE_SERIALIZED_UUID = UUID("AADB8D7E-AEEF-4415-AD2B-8204D6CF042E")

# This UUID indicates the serialized ATN contains two sets of
# IntervalSets, where the second set's values are encoded as
# 32-bit integers to support the full Unicode SMP range up to U+10FFFF.
ADDED_UNICODE_SMP = UUID("59627784-3BE5-417A-B9EB-8131A7286089")

# This list contains all of the currently supported UUIDs, ordered by when
# the feature first appeared in this branch.
SUPPORTED_UUIDS = [ BASE_SERIALIZED_UUID, ADDED_UNICODE_SMP ]

SERIALIZED_VERSION = 3

# This is the current serialized UUID.
SERIALIZED_UUID = ADDED_UNICODE_SMP

class ATNDeserializer (object):
    __slots__ = ('deserializationOptions', 'data', 'pos', 'uuid')

    def __init__(self, options : ATNDeserializationOptions = None):
        if options is None:
            options = ATNDeserializationOptions.defaultOptions
        self.deserializationOptions = options

    # Determines if a particular serialized representation of an ATN supports
    # a particular feature, identified by the {@link UUID} used for serializing
    # the ATN at the time the feature was first introduced.
    #
    # @param feature The {@link UUID} marking the first time the feature was
    # supported in the serialized ATN.
    # @param actualUuid The {@link UUID} of the actual serialized ATN which is
    # currently being deserialized.
    # @return {@code true} if the {@code actualUuid} value represents a
    # serialized ATN at or after the feature identified by {@code feature} was
    # introduced; otherwise, {@code false}.

    def isFeatureSupported(self, feature : UUID , actualUuid : UUID ):
        idx1 = SUPPORTED_UUIDS.index(feature)
        if idx1<0:
            return False
        idx2 = SUPPORTED_UUIDS.index(actualUuid)
        return idx2 >= idx1

    def deserialize(self, data : str):
        self.reset(data)
        self.checkVersion()
        self.checkUUID()
        atn = self.readATN()
        self.readStates(atn)
        self.readRules(atn)
        self.readModes(atn)
        sets = []
        # First, read all sets with 16-bit Unicode code points <= U+FFFF.
        self.readSets(atn, sets, self.readInt)
        # Next, if the ATN was serialized with the Unicode SMP feature,
        # deserialize sets with 32-bit arguments <= U+10FFFF.
        if self.isFeatureSupported(ADDED_UNICODE_SMP, self.uuid):
            self.readSets(atn, sets, self.readInt32)
        self.readEdges(atn, sets)
        self.readDecisions(atn)
        self.readLexerActions(atn)
        self.markPrecedenceDecisions(atn)
        self.verifyATN(atn)
        if self.deserializationOptions.generateRuleBypassTransitions \
                and atn.grammarType == ATNType.PARSER:
            self.generateRuleBypassTransitions(atn)
            # re-verify after modification
            self.verifyATN(atn)
        return atn

    def reset(self, data:str):
        def adjust(c):
            v = ord(c)
            return v-2 if v>1 else v + 65533
        temp = [ adjust(c) for c in data ]
        # don't adjust the first value since that's the version number
        temp[0] = ord(data[0])
        self.data = temp
        self.pos = 0

    def checkVersion(self):
        version = self.readInt()
        if version != SERIALIZED_VERSION:
            raise Exception("Could not deserialize ATN with version " + str(version) + " (expected " + str(SERIALIZED_VERSION) + ").")

    def checkUUID(self):
        uuid = self.readUUID()
        if not uuid in SUPPORTED_UUIDS:
            raise Exception("Could not deserialize ATN with UUID: " + str(uuid) + \
                            " (expected " + str(SERIALIZED_UUID) + " or a legacy UUID).", uuid, SERIALIZED_UUID)
        self.uuid = uuid

    def readATN(self):
        idx = self.readInt()
        grammarType = ATNType.fromOrdinal(idx)
        maxTokenType = self.readInt()
        return ATN(grammarType, maxTokenType)

    def readStates(self, atn:ATN):
        loopBackStateNumbers = []
        endStateNumbers = []
        nstates = self.readInt()
        for i in range(0, nstates):
            stype = self.readInt()
            # ignore bad type of states
            if stype==ATNState.INVALID_TYPE:
                atn.addState(None)
                continue
            ruleIndex = self.readInt()
            if ruleIndex == 0xFFFF:
                ruleIndex = -1

            s = self.stateFactory(stype, ruleIndex)
            if stype == ATNState.LOOP_END: # special case
                loopBackStateNumber = self.readInt()
                loopBackStateNumbers.append((s, loopBackStateNumber))
            elif isinstance(s, BlockStartState):
                endStateNumber = self.readInt()
                endStateNumbers.append((s, endStateNumber))

            atn.addState(s)

        # delay the assignment of loop back and end states until we know all the state instances have been initialized
        for pair in loopBackStateNumbers:
            pair[0].loopBackState = atn.states[pair[1]]

        for pair in endStateNumbers:
            pair[0].endState = atn.states[pair[1]]

        numNonGreedyStates = self.readInt()
        for i in range(0, numNonGreedyStates):
            stateNumber = self.readInt()
            atn.states[stateNumber].nonGreedy = True

        numPrecedenceStates = self.readInt()
        for i in range(0, numPrecedenceStates):
            stateNumber = self.readInt()
            atn.states[stateNumber].isPrecedenceRule = True

    def readRules(self, atn:ATN):
        nrules = self.readInt()
        if atn.grammarType == ATNType.LEXER:
            atn.ruleToTokenType = [0] * nrules

        atn.ruleToStartState = [0] * nrules
        for i in range(0, nrules):
            s = self.readInt()
            startState = atn.states[s]
            atn.ruleToStartState[i] = startState
            if atn.grammarType == ATNType.LEXER:
                tokenType = self.readInt()
                if tokenType == 0xFFFF:
                    tokenType = Token.EOF

                atn.ruleToTokenType[i] = tokenType

        atn.ruleToStopState = [0] * nrules
        for state in atn.states:
            if not isinstance(state, RuleStopState):
                continue
            atn.ruleToStopState[state.ruleIndex] = state
            atn.ruleToStartState[state.ruleIndex].stopState = state

    def readModes(self, atn:ATN):
        nmodes = self.readInt()
        for i in range(0, nmodes):
            s = self.readInt()
            atn.modeToStartState.append(atn.states[s])

    def readSets(self, atn:ATN, sets:list, readUnicode:Callable[[], int]):
        m = self.readInt()
        for i in range(0, m):
            iset = IntervalSet()
            sets.append(iset)
            n = self.readInt()
            containsEof = self.readInt()
            if containsEof!=0:
                iset.addOne(-1)
            for j in range(0, n):
                i1 = readUnicode()
                i2 = readUnicode()
                iset.addRange(range(i1, i2 + 1)) # range upper limit is exclusive

    def readEdges(self, atn:ATN, sets:list):
        nedges = self.readInt()
        for i in range(0, nedges):
            src = self.readInt()
            trg = self.readInt()
            ttype = self.readInt()
            arg1 = self.readInt()
            arg2 = self.readInt()
            arg3 = self.readInt()
            trans = self.edgeFactory(atn, ttype, src, trg, arg1, arg2, arg3, sets)
            srcState = atn.states[src]
            srcState.addTransition(trans)

        # edges for rule stop states can be derived, so they aren't serialized
        for state in atn.states:
            for i in range(0, len(state.transitions)):
                t = state.transitions[i]
                if not isinstance(t, RuleTransition):
                    continue
                outermostPrecedenceReturn = -1
                if atn.ruleToStartState[t.target.ruleIndex].isPrecedenceRule:
                    if t.precedence == 0:
                        outermostPrecedenceReturn = t.target.ruleIndex
                trans = EpsilonTransition(t.followState, outermostPrecedenceReturn)
                atn.ruleToStopState[t.target.ruleIndex].addTransition(trans)

        for state in atn.states:
            if isinstance(state, BlockStartState):
                # we need to know the end state to set its start state
                if state.endState is None:
                    raise Exception("IllegalState")
                # block end states can only be associated to a single block start state
                if state.endState.startState is not None:
                    raise Exception("IllegalState")
                state.endState.startState = state

            if isinstance(state, PlusLoopbackState):
                for i in range(0, len(state.transitions)):
                    target = state.transitions[i].target
                    if isinstance(target, PlusBlockStartState):
                        target.loopBackState = state
            elif isinstance(state, StarLoopbackState):
                for i in range(0, len(state.transitions)):
                    target = state.transitions[i].target
                    if isinstance(target, StarLoopEntryState):
                        target.loopBackState = state

    def readDecisions(self, atn:ATN):
        ndecisions = self.readInt()
        for i in range(0, ndecisions):
            s = self.readInt()
            decState = atn.states[s]
            atn.decisionToState.append(decState)
            decState.decision = i

    def readLexerActions(self, atn:ATN):
        if atn.grammarType == ATNType.LEXER:
            count = self.readInt()
            atn.lexerActions = [ None ] * count
            for i in range(0, count):
                actionType = self.readInt()
                data1 = self.readInt()
                if data1 == 0xFFFF:
                    data1 = -1
                data2 = self.readInt()
                if data2 == 0xFFFF:
                    data2 = -1
                lexerAction = self.lexerActionFactory(actionType, data1, data2)
                atn.lexerActions[i] = lexerAction

    def generateRuleBypassTransitions(self, atn:ATN):

        count = len(atn.ruleToStartState)
        atn.ruleToTokenType = [ 0 ] * count
        for i in range(0, count):
            atn.ruleToTokenType[i] = atn.maxTokenType + i + 1

        for i in range(0, count):
            self.generateRuleBypassTransition(atn, i)

    def generateRuleBypassTransition(self, atn:ATN, idx:int):

        bypassStart = BasicBlockStartState()
        bypassStart.ruleIndex = idx
        atn.addState(bypassStart)

        bypassStop = BlockEndState()
        bypassStop.ruleIndex = idx
        atn.addState(bypassStop)

        bypassStart.endState = bypassStop
        atn.defineDecisionState(bypassStart)

        bypassStop.startState = bypassStart

        excludeTransition = None

        if atn.ruleToStartState[idx].isPrecedenceRule:
            # wrap from the beginning of the rule to the StarLoopEntryState
            endState = None
            for state in atn.states:
                if self.stateIsEndStateFor(state, idx):
                    endState = state
                    excludeTransition = state.loopBackState.transitions[0]
                    break

            if excludeTransition is None:
                raise Exception("Couldn't identify final state of the precedence rule prefix section.")

        else:

            endState = atn.ruleToStopState[idx]

        # all non-excluded transitions that currently target end state need to target blockEnd instead
        for state in atn.states:
            for transition in state.transitions:
                if transition == excludeTransition:
                    continue
                if transition.target == endState:
                    transition.target = bypassStop

        # all transitions leaving the rule start state need to leave blockStart instead
        ruleToStartState = atn.ruleToStartState[idx]
        count = len(ruleToStartState.transitions)
        while count > 0:
            bypassStart.addTransition(ruleToStartState.transitions[count-1])
            del ruleToStartState.transitions[-1]

        # link the new states
        atn.ruleToStartState[idx].addTransition(EpsilonTransition(bypassStart))
        bypassStop.addTransition(EpsilonTransition(endState))

        matchState = BasicState()
        atn.addState(matchState)
        matchState.addTransition(AtomTransition(bypassStop, atn.ruleToTokenType[idx]))
        bypassStart.addTransition(EpsilonTransition(matchState))


    def stateIsEndStateFor(self, state:ATNState, idx:int):
        if state.ruleIndex != idx:
            return None
        if not isinstance(state, StarLoopEntryState):
            return None

        maybeLoopEndState = state.transitions[len(state.transitions) - 1].target
        if not isinstance(maybeLoopEndState, LoopEndState):
            return None

        if maybeLoopEndState.epsilonOnlyTransitions and \
                isinstance(maybeLoopEndState.transitions[0].target, RuleStopState):
            return state
        else:
            return None


    #
    # Analyze the {@link StarLoopEntryState} states in the specified ATN to set
    # the {@link StarLoopEntryState#isPrecedenceDecision} field to the
    # correct value.
    #
    # @param atn The ATN.
    #
    def markPrecedenceDecisions(self, atn:ATN):
        for state in atn.states:
            if not isinstance(state, StarLoopEntryState):
                continue

            # We analyze the ATN to determine if this ATN decision state is the
            # decision for the closure block that determines whether a
            # precedence rule should continue or complete.
            #
            if atn.ruleToStartState[state.ruleIndex].isPrecedenceRule:
                maybeLoopEndState = state.transitions[len(state.transitions) - 1].target
                if isinstance(maybeLoopEndState, LoopEndState):
                    if maybeLoopEndState.epsilonOnlyTransitions and \
                            isinstance(maybeLoopEndState.transitions[0].target, RuleStopState):
                        state.isPrecedenceDecision = True

    def verifyATN(self, atn:ATN):
        if not self.deserializationOptions.verifyATN:
            return
        # verify assumptions
        for state in atn.states:
            if state is None:
                continue

            self.checkCondition(state.epsilonOnlyTransitions or len(state.transitions) <= 1)

            if isinstance(state, PlusBlockStartState):
                self.checkCondition(state.loopBackState is not None)

            if isinstance(state, StarLoopEntryState):
                self.checkCondition(state.loopBackState is not None)
                self.checkCondition(len(state.transitions) == 2)

                if isinstance(state.transitions[0].target, StarBlockStartState):
                    self.checkCondition(isinstance(state.transitions[1].target, LoopEndState))
                    self.checkCondition(not state.nonGreedy)
                elif isinstance(state.transitions[0].target, LoopEndState):
                    self.checkCondition(isinstance(state.transitions[1].target, StarBlockStartState))
                    self.checkCondition(state.nonGreedy)
                else:
                    raise Exception("IllegalState")

            if isinstance(state, StarLoopbackState):
                self.checkCondition(len(state.transitions) == 1)
                self.checkCondition(isinstance(state.transitions[0].target, StarLoopEntryState))

            if isinstance(state, LoopEndState):
                self.checkCondition(state.loopBackState is not None)

            if isinstance(state, RuleStartState):
                self.checkCondition(state.stopState is not None)

            if isinstance(state, BlockStartState):
                self.checkCondition(state.endState is not None)

            if isinstance(state, BlockEndState):
                self.checkCondition(state.startState is not None)

            if isinstance(state, DecisionState):
                self.checkCondition(len(state.transitions) <= 1 or state.decision >= 0)
            else:
                self.checkCondition(len(state.transitions) <= 1 or isinstance(state, RuleStopState))

    def checkCondition(self, condition:bool, message=None):
        if not condition:
            if message is None:
                message = "IllegalState"
            raise Exception(message)

    def readInt(self):
        i = self.data[self.pos]
        self.pos += 1
        return i

    def readInt32(self):
        low = self.readInt()
        high = self.readInt()
        return low | (high << 16)

    def readLong(self):
        low = self.readInt32()
        high = self.readInt32()
        return (low & 0x00000000FFFFFFFF) | (high << 32)

    def readUUID(self):
        low = self.readLong()
        high = self.readLong()
        allBits = (low & 0xFFFFFFFFFFFFFFFF) | (high << 64)
        return UUID(int=allBits)

    edgeFactories = [ lambda args : None,
                      lambda atn, src, trg, arg1, arg2, arg3, sets, target : EpsilonTransition(target),
                      lambda atn, src, trg, arg1, arg2, arg3, sets, target : \
                        RangeTransition(target, Token.EOF, arg2) if arg3 != 0 else RangeTransition(target, arg1, arg2),
                      lambda atn, src, trg, arg1, arg2, arg3, sets, target : \
                        RuleTransition(atn.states[arg1], arg2, arg3, target),
                      lambda atn, src, trg, arg1, arg2, arg3, sets, target : \
                        PredicateTransition(target, arg1, arg2, arg3 != 0),
                      lambda atn, src, trg, arg1, arg2, arg3, sets, target : \
                        AtomTransition(target, Token.EOF) if arg3 != 0 else AtomTransition(target, arg1),
                      lambda atn, src, trg, arg1, arg2, arg3, sets, target : \
                        ActionTransition(target, arg1, arg2, arg3 != 0),
                      lambda atn, src, trg, arg1, arg2, arg3, sets, target : \
                        SetTransition(target, sets[arg1]),
                      lambda atn, src, trg, arg1, arg2, arg3, sets, target : \
                        NotSetTransition(target, sets[arg1]),
                      lambda atn, src, trg, arg1, arg2, arg3, sets, target : \
                        WildcardTransition(target),
                      lambda atn, src, trg, arg1, arg2, arg3, sets, target : \
                        PrecedencePredicateTransition(target, arg1)
                      ]

    def edgeFactory(self, atn:ATN, type:int, src:int, trg:int, arg1:int, arg2:int, arg3:int, sets:list):
        target = atn.states[trg]
        if type > len(self.edgeFactories) or self.edgeFactories[type] is None:
            raise Exception("The specified transition type: " + str(type) + " is not valid.")
        else:
            return self.edgeFactories[type](atn, src, trg, arg1, arg2, arg3, sets, target)

    stateFactories = [  lambda : None,
                        lambda : BasicState(),
                        lambda : RuleStartState(),
                        lambda : BasicBlockStartState(),
                        lambda : PlusBlockStartState(),
                        lambda : StarBlockStartState(),
                        lambda : TokensStartState(),
                        lambda : RuleStopState(),
                        lambda : BlockEndState(),
                        lambda : StarLoopbackState(),
                        lambda : StarLoopEntryState(),
                        lambda : PlusLoopbackState(),
                        lambda : LoopEndState()
                    ]

    def stateFactory(self, type:int, ruleIndex:int):
        if type> len(self.stateFactories) or self.stateFactories[type] is None:
            raise Exception("The specified state type " + str(type) + " is not valid.")
        else:
            s = self.stateFactories[type]()
            if s is not None:
                s.ruleIndex = ruleIndex
        return s

    CHANNEL = 0     #The type of a {@link LexerChannelAction} action.
    CUSTOM = 1      #The type of a {@link LexerCustomAction} action.
    MODE = 2        #The type of a {@link LexerModeAction} action.
    MORE = 3        #The type of a {@link LexerMoreAction} action.
    POP_MODE = 4    #The type of a {@link LexerPopModeAction} action.
    PUSH_MODE = 5   #The type of a {@link LexerPushModeAction} action.
    SKIP = 6        #The type of a {@link LexerSkipAction} action.
    TYPE = 7        #The type of a {@link LexerTypeAction} action.

    actionFactories = [ lambda data1, data2: LexerChannelAction(data1),
                        lambda data1, data2: LexerCustomAction(data1, data2),
                        lambda data1, data2: LexerModeAction(data1),
                        lambda data1, data2: LexerMoreAction.INSTANCE,
                        lambda data1, data2: LexerPopModeAction.INSTANCE,
                        lambda data1, data2: LexerPushModeAction(data1),
                        lambda data1, data2: LexerSkipAction.INSTANCE,
                        lambda data1, data2: LexerTypeAction(data1)
                      ]

    def lexerActionFactory(self, type:int, data1:int, data2:int):

        if type > len(self.actionFactories) or self.actionFactories[type] is None:
            raise Exception("The specified lexer action type " + str(type) + " is not valid.")
        else:
            return self.actionFactories[type](data1, data2)


// File: venv\Lib\site-packages\antlr4\atn\ATNSimulator.py
----------------------------------------
#
# Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
# Use of this file is governed by the BSD 3-clause license that
# can be found in the LICENSE.txt file in the project root.
#/
from antlr4.PredictionContext import PredictionContextCache, PredictionContext, getCachedPredictionContext
from antlr4.atn.ATN import ATN
from antlr4.atn.ATNConfigSet import ATNConfigSet
from antlr4.dfa.DFAState import DFAState


class ATNSimulator(object):
    __slots__ = ('atn', 'sharedContextCache', '__dict__')

    # Must distinguish between missing edge and edge we know leads nowhere#/
    ERROR = DFAState(configs=ATNConfigSet())
    ERROR.stateNumber = 0x7FFFFFFF

    # The context cache maps all PredictionContext objects that are ==
    #  to a single cached copy. This cache is shared across all contexts
    #  in all ATNConfigs in all DFA states.  We rebuild each ATNConfigSet
    #  to use only cached nodes/graphs in addDFAState(). We don't want to
    #  fill this during closure() since there are lots of contexts that
    #  pop up but are not used ever again. It also greatly slows down closure().
    #
    #  <p>This cache makes a huge difference in memory and a little bit in speed.
    #  For the Java grammar on java.*, it dropped the memory requirements
    #  at the end from 25M to 16M. We don't store any of the full context
    #  graphs in the DFA because they are limited to local context only,
    #  but apparently there's a lot of repetition there as well. We optimize
    #  the config contexts before storing the config set in the DFA states
    #  by literally rebuilding them with cached subgraphs only.</p>
    #
    #  <p>I tried a cache for use during closure operations, that was
    #  whacked after each adaptivePredict(). It cost a little bit
    #  more time I think and doesn't save on the overall footprint
    #  so it's not worth the complexity.</p>
    #/
    def __init__(self, atn:ATN, sharedContextCache:PredictionContextCache):
        self.atn = atn
        self.sharedContextCache = sharedContextCache

    def getCachedContext(self, context:PredictionContext):
        if self.sharedContextCache is None:
            return context
        visited = dict()
        return getCachedPredictionContext(context, self.sharedContextCache, visited)


// File: venv\Lib\site-packages\antlr4\atn\ATNState.py
----------------------------------------
#
# Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
# Use of this file is governed by the BSD 3-clause license that
# can be found in the LICENSE.txt file in the project root.
#

# The following images show the relation of states and
# {@link ATNState#transitions} for various grammar constructs.
#
# <ul>
#
# <li>Solid edges marked with an &#0949; indicate a required
# {@link EpsilonTransition}.</li>
#
# <li>Dashed edges indicate locations where any transition derived from
# {@link Transition} might appear.</li>
#
# <li>Dashed nodes are place holders for either a sequence of linked
# {@link BasicState} states or the inclusion of a block representing a nested
# construct in one of the forms below.</li>
#
# <li>Nodes showing multiple outgoing alternatives with a {@code ...} support
# any number of alternatives (one or more). Nodes without the {@code ...} only
# support the exact number of alternatives shown in the diagram.</li>
#
# </ul>
#
# <h2>Basic Blocks</h2>
#
# <h3>Rule</h3>
#
# <embed src="images/Rule.svg" type="image/svg+xml"/>
#
# <h3>Block of 1 or more alternatives</h3>
#
# <embed src="images/Block.svg" type="image/svg+xml"/>
#
# <h2>Greedy Loops</h2>
#
# <h3>Greedy Closure: {@code (...)*}</h3>
#
# <embed src="images/ClosureGreedy.svg" type="image/svg+xml"/>
#
# <h3>Greedy Positive Closure: {@code (...)+}</h3>
#
# <embed src="images/PositiveClosureGreedy.svg" type="image/svg+xml"/>
#
# <h3>Greedy Optional: {@code (...)?}</h3>
#
# <embed src="images/OptionalGreedy.svg" type="image/svg+xml"/>
#
# <h2>Non-Greedy Loops</h2>
#
# <h3>Non-Greedy Closure: {@code (...)*?}</h3>
#
# <embed src="images/ClosureNonGreedy.svg" type="image/svg+xml"/>
#
# <h3>Non-Greedy Positive Closure: {@code (...)+?}</h3>
#
# <embed src="images/PositiveClosureNonGreedy.svg" type="image/svg+xml"/>
#
# <h3>Non-Greedy Optional: {@code (...)??}</h3>
#
# <embed src="images/OptionalNonGreedy.svg" type="image/svg+xml"/>
#

from antlr4.atn.Transition import Transition

INITIAL_NUM_TRANSITIONS = 4

class ATNState(object):
    __slots__ = (
        'atn', 'stateNumber', 'stateType', 'ruleIndex', 'epsilonOnlyTransitions',
        'transitions', 'nextTokenWithinRule',
    )

    # constants for serialization
    INVALID_TYPE = 0
    BASIC = 1
    RULE_START = 2
    BLOCK_START = 3
    PLUS_BLOCK_START = 4
    STAR_BLOCK_START = 5
    TOKEN_START = 6
    RULE_STOP = 7
    BLOCK_END = 8
    STAR_LOOP_BACK = 9
    STAR_LOOP_ENTRY = 10
    PLUS_LOOP_BACK = 11
    LOOP_END = 12

    serializationNames = [
            "INVALID",
            "BASIC",
            "RULE_START",
            "BLOCK_START",
            "PLUS_BLOCK_START",
            "STAR_BLOCK_START",
            "TOKEN_START",
            "RULE_STOP",
            "BLOCK_END",
            "STAR_LOOP_BACK",
            "STAR_LOOP_ENTRY",
            "PLUS_LOOP_BACK",
            "LOOP_END" ]

    INVALID_STATE_NUMBER = -1

    def __init__(self):
        # Which ATN are we in?
        self.atn = None
        self.stateNumber = ATNState.INVALID_STATE_NUMBER
        self.stateType = None
        self.ruleIndex = 0 # at runtime, we don't have Rule objects
        self.epsilonOnlyTransitions = False
        # Track the transitions emanating from this ATN state.
        self.transitions = []
        # Used to cache lookahead during parsing, not used during construction
        self.nextTokenWithinRule = None

    def __hash__(self):
        return self.stateNumber

    def __eq__(self, other):
        return isinstance(other, ATNState) and self.stateNumber==other.stateNumber

    def onlyHasEpsilonTransitions(self):
        return self.epsilonOnlyTransitions

    def isNonGreedyExitState(self):
        return False

    def __str__(self):
        return str(self.stateNumber)

    def addTransition(self, trans:Transition, index:int=-1):
        if len(self.transitions)==0:
            self.epsilonOnlyTransitions = trans.isEpsilon
        elif self.epsilonOnlyTransitions != trans.isEpsilon:
            self.epsilonOnlyTransitions = False
            # TODO System.err.format(Locale.getDefault(), "ATN state %d has both epsilon and non-epsilon transitions.\n", stateNumber);
        if index==-1:
            self.transitions.append(trans)
        else:
            self.transitions.insert(index, trans)

class BasicState(ATNState):

    def __init__(self):
        super().__init__()
        self.stateType = self.BASIC


class DecisionState(ATNState):
    __slots__ = ('decision', 'nonGreedy')
    def __init__(self):
        super().__init__()
        self.decision = -1
        self.nonGreedy = False

#  The start of a regular {@code (...)} block.
class BlockStartState(DecisionState):
    __slots__ = 'endState'

    def __init__(self):
        super().__init__()
        self.endState = None

class BasicBlockStartState(BlockStartState):

    def __init__(self):
        super().__init__()
        self.stateType = self.BLOCK_START

# Terminal node of a simple {@code (a|b|c)} block.
class BlockEndState(ATNState):
    __slots__ = 'startState'

    def __init__(self):
        super().__init__()
        self.stateType = self.BLOCK_END
        self.startState = None

# The last node in the ATN for a rule, unless that rule is the start symbol.
#  In that case, there is one transition to EOF. Later, we might encode
#  references to all calls to this rule to compute FOLLOW sets for
#  error handling.
#
class RuleStopState(ATNState):

    def __init__(self):
        super().__init__()
        self.stateType = self.RULE_STOP

class RuleStartState(ATNState):
    __slots__ = ('stopState', 'isPrecedenceRule')

    def __init__(self):
        super().__init__()
        self.stateType = self.RULE_START
        self.stopState = None
        self.isPrecedenceRule = False

# Decision state for {@code A+} and {@code (A|B)+}.  It has two transitions:
#  one to the loop back to start of the block and one to exit.
#
class PlusLoopbackState(DecisionState):

    def __init__(self):
        super().__init__()
        self.stateType = self.PLUS_LOOP_BACK

# Start of {@code (A|B|...)+} loop. Technically a decision state, but
#  we don't use for code generation; somebody might need it, so I'm defining
#  it for completeness. In reality, the {@link PlusLoopbackState} node is the
#  real decision-making note for {@code A+}.
#
class PlusBlockStartState(BlockStartState):
    __slots__ = 'loopBackState'

    def __init__(self):
        super().__init__()
        self.stateType = self.PLUS_BLOCK_START
        self.loopBackState = None

# The block that begins a closure loop.
class StarBlockStartState(BlockStartState):

    def __init__(self):
        super().__init__()
        self.stateType = self.STAR_BLOCK_START

class StarLoopbackState(ATNState):

    def __init__(self):
        super().__init__()
        self.stateType = self.STAR_LOOP_BACK


class StarLoopEntryState(DecisionState):
    __slots__ = ('loopBackState', 'isPrecedenceDecision')

    def __init__(self):
        super().__init__()
        self.stateType = self.STAR_LOOP_ENTRY
        self.loopBackState = None
        # Indicates whether this state can benefit from a precedence DFA during SLL decision making.
        self.isPrecedenceDecision = None

# Mark the end of a * or + loop.
class LoopEndState(ATNState):
    __slots__ = 'loopBackState'

    def __init__(self):
        super().__init__()
        self.stateType = self.LOOP_END
        self.loopBackState = None

# The Tokens rule start state linking to each lexer rule start state */
class TokensStartState(DecisionState):

    def __init__(self):
        super().__init__()
        self.stateType = self.TOKEN_START


// File: venv\Lib\site-packages\antlr4\atn\ATNType.py
----------------------------------------
# Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
# Use of this file is governed by the BSD 3-clause license that
# can be found in the LICENSE.txt file in the project root.
#/

from enum import IntEnum

# Represents the type of recognizer an ATN applies to.

class ATNType(IntEnum):

    LEXER = 0
    PARSER = 1

    @classmethod
    def fromOrdinal(cls, i:int):
        return cls._value2member_map_[i]


// File: venv\Lib\site-packages\antlr4\atn\LexerAction.py
----------------------------------------
#
# Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
# Use of this file is governed by the BSD 3-clause license that
# can be found in the LICENSE.txt file in the project root.
 #

from enum import IntEnum

# need forward declaration
Lexer = None


class LexerActionType(IntEnum):

    CHANNEL = 0     #The type of a {@link LexerChannelAction} action.
    CUSTOM = 1      #The type of a {@link LexerCustomAction} action.
    MODE = 2        #The type of a {@link LexerModeAction} action.
    MORE = 3        #The type of a {@link LexerMoreAction} action.
    POP_MODE = 4    #The type of a {@link LexerPopModeAction} action.
    PUSH_MODE = 5   #The type of a {@link LexerPushModeAction} action.
    SKIP = 6        #The type of a {@link LexerSkipAction} action.
    TYPE = 7        #The type of a {@link LexerTypeAction} action.

class LexerAction(object):
    __slots__ = ('actionType', 'isPositionDependent')

    def __init__(self, action:LexerActionType):
        self.actionType = action
        self.isPositionDependent = False

    def __hash__(self):
        return hash(self.actionType)

    def __eq__(self, other):
        return self is other


#
# Implements the {@code skip} lexer action by calling {@link Lexer#skip}.
#
# <p>The {@code skip} command does not have any parameters, so this action is
# implemented as a singleton instance exposed by {@link #INSTANCE}.</p>
class LexerSkipAction(LexerAction):

    # Provides a singleton instance of this parameterless lexer action.
    INSTANCE = None

    def __init__(self):
        super().__init__(LexerActionType.SKIP)

    def execute(self, lexer:Lexer):
        lexer.skip()

    def __str__(self):
        return "skip"

LexerSkipAction.INSTANCE = LexerSkipAction()

#  Implements the {@code type} lexer action by calling {@link Lexer#setType}
# with the assigned type.
class LexerTypeAction(LexerAction):
    __slots__ = 'type'

    def __init__(self, type:int):
        super().__init__(LexerActionType.TYPE)
        self.type = type

    def execute(self, lexer:Lexer):
        lexer.type = self.type

    def __hash__(self):
        return hash((self.actionType, self.type))

    def __eq__(self, other):
        if self is other:
            return True
        elif not isinstance(other, LexerTypeAction):
            return False
        else:
            return self.type == other.type

    def __str__(self):
        return "type(" + str(self.type) + ")"


# Implements the {@code pushMode} lexer action by calling
# {@link Lexer#pushMode} with the assigned mode.
class LexerPushModeAction(LexerAction):
    __slots__ = 'mode'

    def __init__(self, mode:int):
        super().__init__(LexerActionType.PUSH_MODE)
        self.mode = mode

    # <p>This action is implemented by calling {@link Lexer#pushMode} with the
    # value provided by {@link #getMode}.</p>
    def execute(self, lexer:Lexer):
        lexer.pushMode(self.mode)

    def __hash__(self):
        return hash((self.actionType, self.mode))

    def __eq__(self, other):
        if self is other:
            return True
        elif not isinstance(other, LexerPushModeAction):
            return False
        else:
            return self.mode == other.mode

    def __str__(self):
        return "pushMode(" + str(self.mode) + ")"


# Implements the {@code popMode} lexer action by calling {@link Lexer#popMode}.
#
# <p>The {@code popMode} command does not have any parameters, so this action is
# implemented as a singleton instance exposed by {@link #INSTANCE}.</p>
class LexerPopModeAction(LexerAction):

    INSTANCE = None

    def __init__(self):
        super().__init__(LexerActionType.POP_MODE)

    # <p>This action is implemented by calling {@link Lexer#popMode}.</p>
    def execute(self, lexer:Lexer):
        lexer.popMode()

    def __str__(self):
        return "popMode"

LexerPopModeAction.INSTANCE = LexerPopModeAction()

# Implements the {@code more} lexer action by calling {@link Lexer#more}.
#
# <p>The {@code more} command does not have any parameters, so this action is
# implemented as a singleton instance exposed by {@link #INSTANCE}.</p>
class LexerMoreAction(LexerAction):

    INSTANCE = None

    def __init__(self):
        super().__init__(LexerActionType.MORE)

    # <p>This action is implemented by calling {@link Lexer#popMode}.</p>
    def execute(self, lexer:Lexer):
        lexer.more()

    def __str__(self):
        return "more"

LexerMoreAction.INSTANCE = LexerMoreAction()

# Implements the {@code mode} lexer action by calling {@link Lexer#mode} with
# the assigned mode.
class LexerModeAction(LexerAction):
    __slots__ = 'mode'

    def __init__(self, mode:int):
        super().__init__(LexerActionType.MODE)
        self.mode = mode

    # <p>This action is implemented by calling {@link Lexer#mode} with the
    # value provided by {@link #getMode}.</p>
    def execute(self, lexer:Lexer):
        lexer.mode(self.mode)

    def __hash__(self):
        return hash((self.actionType, self.mode))

    def __eq__(self, other):
        if self is other:
            return True
        elif not isinstance(other, LexerModeAction):
            return False
        else:
            return self.mode == other.mode

    def __str__(self):
        return "mode(" + str(self.mode) + ")"

# Executes a custom lexer action by calling {@link Recognizer#action} with the
# rule and action indexes assigned to the custom action. The implementation of
# a custom action is added to the generated code for the lexer in an override
# of {@link Recognizer#action} when the grammar is compiled.
#
# <p>This class may represent embedded actions created with the <code>{...}</code>
# syntax in ANTLR 4, as well as actions created for lexer commands where the
# command argument could not be evaluated when the grammar was compiled.</p>

class LexerCustomAction(LexerAction):
    __slots__ = ('ruleIndex', 'actionIndex')

    # Constructs a custom lexer action with the specified rule and action
    # indexes.
    #
    # @param ruleIndex The rule index to use for calls to
    # {@link Recognizer#action}.
    # @param actionIndex The action index to use for calls to
    # {@link Recognizer#action}.
    #/
    def __init__(self, ruleIndex:int, actionIndex:int):
        super().__init__(LexerActionType.CUSTOM)
        self.ruleIndex = ruleIndex
        self.actionIndex = actionIndex
        self.isPositionDependent = True

    # <p>Custom actions are implemented by calling {@link Lexer#action} with the
    # appropriate rule and action indexes.</p>
    def execute(self, lexer:Lexer):
        lexer.action(None, self.ruleIndex, self.actionIndex)

    def __hash__(self):
        return hash((self.actionType, self.ruleIndex, self.actionIndex))

    def __eq__(self, other):
        if self is other:
            return True
        elif not isinstance(other, LexerCustomAction):
            return False
        else:
            return self.ruleIndex == other.ruleIndex and self.actionIndex == other.actionIndex

# Implements the {@code channel} lexer action by calling
# {@link Lexer#setChannel} with the assigned channel.
class LexerChannelAction(LexerAction):
    __slots__ = 'channel'

    # Constructs a new {@code channel} action with the specified channel value.
    # @param channel The channel value to pass to {@link Lexer#setChannel}.
    def __init__(self, channel:int):
        super().__init__(LexerActionType.CHANNEL)
        self.channel = channel

    # <p>This action is implemented by calling {@link Lexer#setChannel} with the
    # value provided by {@link #getChannel}.</p>
    def execute(self, lexer:Lexer):
        lexer._channel = self.channel

    def __hash__(self):
        return hash((self.actionType, self.channel))

    def __eq__(self, other):
        if self is other:
            return True
        elif not isinstance(other, LexerChannelAction):
            return False
        else:
            return self.channel == other.channel

    def __str__(self):
        return "channel(" + str(self.channel) + ")"

# This implementation of {@link LexerAction} is used for tracking input offsets
# for position-dependent actions within a {@link LexerActionExecutor}.
#
# <p>This action is not serialized as part of the ATN, and is only required for
# position-dependent lexer actions which appear at a location other than the
# end of a rule. For more information about DFA optimizations employed for
# lexer actions, see {@link LexerActionExecutor#append} and
# {@link LexerActionExecutor#fixOffsetBeforeMatch}.</p>
class LexerIndexedCustomAction(LexerAction):
    __slots__ = ('offset', 'action')

    # Constructs a new indexed custom action by associating a character offset
    # with a {@link LexerAction}.
    #
    # <p>Note: This class is only required for lexer actions for which
    # {@link LexerAction#isPositionDependent} returns {@code true}.</p>
    #
    # @param offset The offset into the input {@link CharStream}, relative to
    # the token start index, at which the specified lexer action should be
    # executed.
    # @param action The lexer action to execute at a particular offset in the
    # input {@link CharStream}.
    def __init__(self, offset:int, action:LexerAction):
        super().__init__(action.actionType)
        self.offset = offset
        self.action = action
        self.isPositionDependent = True

    # <p>This method calls {@link #execute} on the result of {@link #getAction}
    # using the provided {@code lexer}.</p>
    def execute(self, lexer:Lexer):
        # assume the input stream position was properly set by the calling code
        self.action.execute(lexer)

    def __hash__(self):
        return hash((self.actionType, self.offset, self.action))

    def __eq__(self, other):
        if self is other:
            return True
        elif not isinstance(other, LexerIndexedCustomAction):
            return False
        else:
            return self.offset == other.offset and self.action == other.action


// File: venv\Lib\site-packages\antlr4\atn\LexerActionExecutor.py
----------------------------------------
#
# Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
# Use of this file is governed by the BSD 3-clause license that
# can be found in the LICENSE.txt file in the project root.
#/

# Represents an executor for a sequence of lexer actions which traversed during
# the matching operation of a lexer rule (token).
#
# <p>The executor tracks position information for position-dependent lexer actions
# efficiently, ensuring that actions appearing only at the end of the rule do
# not cause bloating of the {@link DFA} created for the lexer.</p>


from antlr4.InputStream import InputStream
from antlr4.atn.LexerAction import LexerAction, LexerIndexedCustomAction

# need a forward declaration
Lexer = None
LexerActionExecutor = None

class LexerActionExecutor(object):
    __slots__ = ('lexerActions', 'hashCode')

    def __init__(self, lexerActions:list=list()):
        self.lexerActions = lexerActions
        # Caches the result of {@link #hashCode} since the hash code is an element
        # of the performance-critical {@link LexerATNConfig#hashCode} operation.
        self.hashCode = hash("".join([str(la) for la in lexerActions]))


    # Creates a {@link LexerActionExecutor} which executes the actions for
    # the input {@code lexerActionExecutor} followed by a specified
    # {@code lexerAction}.
    #
    # @param lexerActionExecutor The executor for actions already traversed by
    # the lexer while matching a token within a particular
    # {@link LexerATNConfig}. If this is {@code null}, the method behaves as
    # though it were an empty executor.
    # @param lexerAction The lexer action to execute after the actions
    # specified in {@code lexerActionExecutor}.
    #
    # @return A {@link LexerActionExecutor} for executing the combine actions
    # of {@code lexerActionExecutor} and {@code lexerAction}.
    @staticmethod
    def append(lexerActionExecutor:LexerActionExecutor , lexerAction:LexerAction ):
        if lexerActionExecutor is None:
            return LexerActionExecutor([ lexerAction ])

        lexerActions = lexerActionExecutor.lexerActions + [ lexerAction ]
        return LexerActionExecutor(lexerActions)

    # Creates a {@link LexerActionExecutor} which encodes the current offset
    # for position-dependent lexer actions.
    #
    # <p>Normally, when the executor encounters lexer actions where
    # {@link LexerAction#isPositionDependent} returns {@code true}, it calls
    # {@link IntStream#seek} on the input {@link CharStream} to set the input
    # position to the <em>end</em> of the current token. This behavior provides
    # for efficient DFA representation of lexer actions which appear at the end
    # of a lexer rule, even when the lexer rule matches a variable number of
    # characters.</p>
    #
    # <p>Prior to traversing a match transition in the ATN, the current offset
    # from the token start index is assigned to all position-dependent lexer
    # actions which have not already been assigned a fixed offset. By storing
    # the offsets relative to the token start index, the DFA representation of
    # lexer actions which appear in the middle of tokens remains efficient due
    # to sharing among tokens of the same length, regardless of their absolute
    # position in the input stream.</p>
    #
    # <p>If the current executor already has offsets assigned to all
    # position-dependent lexer actions, the method returns {@code this}.</p>
    #
    # @param offset The current offset to assign to all position-dependent
    # lexer actions which do not already have offsets assigned.
    #
    # @return A {@link LexerActionExecutor} which stores input stream offsets
    # for all position-dependent lexer actions.
    #/
    def fixOffsetBeforeMatch(self, offset:int):
        updatedLexerActions = None
        for i in range(0, len(self.lexerActions)):
            if self.lexerActions[i].isPositionDependent and not isinstance(self.lexerActions[i], LexerIndexedCustomAction):
                if updatedLexerActions is None:
                    updatedLexerActions = [ la for la in self.lexerActions ]
                updatedLexerActions[i] = LexerIndexedCustomAction(offset, self.lexerActions[i])

        if updatedLexerActions is None:
            return self
        else:
            return LexerActionExecutor(updatedLexerActions)


    # Execute the actions encapsulated by this executor within the context of a
    # particular {@link Lexer}.
    #
    # <p>This method calls {@link IntStream#seek} to set the position of the
    # {@code input} {@link CharStream} prior to calling
    # {@link LexerAction#execute} on a position-dependent action. Before the
    # method returns, the input position will be restored to the same position
    # it was in when the method was invoked.</p>
    #
    # @param lexer The lexer instance.
    # @param input The input stream which is the source for the current token.
    # When this method is called, the current {@link IntStream#index} for
    # {@code input} should be the start of the following token, i.e. 1
    # character past the end of the current token.
    # @param startIndex The token start index. This value may be passed to
    # {@link IntStream#seek} to set the {@code input} position to the beginning
    # of the token.
    #/
    def execute(self, lexer:Lexer, input:InputStream, startIndex:int):
        requiresSeek = False
        stopIndex = input.index
        try:
            for lexerAction in self.lexerActions:
                if isinstance(lexerAction, LexerIndexedCustomAction):
                    offset = lexerAction.offset
                    input.seek(startIndex + offset)
                    lexerAction = lexerAction.action
                    requiresSeek = (startIndex + offset) != stopIndex
                elif lexerAction.isPositionDependent:
                    input.seek(stopIndex)
                    requiresSeek = False
                lexerAction.execute(lexer)
        finally:
            if requiresSeek:
                input.seek(stopIndex)

    def __hash__(self):
        return self.hashCode

    def __eq__(self, other):
        if self is other:
            return True
        elif not isinstance(other, LexerActionExecutor):
            return False
        else:
            return self.hashCode == other.hashCode \
                and self.lexerActions == other.lexerActions

del Lexer


// File: venv\Lib\site-packages\antlr4\atn\LexerATNSimulator.py
----------------------------------------
#
# Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
# Use of this file is governed by the BSD 3-clause license that
# can be found in the LICENSE.txt file in the project root.
#/

# When we hit an accept state in either the DFA or the ATN, we
#  have to notify the character stream to start buffering characters
#  via {@link IntStream#mark} and record the current state. The current sim state
#  includes the current index into the input, the current line,
#  and current character position in that line. Note that the Lexer is
#  tracking the starting line and characterization of the token. These
#  variables track the "state" of the simulator when it hits an accept state.
#
#  <p>We track these variables separately for the DFA and ATN simulation
#  because the DFA simulation often has to fail over to the ATN
#  simulation. If the ATN simulation fails, we need the DFA to fall
#  back to its previously accepted state, if any. If the ATN succeeds,
#  then the ATN does the accept and the DFA simulator that invoked it
#  can simply return the predicted token type.</p>
#/

from antlr4.PredictionContext import PredictionContextCache, SingletonPredictionContext, PredictionContext
from antlr4.InputStream import InputStream
from antlr4.Token import Token
from antlr4.atn.ATN import ATN
from antlr4.atn.ATNConfig import LexerATNConfig
from antlr4.atn.ATNSimulator import ATNSimulator
from antlr4.atn.ATNConfigSet import ATNConfigSet, OrderedATNConfigSet
from antlr4.atn.ATNState import RuleStopState, ATNState
from antlr4.atn.LexerActionExecutor import LexerActionExecutor
from antlr4.atn.Transition import Transition
from antlr4.dfa.DFAState import DFAState
from antlr4.error.Errors import LexerNoViableAltException, UnsupportedOperationException

class SimState(object):
    __slots__ = ('index', 'line', 'column', 'dfaState')

    def __init__(self):
        self.reset()

    def reset(self):
        self.index = -1
        self.line = 0
        self.column = -1
        self.dfaState = None

# need forward declaration
Lexer = None
LexerATNSimulator = None

class LexerATNSimulator(ATNSimulator):
    __slots__ = (
        'decisionToDFA', 'recog', 'startIndex', 'line', 'column', 'mode',
        'DEFAULT_MODE', 'MAX_CHAR_VALUE', 'prevAccept'
    )

    debug = False
    dfa_debug = False

    MIN_DFA_EDGE = 0
    MAX_DFA_EDGE = 127 # forces unicode to stay in ATN

    ERROR = None

    def __init__(self, recog:Lexer, atn:ATN, decisionToDFA:list, sharedContextCache:PredictionContextCache):
        super().__init__(atn, sharedContextCache)
        self.decisionToDFA = decisionToDFA
        self.recog = recog
        # The current token's starting index into the character stream.
        #  Shared across DFA to ATN simulation in case the ATN fails and the
        #  DFA did not have a previous accept state. In this case, we use the
        #  ATN-generated exception object.
        self.startIndex = -1
        # line number 1..n within the input#/
        self.line = 1
        # The index of the character relative to the beginning of the line 0..n-1#/
        self.column = 0
        from antlr4.Lexer import Lexer
        self.mode = Lexer.DEFAULT_MODE
        # Cache Lexer properties to avoid further imports
        self.DEFAULT_MODE = Lexer.DEFAULT_MODE
        self.MAX_CHAR_VALUE = Lexer.MAX_CHAR_VALUE
        # Used during DFA/ATN exec to record the most recent accept configuration info
        self.prevAccept = SimState()


    def copyState(self, simulator:LexerATNSimulator ):
        self.column = simulator.column
        self.line = simulator.line
        self.mode = simulator.mode
        self.startIndex = simulator.startIndex

    def match(self, input:InputStream , mode:int):
        self.mode = mode
        mark = input.mark()
        try:
            self.startIndex = input.index
            self.prevAccept.reset()
            dfa = self.decisionToDFA[mode]
            if dfa.s0 is None:
                return self.matchATN(input)
            else:
                return self.execATN(input, dfa.s0)
        finally:
            input.release(mark)

    def reset(self):
        self.prevAccept.reset()
        self.startIndex = -1
        self.line = 1
        self.column = 0
        self.mode = self.DEFAULT_MODE

    def matchATN(self, input:InputStream):
        startState = self.atn.modeToStartState[self.mode]

        if LexerATNSimulator.debug:
            print("matchATN mode " + str(self.mode) + " start: " + str(startState))

        old_mode = self.mode
        s0_closure = self.computeStartState(input, startState)
        suppressEdge = s0_closure.hasSemanticContext
        s0_closure.hasSemanticContext = False

        next = self.addDFAState(s0_closure)
        if not suppressEdge:
            self.decisionToDFA[self.mode].s0 = next

        predict = self.execATN(input, next)

        if LexerATNSimulator.debug:
            print("DFA after matchATN: " + str(self.decisionToDFA[old_mode].toLexerString()))

        return predict

    def execATN(self, input:InputStream, ds0:DFAState):
        if LexerATNSimulator.debug:
            print("start state closure=" + str(ds0.configs))

        if ds0.isAcceptState:
            # allow zero-length tokens
            self.captureSimState(self.prevAccept, input, ds0)

        t = input.LA(1)
        s = ds0 # s is current/from DFA state

        while True: # while more work
            if LexerATNSimulator.debug:
                print("execATN loop starting closure:", str(s.configs))

            # As we move src->trg, src->trg, we keep track of the previous trg to
            # avoid looking up the DFA state again, which is expensive.
            # If the previous target was already part of the DFA, we might
            # be able to avoid doing a reach operation upon t. If s!=null,
            # it means that semantic predicates didn't prevent us from
            # creating a DFA state. Once we know s!=null, we check to see if
            # the DFA state has an edge already for t. If so, we can just reuse
            # it's configuration set; there's no point in re-computing it.
            # This is kind of like doing DFA simulation within the ATN
            # simulation because DFA simulation is really just a way to avoid
            # computing reach/closure sets. Technically, once we know that
            # we have a previously added DFA state, we could jump over to
            # the DFA simulator. But, that would mean popping back and forth
            # a lot and making things more complicated algorithmically.
            # This optimization makes a lot of sense for loops within DFA.
            # A character will take us back to an existing DFA state
            # that already has lots of edges out of it. e.g., .* in comments.
            # print("Target for:" + str(s) + " and:" + str(t))
            target = self.getExistingTargetState(s, t)
            # print("Existing:" + str(target))
            if target is None:
                target = self.computeTargetState(input, s, t)
                # print("Computed:" + str(target))

            if target == self.ERROR:
                break

            # If this is a consumable input element, make sure to consume before
            # capturing the accept state so the input index, line, and char
            # position accurately reflect the state of the interpreter at the
            # end of the token.
            if t != Token.EOF:
                self.consume(input)

            if target.isAcceptState:
                self.captureSimState(self.prevAccept, input, target)
                if t == Token.EOF:
                    break

            t = input.LA(1)

            s = target # flip; current DFA target becomes new src/from state

        return self.failOrAccept(self.prevAccept, input, s.configs, t)

    # Get an existing target state for an edge in the DFA. If the target state
    # for the edge has not yet been computed or is otherwise not available,
    # this method returns {@code null}.
    #
    # @param s The current DFA state
    # @param t The next input symbol
    # @return The existing target DFA state for the given input symbol
    # {@code t}, or {@code null} if the target state for this edge is not
    # already cached
    def getExistingTargetState(self, s:DFAState, t:int):
        if s.edges is None or t < self.MIN_DFA_EDGE or t > self.MAX_DFA_EDGE:
            return None

        target = s.edges[t - self.MIN_DFA_EDGE]
        if LexerATNSimulator.debug and target is not None:
            print("reuse state", str(s.stateNumber), "edge to", str(target.stateNumber))

        return target

    # Compute a target state for an edge in the DFA, and attempt to add the
    # computed state and corresponding edge to the DFA.
    #
    # @param input The input stream
    # @param s The current DFA state
    # @param t The next input symbol
    #
    # @return The computed target DFA state for the given input symbol
    # {@code t}. If {@code t} does not lead to a valid DFA state, this method
    # returns {@link #ERROR}.
    def computeTargetState(self, input:InputStream, s:DFAState, t:int):
        reach = OrderedATNConfigSet()

        # if we don't find an existing DFA state
        # Fill reach starting from closure, following t transitions
        self.getReachableConfigSet(input, s.configs, reach, t)

        if len(reach)==0: # we got nowhere on t from s
            if not reach.hasSemanticContext:
                # we got nowhere on t, don't throw out this knowledge; it'd
                # cause a failover from DFA later.
               self. addDFAEdge(s, t, self.ERROR)

            # stop when we can't match any more char
            return self.ERROR

        # Add an edge from s to target DFA found/created for reach
        return self.addDFAEdge(s, t, cfgs=reach)

    def failOrAccept(self, prevAccept:SimState , input:InputStream, reach:ATNConfigSet, t:int):
        if self.prevAccept.dfaState is not None:
            lexerActionExecutor = prevAccept.dfaState.lexerActionExecutor
            self.accept(input, lexerActionExecutor, self.startIndex, prevAccept.index, prevAccept.line, prevAccept.column)
            return prevAccept.dfaState.prediction
        else:
            # if no accept and EOF is first char, return EOF
            if t==Token.EOF and input.index==self.startIndex:
                return Token.EOF
            raise LexerNoViableAltException(self.recog, input, self.startIndex, reach)

    # Given a starting configuration set, figure out all ATN configurations
    #  we can reach upon input {@code t}. Parameter {@code reach} is a return
    #  parameter.
    def getReachableConfigSet(self, input:InputStream, closure:ATNConfigSet, reach:ATNConfigSet, t:int):
        # this is used to skip processing for configs which have a lower priority
        # than a config that already reached an accept state for the same rule
        skipAlt = ATN.INVALID_ALT_NUMBER
        for cfg in closure:
            currentAltReachedAcceptState = ( cfg.alt == skipAlt )
            if currentAltReachedAcceptState and cfg.passedThroughNonGreedyDecision:
                continue

            if LexerATNSimulator.debug:
                print("testing", self.getTokenName(t), "at",  str(cfg))

            for trans in cfg.state.transitions:          # for each transition
                target = self.getReachableTarget(trans, t)
                if target is not None:
                    lexerActionExecutor = cfg.lexerActionExecutor
                    if lexerActionExecutor is not None:
                        lexerActionExecutor = lexerActionExecutor.fixOffsetBeforeMatch(input.index - self.startIndex)

                    treatEofAsEpsilon = (t == Token.EOF)
                    config = LexerATNConfig(state=target, lexerActionExecutor=lexerActionExecutor, config=cfg)
                    if self.closure(input, config, reach, currentAltReachedAcceptState, True, treatEofAsEpsilon):
                        # any remaining configs for this alt have a lower priority than
                        # the one that just reached an accept state.
                        skipAlt = cfg.alt

    def accept(self, input:InputStream, lexerActionExecutor:LexerActionExecutor, startIndex:int, index:int, line:int, charPos:int):
        if LexerATNSimulator.debug:
            print("ACTION", lexerActionExecutor)

        # seek to after last char in token
        input.seek(index)
        self.line = line
        self.column = charPos

        if lexerActionExecutor is not None and self.recog is not None:
            lexerActionExecutor.execute(self.recog, input, startIndex)

    def getReachableTarget(self, trans:Transition, t:int):
        if trans.matches(t, 0, self.MAX_CHAR_VALUE):
            return trans.target
        else:
            return None

    def computeStartState(self, input:InputStream, p:ATNState):
        initialContext = PredictionContext.EMPTY
        configs = OrderedATNConfigSet()
        for i in range(0,len(p.transitions)):
            target = p.transitions[i].target
            c = LexerATNConfig(state=target, alt=i+1, context=initialContext)
            self.closure(input, c, configs, False, False, False)
        return configs

    # Since the alternatives within any lexer decision are ordered by
    # preference, this method stops pursuing the closure as soon as an accept
    # state is reached. After the first accept state is reached by depth-first
    # search from {@code config}, all other (potentially reachable) states for
    # this rule would have a lower priority.
    #
    # @return {@code true} if an accept state is reached, otherwise
    # {@code false}.
    def closure(self, input:InputStream, config:LexerATNConfig, configs:ATNConfigSet, currentAltReachedAcceptState:bool,
                speculative:bool, treatEofAsEpsilon:bool):
        if LexerATNSimulator.debug:
            print("closure(" + str(config) + ")")

        if isinstance( config.state, RuleStopState ):
            if LexerATNSimulator.debug:
                if self.recog is not None:
                    print("closure at", self.recog.symbolicNames[config.state.ruleIndex],  "rule stop", str(config))
                else:
                    print("closure at rule stop", str(config))

            if config.context is None or config.context.hasEmptyPath():
                if config.context is None or config.context.isEmpty():
                    configs.add(config)
                    return True
                else:
                    configs.add(LexerATNConfig(state=config.state, config=config, context=PredictionContext.EMPTY))
                    currentAltReachedAcceptState = True

            if config.context is not None and not config.context.isEmpty():
                for i in range(0,len(config.context)):
                    if config.context.getReturnState(i) != PredictionContext.EMPTY_RETURN_STATE:
                        newContext = config.context.getParent(i) # "pop" return state
                        returnState = self.atn.states[config.context.getReturnState(i)]
                        c = LexerATNConfig(state=returnState, config=config, context=newContext)
                        currentAltReachedAcceptState = self.closure(input, c, configs,
                                    currentAltReachedAcceptState, speculative, treatEofAsEpsilon)

            return currentAltReachedAcceptState

        # optimization
        if not config.state.epsilonOnlyTransitions:
            if not currentAltReachedAcceptState or not config.passedThroughNonGreedyDecision:
                configs.add(config)

        for t in config.state.transitions:
            c = self.getEpsilonTarget(input, config, t, configs, speculative, treatEofAsEpsilon)
            if c is not None:
                currentAltReachedAcceptState = self.closure(input, c, configs, currentAltReachedAcceptState, speculative, treatEofAsEpsilon)

        return currentAltReachedAcceptState

    # side-effect: can alter configs.hasSemanticContext
    def getEpsilonTarget(self, input:InputStream, config:LexerATNConfig, t:Transition, configs:ATNConfigSet,
                                           speculative:bool, treatEofAsEpsilon:bool):
        c = None
        if t.serializationType==Transition.RULE:
                newContext = SingletonPredictionContext.create(config.context, t.followState.stateNumber)
                c = LexerATNConfig(state=t.target, config=config, context=newContext)

        elif t.serializationType==Transition.PRECEDENCE:
                raise UnsupportedOperationException("Precedence predicates are not supported in lexers.")

        elif t.serializationType==Transition.PREDICATE:
                #  Track traversing semantic predicates. If we traverse,
                # we cannot add a DFA state for this "reach" computation
                # because the DFA would not test the predicate again in the
                # future. Rather than creating collections of semantic predicates
                # like v3 and testing them on prediction, v4 will test them on the
                # fly all the time using the ATN not the DFA. This is slower but
                # semantically it's not used that often. One of the key elements to
                # this predicate mechanism is not adding DFA states that see
                # predicates immediately afterwards in the ATN. For example,

                # a : ID {p1}? | ID {p2}? ;

                # should create the start state for rule 'a' (to save start state
                # competition), but should not create target of ID state. The
                # collection of ATN states the following ID references includes
                # states reached by traversing predicates. Since this is when we
                # test them, we cannot cash the DFA state target of ID.

                if LexerATNSimulator.debug:
                    print("EVAL rule "+ str(t.ruleIndex) + ":" + str(t.predIndex))
                configs.hasSemanticContext = True
                if self.evaluatePredicate(input, t.ruleIndex, t.predIndex, speculative):
                    c = LexerATNConfig(state=t.target, config=config)

        elif t.serializationType==Transition.ACTION:
                if config.context is None or config.context.hasEmptyPath():
                    # execute actions anywhere in the start rule for a token.
                    #
                    # TODO: if the entry rule is invoked recursively, some
                    # actions may be executed during the recursive call. The
                    # problem can appear when hasEmptyPath() is true but
                    # isEmpty() is false. In this case, the config needs to be
                    # split into two contexts - one with just the empty path
                    # and another with everything but the empty path.
                    # Unfortunately, the current algorithm does not allow
                    # getEpsilonTarget to return two configurations, so
                    # additional modifications are needed before we can support
                    # the split operation.
                    lexerActionExecutor = LexerActionExecutor.append(config.lexerActionExecutor,
                                    self.atn.lexerActions[t.actionIndex])
                    c = LexerATNConfig(state=t.target, config=config, lexerActionExecutor=lexerActionExecutor)

                else:
                    # ignore actions in referenced rules
                    c = LexerATNConfig(state=t.target, config=config)

        elif t.serializationType==Transition.EPSILON:
            c = LexerATNConfig(state=t.target, config=config)

        elif t.serializationType in [ Transition.ATOM, Transition.RANGE, Transition.SET ]:
            if treatEofAsEpsilon:
                if t.matches(Token.EOF, 0, self.MAX_CHAR_VALUE):
                    c = LexerATNConfig(state=t.target, config=config)

        return c

    # Evaluate a predicate specified in the lexer.
    #
    # <p>If {@code speculative} is {@code true}, this method was called before
    # {@link #consume} for the matched character. This method should call
    # {@link #consume} before evaluating the predicate to ensure position
    # sensitive values, including {@link Lexer#getText}, {@link Lexer#getLine},
    # and {@link Lexer#getcolumn}, properly reflect the current
    # lexer state. This method should restore {@code input} and the simulator
    # to the original state before returning (i.e. undo the actions made by the
    # call to {@link #consume}.</p>
    #
    # @param input The input stream.
    # @param ruleIndex The rule containing the predicate.
    # @param predIndex The index of the predicate within the rule.
    # @param speculative {@code true} if the current index in {@code input} is
    # one character before the predicate's location.
    #
    # @return {@code true} if the specified predicate evaluates to
    # {@code true}.
    #/
    def evaluatePredicate(self, input:InputStream, ruleIndex:int, predIndex:int, speculative:bool):
        # assume true if no recognizer was provided
        if self.recog is None:
            return True

        if not speculative:
            return self.recog.sempred(None, ruleIndex, predIndex)

        savedcolumn = self.column
        savedLine = self.line
        index = input.index
        marker = input.mark()
        try:
            self.consume(input)
            return self.recog.sempred(None, ruleIndex, predIndex)
        finally:
            self.column = savedcolumn
            self.line = savedLine
            input.seek(index)
            input.release(marker)

    def captureSimState(self, settings:SimState, input:InputStream, dfaState:DFAState):
        settings.index = input.index
        settings.line = self.line
        settings.column = self.column
        settings.dfaState = dfaState

    def addDFAEdge(self, from_:DFAState, tk:int, to:DFAState=None, cfgs:ATNConfigSet=None) -> DFAState:

        if to is None and cfgs is not None:
            # leading to this call, ATNConfigSet.hasSemanticContext is used as a
            # marker indicating dynamic predicate evaluation makes this edge
            # dependent on the specific input sequence, so the static edge in the
            # DFA should be omitted. The target DFAState is still created since
            # execATN has the ability to resynchronize with the DFA state cache
            # following the predicate evaluation step.
            #
            # TJP notes: next time through the DFA, we see a pred again and eval.
            # If that gets us to a previously created (but dangling) DFA
            # state, we can continue in pure DFA mode from there.
            #/
            suppressEdge = cfgs.hasSemanticContext
            cfgs.hasSemanticContext = False

            to = self.addDFAState(cfgs)

            if suppressEdge:
                return to

        # add the edge
        if tk < self.MIN_DFA_EDGE or tk > self.MAX_DFA_EDGE:
            # Only track edges within the DFA bounds
            return to

        if LexerATNSimulator.debug:
            print("EDGE " + str(from_) + " -> " + str(to) + " upon "+ chr(tk))

        if from_.edges is None:
            #  make room for tokens 1..n and -1 masquerading as index 0
            from_.edges = [ None ] * (self.MAX_DFA_EDGE - self.MIN_DFA_EDGE + 1)

        from_.edges[tk - self.MIN_DFA_EDGE] = to # connect

        return to


    # Add a new DFA state if there isn't one with this set of
    # configurations already. This method also detects the first
    # configuration containing an ATN rule stop state. Later, when
    # traversing the DFA, we will know which rule to accept.
    def addDFAState(self, configs:ATNConfigSet) -> DFAState:

        proposed = DFAState(configs=configs)
        firstConfigWithRuleStopState = next((cfg for cfg in configs if isinstance(cfg.state, RuleStopState)), None)

        if firstConfigWithRuleStopState is not None:
            proposed.isAcceptState = True
            proposed.lexerActionExecutor = firstConfigWithRuleStopState.lexerActionExecutor
            proposed.prediction = self.atn.ruleToTokenType[firstConfigWithRuleStopState.state.ruleIndex]

        dfa = self.decisionToDFA[self.mode]
        existing = dfa.states.get(proposed, None)
        if existing is not None:
            return existing

        newState = proposed

        newState.stateNumber = len(dfa.states)
        configs.setReadonly(True)
        newState.configs = configs
        dfa.states[newState] = newState
        return newState

    def getDFA(self, mode:int):
        return self.decisionToDFA[mode]

    # Get the text matched so far for the current token.
    def getText(self, input:InputStream):
        # index is first lookahead char, don't include.
        return input.getText(self.startIndex, input.index-1)

    def consume(self, input:InputStream):
        curChar = input.LA(1)
        if curChar==ord('\n'):
            self.line += 1
            self.column = 0
        else:
            self.column += 1
        input.consume()

    def getTokenName(self, t:int):
        if t==-1:
            return "EOF"
        else:
            return "'" + chr(t) + "'"


LexerATNSimulator.ERROR = DFAState(0x7FFFFFFF, ATNConfigSet())

del Lexer


// File: venv\Lib\site-packages\antlr4\atn\ParserATNSimulator.py
----------------------------------------
#
# Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
# Use of this file is governed by the BSD 3-clause license that
# can be found in the LICENSE.txt file in the project root.
#

#
# The embodiment of the adaptive LL(*), ALL(*), parsing strategy.
#
# <p>
# The basic complexity of the adaptive strategy makes it harder to understand.
# We begin with ATN simulation to build paths in a DFA. Subsequent prediction
# requests go through the DFA first. If they reach a state without an edge for
# the current symbol, the algorithm fails over to the ATN simulation to
# complete the DFA path for the current input (until it finds a conflict state
# or uniquely predicting state).</p>
#
# <p>
# All of that is done without using the outer context because we want to create
# a DFA that is not dependent upon the rule invocation stack when we do a
# prediction. One DFA works in all contexts. We avoid using context not
# necessarily because it's slower, although it can be, but because of the DFA
# caching problem. The closure routine only considers the rule invocation stack
# created during prediction beginning in the decision rule. For example, if
# prediction occurs without invoking another rule's ATN, there are no context
# stacks in the configurations. When lack of context leads to a conflict, we
# don't know if it's an ambiguity or a weakness in the strong LL(*) parsing
# strategy (versus full LL(*)).</p>
#
# <p>
# When SLL yields a configuration set with conflict, we rewind the input and
# retry the ATN simulation, this time using full outer context without adding
# to the DFA. Configuration context stacks will be the full invocation stacks
# from the start rule. If we get a conflict using full context, then we can
# definitively say we have a true ambiguity for that input sequence. If we
# don't get a conflict, it implies that the decision is sensitive to the outer
# context. (It is not context-sensitive in the sense of context-sensitive
# grammars.)</p>
#
# <p>
# The next time we reach this DFA state with an SLL conflict, through DFA
# simulation, we will again retry the ATN simulation using full context mode.
# This is slow because we can't save the results and have to "interpret" the
# ATN each time we get that input.</p>
#
# <p>
# <strong>CACHING FULL CONTEXT PREDICTIONS</strong></p>
#
# <p>
# We could cache results from full context to predicted alternative easily and
# that saves a lot of time but doesn't work in presence of predicates. The set
# of visible predicates from the ATN start state changes depending on the
# context, because closure can fall off the end of a rule. I tried to cache
# tuples (stack context, semantic context, predicted alt) but it was slower
# than interpreting and much more complicated. Also required a huge amount of
# memory. The goal is not to create the world's fastest parser anyway. I'd like
# to keep this algorithm simple. By launching multiple threads, we can improve
# the speed of parsing across a large number of files.</p>
#
# <p>
# There is no strict ordering between the amount of input used by SLL vs LL,
# which makes it really hard to build a cache for full context. Let's say that
# we have input A B C that leads to an SLL conflict with full context X. That
# implies that using X we might only use A B but we could also use A B C D to
# resolve conflict. Input A B C D could predict alternative 1 in one position
# in the input and A B C E could predict alternative 2 in another position in
# input. The conflicting SLL configurations could still be non-unique in the
# full context prediction, which would lead us to requiring more input than the
# original A B C.	To make a	prediction cache work, we have to track	the exact
# input	used during the previous prediction. That amounts to a cache that maps
# X to a specific DFA for that context.</p>
#
# <p>
# Something should be done for left-recursive expression predictions. They are
# likely LL(1) + pred eval. Easier to do the whole SLL unless error and retry
# with full LL thing Sam does.</p>
#
# <p>
# <strong>AVOIDING FULL CONTEXT PREDICTION</strong></p>
#
# <p>
# We avoid doing full context retry when the outer context is empty, we did not
# dip into the outer context by falling off the end of the decision state rule,
# or when we force SLL mode.</p>
#
# <p>
# As an example of the not dip into outer context case, consider as super
# constructor calls versus function calls. One grammar might look like
# this:</p>
#
# <pre>
# ctorBody
#   : '{' superCall? stat* '}'
#   ;
# </pre>
#
# <p>
# Or, you might see something like</p>
#
# <pre>
# stat
#   : superCall ';'
#   | expression ';'
#   | ...
#   ;
# </pre>
#
# <p>
# In both cases I believe that no closure operations will dip into the outer
# context. In the first case ctorBody in the worst case will stop at the '}'.
# In the 2nd case it should stop at the ';'. Both cases should stay within the
# entry rule and not dip into the outer context.</p>
#
# <p>
# <strong>PREDICATES</strong></p>
#
# <p>
# Predicates are always evaluated if present in either SLL or LL both. SLL and
# LL simulation deals with predicates differently. SLL collects predicates as
# it performs closure operations like ANTLR v3 did. It delays predicate
# evaluation until it reaches and accept state. This allows us to cache the SLL
# ATN simulation whereas, if we had evaluated predicates on-the-fly during
# closure, the DFA state configuration sets would be different and we couldn't
# build up a suitable DFA.</p>
#
# <p>
# When building a DFA accept state during ATN simulation, we evaluate any
# predicates and return the sole semantically valid alternative. If there is
# more than 1 alternative, we report an ambiguity. If there are 0 alternatives,
# we throw an exception. Alternatives without predicates act like they have
# true predicates. The simple way to think about it is to strip away all
# alternatives with false predicates and choose the minimum alternative that
# remains.</p>
#
# <p>
# When we start in the DFA and reach an accept state that's predicated, we test
# those and return the minimum semantically viable alternative. If no
# alternatives are viable, we throw an exception.</p>
#
# <p>
# During full LL ATN simulation, closure always evaluates predicates and
# on-the-fly. This is crucial to reducing the configuration set size during
# closure. It hits a landmine when parsing with the Java grammar, for example,
# without this on-the-fly evaluation.</p>
#
# <p>
# <strong>SHARING DFA</strong></p>
#
# <p>
# All instances of the same parser share the same decision DFAs through a
# static field. Each instance gets its own ATN simulator but they share the
# same {@link #decisionToDFA} field. They also share a
# {@link PredictionContextCache} object that makes sure that all
# {@link PredictionContext} objects are shared among the DFA states. This makes
# a big size difference.</p>
#
# <p>
# <strong>THREAD SAFETY</strong></p>
#
# <p>
# The {@link ParserATNSimulator} locks on the {@link #decisionToDFA} field when
# it adds a new DFA object to that array. {@link #addDFAEdge}
# locks on the DFA for the current decision when setting the
# {@link DFAState#edges} field. {@link #addDFAState} locks on
# the DFA for the current decision when looking up a DFA state to see if it
# already exists. We must make sure that all requests to add DFA states that
# are equivalent result in the same shared DFA object. This is because lots of
# threads will be trying to update the DFA at once. The
# {@link #addDFAState} method also locks inside the DFA lock
# but this time on the shared context cache when it rebuilds the
# configurations' {@link PredictionContext} objects using cached
# subgraphs/nodes. No other locking occurs, even during DFA simulation. This is
# safe as long as we can guarantee that all threads referencing
# {@code s.edge[t]} get the same physical target {@link DFAState}, or
# {@code null}. Once into the DFA, the DFA simulation does not reference the
# {@link DFA#states} map. It follows the {@link DFAState#edges} field to new
# targets. The DFA simulator will either find {@link DFAState#edges} to be
# {@code null}, to be non-{@code null} and {@code dfa.edges[t]} null, or
# {@code dfa.edges[t]} to be non-null. The
# {@link #addDFAEdge} method could be racing to set the field
# but in either case the DFA simulator works; if {@code null}, and requests ATN
# simulation. It could also race trying to get {@code dfa.edges[t]}, but either
# way it will work because it's not doing a test and set operation.</p>
#
# <p>
# <strong>Starting with SLL then failing to combined SLL/LL (Two-Stage
# Parsing)</strong></p>
#
# <p>
# Sam pointed out that if SLL does not give a syntax error, then there is no
# point in doing full LL, which is slower. We only have to try LL if we get a
# syntax error. For maximum speed, Sam starts the parser set to pure SLL
# mode with the {@link BailErrorStrategy}:</p>
#
# <pre>
# parser.{@link Parser#getInterpreter() getInterpreter()}.{@link #setPredictionMode setPredictionMode}{@code (}{@link PredictionMode#SLL}{@code )};
# parser.{@link Parser#setErrorHandler setErrorHandler}(new {@link BailErrorStrategy}());
# </pre>
#
# <p>
# If it does not get a syntax error, then we're done. If it does get a syntax
# error, we need to retry with the combined SLL/LL strategy.</p>
#
# <p>
# The reason this works is as follows. If there are no SLL conflicts, then the
# grammar is SLL (at least for that input set). If there is an SLL conflict,
# the full LL analysis must yield a set of viable alternatives which is a
# subset of the alternatives reported by SLL. If the LL set is a singleton,
# then the grammar is LL but not SLL. If the LL set is the same size as the SLL
# set, the decision is SLL. If the LL set has size &gt; 1, then that decision
# is truly ambiguous on the current input. If the LL set is smaller, then the
# SLL conflict resolution might choose an alternative that the full LL would
# rule out as a possibility based upon better context information. If that's
# the case, then the SLL parse will definitely get an error because the full LL
# analysis says it's not viable. If SLL conflict resolution chooses an
# alternative within the LL set, them both SLL and LL would choose the same
# alternative because they both choose the minimum of multiple conflicting
# alternatives.</p>
#
# <p>
# Let's say we have a set of SLL conflicting alternatives {@code {1, 2, 3}} and
# a smaller LL set called <em>s</em>. If <em>s</em> is {@code {2, 3}}, then SLL
# parsing will get an error because SLL will pursue alternative 1. If
# <em>s</em> is {@code {1, 2}} or {@code {1, 3}} then both SLL and LL will
# choose the same alternative because alternative one is the minimum of either
# set. If <em>s</em> is {@code {2}} or {@code {3}} then SLL will get a syntax
# error. If <em>s</em> is {@code {1}} then SLL will succeed.</p>
#
# <p>
# Of course, if the input is invalid, then we will get an error for sure in
# both SLL and LL parsing. Erroneous input will therefore require 2 passes over
# the input.</p>
#
import sys
from antlr4 import DFA
from antlr4.PredictionContext import PredictionContextCache, PredictionContext, SingletonPredictionContext, \
    PredictionContextFromRuleContext
from antlr4.BufferedTokenStream import TokenStream
from antlr4.Parser import Parser
from antlr4.ParserRuleContext import ParserRuleContext
from antlr4.RuleContext import RuleContext
from antlr4.Token import Token
from antlr4.Utils import str_list
from antlr4.atn.ATN import ATN
from antlr4.atn.ATNConfig import ATNConfig
from antlr4.atn.ATNConfigSet import ATNConfigSet
from antlr4.atn.ATNSimulator import ATNSimulator
from antlr4.atn.ATNState import StarLoopEntryState, DecisionState, RuleStopState, ATNState
from antlr4.atn.PredictionMode import PredictionMode
from antlr4.atn.SemanticContext import SemanticContext, AND, andContext, orContext
from antlr4.atn.Transition import Transition, RuleTransition, ActionTransition, PrecedencePredicateTransition, \
    PredicateTransition, AtomTransition, SetTransition, NotSetTransition
from antlr4.dfa.DFAState import DFAState, PredPrediction
from antlr4.error.Errors import NoViableAltException


class ParserATNSimulator(ATNSimulator):
    __slots__ = (
        'parser', 'decisionToDFA', 'predictionMode', '_input', '_startIndex',
        '_outerContext', '_dfa', 'mergeCache'
    )

    debug = False
    debug_list_atn_decisions = False
    dfa_debug = False
    retry_debug = False


    def __init__(self, parser:Parser, atn:ATN, decisionToDFA:list, sharedContextCache:PredictionContextCache):
        super().__init__(atn, sharedContextCache)
        self.parser = parser
        self.decisionToDFA = decisionToDFA
        # SLL, LL, or LL + exact ambig detection?#
        self.predictionMode = PredictionMode.LL
        # LAME globals to avoid parameters!!!!! I need these down deep in predTransition
        self._input = None
        self._startIndex = 0
        self._outerContext = None
        self._dfa = None
        # Each prediction operation uses a cache for merge of prediction contexts.
        #  Don't keep around as it wastes huge amounts of memory. DoubleKeyMap
        #  isn't synchronized but we're ok since two threads shouldn't reuse same
        #  parser/atnsim object because it can only handle one input at a time.
        #  This maps graphs a and b to merged result c. (a,b)&rarr;c. We can avoid
        #  the merge if we ever see a and b again.  Note that (b,a)&rarr;c should
        #  also be examined during cache lookup.
        #
        self.mergeCache = None


    def reset(self):
        pass

    def adaptivePredict(self, input:TokenStream, decision:int, outerContext:ParserRuleContext):
        if ParserATNSimulator.debug or ParserATNSimulator.debug_list_atn_decisions:
            print("adaptivePredict decision " + str(decision) +
                                   " exec LA(1)==" + self.getLookaheadName(input) +
                                   " line " + str(input.LT(1).line) + ":" +
                                   str(input.LT(1).column))
        self._input = input
        self._startIndex = input.index
        self._outerContext = outerContext

        dfa = self.decisionToDFA[decision]
        self._dfa = dfa
        m = input.mark()
        index = input.index

        # Now we are certain to have a specific decision's DFA
        # But, do we still need an initial state?
        try:
            if dfa.precedenceDfa:
                # the start state for a precedence DFA depends on the current
                # parser precedence, and is provided by a DFA method.
                s0 = dfa.getPrecedenceStartState(self.parser.getPrecedence())
            else:
                # the start state for a "regular" DFA is just s0
                s0 = dfa.s0

            if s0 is None:
                if outerContext is None:
                    outerContext = ParserRuleContext.EMPTY
                if ParserATNSimulator.debug or ParserATNSimulator.debug_list_atn_decisions:
                    print("predictATN decision " + str(dfa.decision) +
                                       " exec LA(1)==" + self.getLookaheadName(input) +
                                       ", outerContext=" + outerContext.toString(self.parser.literalNames, None))

                fullCtx = False
                s0_closure = self.computeStartState(dfa.atnStartState, ParserRuleContext.EMPTY, fullCtx)

                if dfa.precedenceDfa:
                    # If this is a precedence DFA, we use applyPrecedenceFilter
                    # to convert the computed start state to a precedence start
                    # state. We then use DFA.setPrecedenceStartState to set the
                    # appropriate start state for the precedence level rather
                    # than simply setting DFA.s0.
                    #
                    dfa.s0.configs = s0_closure # not used for prediction but useful to know start configs anyway
                    s0_closure = self.applyPrecedenceFilter(s0_closure)
                    s0 = self.addDFAState(dfa, DFAState(configs=s0_closure))
                    dfa.setPrecedenceStartState(self.parser.getPrecedence(), s0)
                else:
                    s0 = self.addDFAState(dfa, DFAState(configs=s0_closure))
                    dfa.s0 = s0

            alt = self.execATN(dfa, s0, input, index, outerContext)
            if ParserATNSimulator.debug:
                print("DFA after predictATN: " + dfa.toString(self.parser.literalNames))
            return alt
        finally:
            self._dfa = None
            self.mergeCache = None # wack cache after each prediction
            input.seek(index)
            input.release(m)

    # Performs ATN simulation to compute a predicted alternative based
    #  upon the remaining input, but also updates the DFA cache to avoid
    #  having to traverse the ATN again for the same input sequence.

    # There are some key conditions we're looking for after computing a new
    # set of ATN configs (proposed DFA state):
          # if the set is empty, there is no viable alternative for current symbol
          # does the state uniquely predict an alternative?
          # does the state have a conflict that would prevent us from
          #   putting it on the work list?

    # We also have some key operations to do:
          # add an edge from previous DFA state to potentially new DFA state, D,
          #   upon current symbol but only if adding to work list, which means in all
          #   cases except no viable alternative (and possibly non-greedy decisions?)
          # collecting predicates and adding semantic context to DFA accept states
          # adding rule context to context-sensitive DFA accept states
          # consuming an input symbol
          # reporting a conflict
          # reporting an ambiguity
          # reporting a context sensitivity
          # reporting insufficient predicates

    # cover these cases:
    #    dead end
    #    single alt
    #    single alt + preds
    #    conflict
    #    conflict + preds
    #
    def execATN(self, dfa:DFA, s0:DFAState, input:TokenStream, startIndex:int, outerContext:ParserRuleContext ):
        if ParserATNSimulator.debug or ParserATNSimulator.debug_list_atn_decisions:
            print("execATN decision " + str(dfa.decision) +
                    " exec LA(1)==" + self.getLookaheadName(input) +
                    " line " + str(input.LT(1).line) + ":" + str(input.LT(1).column))

        previousD = s0

        if ParserATNSimulator.debug:
            print("s0 = " + str(s0))

        t = input.LA(1)

        while True: # while more work
            D = self.getExistingTargetState(previousD, t)
            if D is None:
                D = self.computeTargetState(dfa, previousD, t)
            if D is self.ERROR:
                # if any configs in previous dipped into outer context, that
                # means that input up to t actually finished entry rule
                # at least for SLL decision. Full LL doesn't dip into outer
                # so don't need special case.
                # We will get an error no matter what so delay until after
                # decision; better error message. Also, no reachable target
                # ATN states in SLL implies LL will also get nowhere.
                # If conflict in states that dip out, choose min since we
                # will get error no matter what.
                e = self.noViableAlt(input, outerContext, previousD.configs, startIndex)
                input.seek(startIndex)
                alt = self.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(previousD.configs, outerContext)
                if alt!=ATN.INVALID_ALT_NUMBER:
                    return alt
                raise e

            if D.requiresFullContext and self.predictionMode != PredictionMode.SLL:
                # IF PREDS, MIGHT RESOLVE TO SINGLE ALT => SLL (or syntax error)
                conflictingAlts = D.configs.conflictingAlts
                if D.predicates is not None:
                    if ParserATNSimulator.debug:
                        print("DFA state has preds in DFA sim LL failover")
                    conflictIndex = input.index
                    if conflictIndex != startIndex:
                        input.seek(startIndex)

                    conflictingAlts = self.evalSemanticContext(D.predicates, outerContext, True)
                    if len(conflictingAlts)==1:
                        if ParserATNSimulator.debug:
                            print("Full LL avoided")
                        return min(conflictingAlts)

                    if conflictIndex != startIndex:
                        # restore the index so reporting the fallback to full
                        # context occurs with the index at the correct spot
                        input.seek(conflictIndex)

                if ParserATNSimulator.dfa_debug:
                    print("ctx sensitive state " + str(outerContext) +" in " + str(D))
                fullCtx = True
                s0_closure = self.computeStartState(dfa.atnStartState, outerContext, fullCtx)
                self.reportAttemptingFullContext(dfa, conflictingAlts, D.configs, startIndex, input.index)
                alt = self.execATNWithFullContext(dfa, D, s0_closure, input, startIndex, outerContext)
                return alt

            if D.isAcceptState:
                if D.predicates is None:
                    return D.prediction

                stopIndex = input.index
                input.seek(startIndex)
                alts = self.evalSemanticContext(D.predicates, outerContext, True)
                if len(alts)==0:
                    raise self.noViableAlt(input, outerContext, D.configs, startIndex)
                elif len(alts)==1:
                    return min(alts)
                else:
                    # report ambiguity after predicate evaluation to make sure the correct
                    # set of ambig alts is reported.
                    self.reportAmbiguity(dfa, D, startIndex, stopIndex, False, alts, D.configs)
                    return min(alts)

            previousD = D

            if t != Token.EOF:
                input.consume()
                t = input.LA(1)

    #
    # Get an existing target state for an edge in the DFA. If the target state
    # for the edge has not yet been computed or is otherwise not available,
    # this method returns {@code null}.
    #
    # @param previousD The current DFA state
    # @param t The next input symbol
    # @return The existing target DFA state for the given input symbol
    # {@code t}, or {@code null} if the target state for this edge is not
    # already cached
    #
    def getExistingTargetState(self, previousD:DFAState, t:int):
        edges = previousD.edges
        if edges is None or t + 1 < 0 or t + 1 >= len(edges):
            return None
        else:
            return edges[t + 1]

    #
    # Compute a target state for an edge in the DFA, and attempt to add the
    # computed state and corresponding edge to the DFA.
    #
    # @param dfa The DFA
    # @param previousD The current DFA state
    # @param t The next input symbol
    #
    # @return The computed target DFA state for the given input symbol
    # {@code t}. If {@code t} does not lead to a valid DFA state, this method
    # returns {@link #ERROR}.
    #
    def computeTargetState(self, dfa:DFA, previousD:DFAState, t:int):
        reach = self.computeReachSet(previousD.configs, t, False)
        if reach is None:
            self.addDFAEdge(dfa, previousD, t, self.ERROR)
            return self.ERROR

        # create new target state; we'll add to DFA after it's complete
        D = DFAState(configs=reach)

        predictedAlt = self.getUniqueAlt(reach)

        if ParserATNSimulator.debug:
            altSubSets = PredictionMode.getConflictingAltSubsets(reach)
            print("SLL altSubSets=" + str(altSubSets) + ", configs=" + str(reach) +
                        ", predict=" + str(predictedAlt) + ", allSubsetsConflict=" +
                        str(PredictionMode.allSubsetsConflict(altSubSets)) + ", conflictingAlts=" +
                        str(self.getConflictingAlts(reach)))

        if predictedAlt!=ATN.INVALID_ALT_NUMBER:
            # NO CONFLICT, UNIQUELY PREDICTED ALT
            D.isAcceptState = True
            D.configs.uniqueAlt = predictedAlt
            D.prediction = predictedAlt
        elif PredictionMode.hasSLLConflictTerminatingPrediction(self.predictionMode, reach):
            # MORE THAN ONE VIABLE ALTERNATIVE
            D.configs.conflictingAlts = self.getConflictingAlts(reach)
            D.requiresFullContext = True
            # in SLL-only mode, we will stop at this state and return the minimum alt
            D.isAcceptState = True
            D.prediction = min(D.configs.conflictingAlts)

        if D.isAcceptState and D.configs.hasSemanticContext:
            self.predicateDFAState(D, self.atn.getDecisionState(dfa.decision))
            if D.predicates is not None:
                D.prediction = ATN.INVALID_ALT_NUMBER

        # all adds to dfa are done after we've created full D state
        D = self.addDFAEdge(dfa, previousD, t, D)
        return D

    def predicateDFAState(self, dfaState:DFAState, decisionState:DecisionState):
        # We need to test all predicates, even in DFA states that
        # uniquely predict alternative.
        nalts = len(decisionState.transitions)
        # Update DFA so reach becomes accept state with (predicate,alt)
        # pairs if preds found for conflicting alts
        altsToCollectPredsFrom = self.getConflictingAltsOrUniqueAlt(dfaState.configs)
        altToPred = self.getPredsForAmbigAlts(altsToCollectPredsFrom, dfaState.configs, nalts)
        if altToPred is not None:
            dfaState.predicates = self.getPredicatePredictions(altsToCollectPredsFrom, altToPred)
            dfaState.prediction = ATN.INVALID_ALT_NUMBER # make sure we use preds
        else:
            # There are preds in configs but they might go away
            # when OR'd together like {p}? || NONE == NONE. If neither
            # alt has preds, resolve to min alt
            dfaState.prediction = min(altsToCollectPredsFrom)

    # comes back with reach.uniqueAlt set to a valid alt
    def execATNWithFullContext(self, dfa:DFA, D:DFAState, # how far we got before failing over
                                         s0:ATNConfigSet,
                                         input:TokenStream,
                                         startIndex:int,
                                         outerContext:ParserRuleContext):
        if ParserATNSimulator.debug or ParserATNSimulator.debug_list_atn_decisions:
            print("execATNWithFullContext", str(s0))
        fullCtx = True
        foundExactAmbig = False
        reach = None
        previous = s0
        input.seek(startIndex)
        t = input.LA(1)
        predictedAlt = -1
        while (True): # while more work
            reach = self.computeReachSet(previous, t, fullCtx)
            if reach is None:
                # if any configs in previous dipped into outer context, that
                # means that input up to t actually finished entry rule
                # at least for LL decision. Full LL doesn't dip into outer
                # so don't need special case.
                # We will get an error no matter what so delay until after
                # decision; better error message. Also, no reachable target
                # ATN states in SLL implies LL will also get nowhere.
                # If conflict in states that dip out, choose min since we
                # will get error no matter what.
                e = self.noViableAlt(input, outerContext, previous, startIndex)
                input.seek(startIndex)
                alt = self.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(previous, outerContext)
                if alt!=ATN.INVALID_ALT_NUMBER:
                    return alt
                else:
                    raise e

            altSubSets = PredictionMode.getConflictingAltSubsets(reach)
            if ParserATNSimulator.debug:
                print("LL altSubSets=" + str(altSubSets) + ", predict=" +
                      str(PredictionMode.getUniqueAlt(altSubSets)) + ", resolvesToJustOneViableAlt=" +
                      str(PredictionMode.resolvesToJustOneViableAlt(altSubSets)))

            reach.uniqueAlt = self.getUniqueAlt(reach)
            # unique prediction?
            if reach.uniqueAlt!=ATN.INVALID_ALT_NUMBER:
                predictedAlt = reach.uniqueAlt
                break
            elif self.predictionMode is not PredictionMode.LL_EXACT_AMBIG_DETECTION:
                predictedAlt = PredictionMode.resolvesToJustOneViableAlt(altSubSets)
                if predictedAlt != ATN.INVALID_ALT_NUMBER:
                    break
            else:
                # In exact ambiguity mode, we never try to terminate early.
                # Just keeps scarfing until we know what the conflict is
                if PredictionMode.allSubsetsConflict(altSubSets) and PredictionMode.allSubsetsEqual(altSubSets):
                    foundExactAmbig = True
                    predictedAlt = PredictionMode.getSingleViableAlt(altSubSets)
                    break
                # else there are multiple non-conflicting subsets or
                # we're not sure what the ambiguity is yet.
                # So, keep going.

            previous = reach
            if t != Token.EOF:
                input.consume()
                t = input.LA(1)

        # If the configuration set uniquely predicts an alternative,
        # without conflict, then we know that it's a full LL decision
        # not SLL.
        if reach.uniqueAlt != ATN.INVALID_ALT_NUMBER :
            self.reportContextSensitivity(dfa, predictedAlt, reach, startIndex, input.index)
            return predictedAlt

        # We do not check predicates here because we have checked them
        # on-the-fly when doing full context prediction.

        #
        # In non-exact ambiguity detection mode, we might	actually be able to
        # detect an exact ambiguity, but I'm not going to spend the cycles
        # needed to check. We only emit ambiguity warnings in exact ambiguity
        # mode.
        #
        # For example, we might know that we have conflicting configurations.
        # But, that does not mean that there is no way forward without a
        # conflict. It's possible to have nonconflicting alt subsets as in:

        # altSubSets=[{1, 2}, {1, 2}, {1}, {1, 2}]

        # from
        #
        #    [(17,1,[5 $]), (13,1,[5 10 $]), (21,1,[5 10 $]), (11,1,[$]),
        #     (13,2,[5 10 $]), (21,2,[5 10 $]), (11,2,[$])]
        #
        # In this case, (17,1,[5 $]) indicates there is some next sequence that
        # would resolve this without conflict to alternative 1. Any other viable
        # next sequence, however, is associated with a conflict.  We stop
        # looking for input because no amount of further lookahead will alter
        # the fact that we should predict alternative 1.  We just can't say for
        # sure that there is an ambiguity without looking further.

        self.reportAmbiguity(dfa, D, startIndex, input.index, foundExactAmbig, None, reach)

        return predictedAlt

    def computeReachSet(self, closure:ATNConfigSet, t:int, fullCtx:bool):
        if ParserATNSimulator.debug:
            print("in computeReachSet, starting closure: " + str(closure))

        if self.mergeCache is None:
            self.mergeCache = dict()

        intermediate = ATNConfigSet(fullCtx)

        # Configurations already in a rule stop state indicate reaching the end
        # of the decision rule (local context) or end of the start rule (full
        # context). Once reached, these configurations are never updated by a
        # closure operation, so they are handled separately for the performance
        # advantage of having a smaller intermediate set when calling closure.
        #
        # For full-context reach operations, separate handling is required to
        # ensure that the alternative matching the longest overall sequence is
        # chosen when multiple such configurations can match the input.

        skippedStopStates = None

        # First figure out where we can reach on input t
        for c in closure:
            if ParserATNSimulator.debug:
                print("testing " + self.getTokenName(t) + " at " + str(c))

            if isinstance(c.state, RuleStopState):
                if fullCtx or t == Token.EOF:
                    if skippedStopStates is None:
                        skippedStopStates = list()
                    skippedStopStates.append(c)
                continue

            for trans in c.state.transitions:
                target = self.getReachableTarget(trans, t)
                if target is not None:
                    intermediate.add(ATNConfig(state=target, config=c), self.mergeCache)

        # Now figure out where the reach operation can take us...

        reach = None

        # This block optimizes the reach operation for intermediate sets which
        # trivially indicate a termination state for the overall
        # adaptivePredict operation.
        #
        # The conditions assume that intermediate
        # contains all configurations relevant to the reach set, but this
        # condition is not true when one or more configurations have been
        # withheld in skippedStopStates, or when the current symbol is EOF.
        #
        if skippedStopStates is None and t!=Token.EOF:
            if len(intermediate)==1:
                # Don't pursue the closure if there is just one state.
                # It can only have one alternative; just add to result
                # Also don't pursue the closure if there is unique alternative
                # among the configurations.
                reach = intermediate
            elif self.getUniqueAlt(intermediate)!=ATN.INVALID_ALT_NUMBER:
                # Also don't pursue the closure if there is unique alternative
                # among the configurations.
                reach = intermediate

        # If the reach set could not be trivially determined, perform a closure
        # operation on the intermediate set to compute its initial value.
        #
        if reach is None:
            reach = ATNConfigSet(fullCtx)
            closureBusy = set()
            treatEofAsEpsilon = t == Token.EOF
            for c in intermediate:
                self.closure(c, reach, closureBusy, False, fullCtx, treatEofAsEpsilon)

        if t == Token.EOF:
            # After consuming EOF no additional input is possible, so we are
            # only interested in configurations which reached the end of the
            # decision rule (local context) or end of the start rule (full
            # context). Update reach to contain only these configurations. This
            # handles both explicit EOF transitions in the grammar and implicit
            # EOF transitions following the end of the decision or start rule.
            #
            # When reach==intermediate, no closure operation was performed. In
            # this case, removeAllConfigsNotInRuleStopState needs to check for
            # reachable rule stop states as well as configurations already in
            # a rule stop state.
            #
            # This is handled before the configurations in skippedStopStates,
            # because any configurations potentially added from that list are
            # already guaranteed to meet this condition whether or not it's
            # required.
            #
            reach = self.removeAllConfigsNotInRuleStopState(reach, reach is intermediate)

        # If skippedStopStates is not null, then it contains at least one
        # configuration. For full-context reach operations, these
        # configurations reached the end of the start rule, in which case we
        # only add them back to reach if no configuration during the current
        # closure operation reached such a state. This ensures adaptivePredict
        # chooses an alternative matching the longest overall sequence when
        # multiple alternatives are viable.
        #
        if skippedStopStates is not None and ( (not fullCtx) or (not PredictionMode.hasConfigInRuleStopState(reach))):
            for c in skippedStopStates:
                reach.add(c, self.mergeCache)
        if len(reach)==0:
            return None
        else:
            return reach

    #
    # Return a configuration set containing only the configurations from
    # {@code configs} which are in a {@link RuleStopState}. If all
    # configurations in {@code configs} are already in a rule stop state, this
    # method simply returns {@code configs}.
    #
    # <p>When {@code lookToEndOfRule} is true, this method uses
    # {@link ATN#nextTokens} for each configuration in {@code configs} which is
    # not already in a rule stop state to see if a rule stop state is reachable
    # from the configuration via epsilon-only transitions.</p>
    #
    # @param configs the configuration set to update
    # @param lookToEndOfRule when true, this method checks for rule stop states
    # reachable by epsilon-only transitions from each configuration in
    # {@code configs}.
    #
    # @return {@code configs} if all configurations in {@code configs} are in a
    # rule stop state, otherwise return a new configuration set containing only
    # the configurations from {@code configs} which are in a rule stop state
    #
    def removeAllConfigsNotInRuleStopState(self, configs:ATNConfigSet, lookToEndOfRule:bool):
        if PredictionMode.allConfigsInRuleStopStates(configs):
            return configs
        result = ATNConfigSet(configs.fullCtx)
        for config in configs:
            if isinstance(config.state, RuleStopState):
                result.add(config, self.mergeCache)
                continue
            if lookToEndOfRule and config.state.epsilonOnlyTransitions:
                nextTokens = self.atn.nextTokens(config.state)
                if Token.EPSILON in nextTokens:
                    endOfRuleState = self.atn.ruleToStopState[config.state.ruleIndex]
                    result.add(ATNConfig(state=endOfRuleState, config=config), self.mergeCache)
        return result

    def computeStartState(self, p:ATNState, ctx:RuleContext, fullCtx:bool):
        # always at least the implicit call to start rule
        initialContext = PredictionContextFromRuleContext(self.atn, ctx)
        configs = ATNConfigSet(fullCtx)

        for i in range(0, len(p.transitions)):
            target = p.transitions[i].target
            c = ATNConfig(target, i+1, initialContext)
            closureBusy = set()
            self.closure(c, configs, closureBusy, True, fullCtx, False)
        return configs

    #
    # This method transforms the start state computed by
    # {@link #computeStartState} to the special start state used by a
    # precedence DFA for a particular precedence value. The transformation
    # process applies the following changes to the start state's configuration
    # set.
    #
    # <ol>
    # <li>Evaluate the precedence predicates for each configuration using
    # {@link SemanticContext#evalPrecedence}.</li>
    # <li>Remove all configurations which predict an alternative greater than
    # 1, for which another configuration that predicts alternative 1 is in the
    # same ATN state with the same prediction context. This transformation is
    # valid for the following reasons:
    # <ul>
    # <li>The closure block cannot contain any epsilon transitions which bypass
    # the body of the closure, so all states reachable via alternative 1 are
    # part of the precedence alternatives of the transformed left-recursive
    # rule.</li>
    # <li>The "primary" portion of a left recursive rule cannot contain an
    # epsilon transition, so the only way an alternative other than 1 can exist
    # in a state that is also reachable via alternative 1 is by nesting calls
    # to the left-recursive rule, with the outer calls not being at the
    # preferred precedence level.</li>
    # </ul>
    # </li>
    # </ol>
    #
    # <p>
    # The prediction context must be considered by this filter to address
    # situations like the following.
    # </p>
    # <code>
    # <pre>
    # grammar TA;
    # prog: statement* EOF;
    # statement: letterA | statement letterA 'b' ;
    # letterA: 'a';
    # </pre>
    # </code>
    # <p>
    # If the above grammar, the ATN state immediately before the token
    # reference {@code 'a'} in {@code letterA} is reachable from the left edge
    # of both the primary and closure blocks of the left-recursive rule
    # {@code statement}. The prediction context associated with each of these
    # configurations distinguishes between them, and prevents the alternative
    # which stepped out to {@code prog} (and then back in to {@code statement}
    # from being eliminated by the filter.
    # </p>
    #
    # @param configs The configuration set computed by
    # {@link #computeStartState} as the start state for the DFA.
    # @return The transformed configuration set representing the start state
    # for a precedence DFA at a particular precedence level (determined by
    # calling {@link Parser#getPrecedence}).
    #
    def applyPrecedenceFilter(self, configs:ATNConfigSet):
        statesFromAlt1 = dict()
        configSet = ATNConfigSet(configs.fullCtx)
        for config in configs:
            # handle alt 1 first
            if config.alt != 1:
                continue
            updatedContext = config.semanticContext.evalPrecedence(self.parser, self._outerContext)
            if updatedContext is None:
                # the configuration was eliminated
                continue

            statesFromAlt1[config.state.stateNumber] = config.context
            if updatedContext is not config.semanticContext:
                configSet.add(ATNConfig(config=config, semantic=updatedContext), self.mergeCache)
            else:
                configSet.add(config, self.mergeCache)

        for config in configs:
            if config.alt == 1:
                # already handled
                continue

            # In the future, this elimination step could be updated to also
            # filter the prediction context for alternatives predicting alt>1
            # (basically a graph subtraction algorithm).
            #
            if not config.precedenceFilterSuppressed:
                context = statesFromAlt1.get(config.state.stateNumber, None)
                if context==config.context:
                    # eliminated
                    continue

            configSet.add(config, self.mergeCache)

        return configSet

    def getReachableTarget(self, trans:Transition, ttype:int):
        if trans.matches(ttype, 0, self.atn.maxTokenType):
            return trans.target
        else:
            return None

    def getPredsForAmbigAlts(self, ambigAlts:set, configs:ATNConfigSet, nalts:int):
        # REACH=[1|1|[]|0:0, 1|2|[]|0:1]
        # altToPred starts as an array of all null contexts. The entry at index i
        # corresponds to alternative i. altToPred[i] may have one of three values:
        #   1. null: no ATNConfig c is found such that c.alt==i
        #   2. SemanticContext.NONE: At least one ATNConfig c exists such that
        #      c.alt==i and c.semanticContext==SemanticContext.NONE. In other words,
        #      alt i has at least one unpredicated config.
        #   3. Non-NONE Semantic Context: There exists at least one, and for all
        #      ATNConfig c such that c.alt==i, c.semanticContext!=SemanticContext.NONE.
        #
        # From this, it is clear that NONE||anything==NONE.
        #
        altToPred = [None] * (nalts + 1)
        for c in configs:
            if c.alt in ambigAlts:
                altToPred[c.alt] = orContext(altToPred[c.alt], c.semanticContext)

        nPredAlts = 0
        for i in range(1, nalts+1):
            if altToPred[i] is None:
                altToPred[i] = SemanticContext.NONE
            elif altToPred[i] is not SemanticContext.NONE:
                nPredAlts += 1

        # nonambig alts are null in altToPred
        if nPredAlts==0:
            altToPred = None
        if ParserATNSimulator.debug:
            print("getPredsForAmbigAlts result " + str_list(altToPred))
        return altToPred

    def getPredicatePredictions(self, ambigAlts:set, altToPred:list):
        pairs = []
        containsPredicate = False
        for i in range(1, len(altToPred)):
            pred = altToPred[i]
            # unpredicated is indicated by SemanticContext.NONE
            if ambigAlts is not None and i in ambigAlts:
                pairs.append(PredPrediction(pred, i))
            if pred is not SemanticContext.NONE:
                containsPredicate = True

        if not containsPredicate:
            return None

        return pairs

    #
    # This method is used to improve the localization of error messages by
    # choosing an alternative rather than throwing a
    # {@link NoViableAltException} in particular prediction scenarios where the
    # {@link #ERROR} state was reached during ATN simulation.
    #
    # <p>
    # The default implementation of this method uses the following
    # algorithm to identify an ATN configuration which successfully parsed the
    # decision entry rule. Choosing such an alternative ensures that the
    # {@link ParserRuleContext} returned by the calling rule will be complete
    # and valid, and the syntax error will be reported later at a more
    # localized location.</p>
    #
    # <ul>
    # <li>If a syntactically valid path or paths reach the end of the decision rule and
    # they are semantically valid if predicated, return the min associated alt.</li>
    # <li>Else, if a semantically invalid but syntactically valid path exist
    # or paths exist, return the minimum associated alt.
    # </li>
    # <li>Otherwise, return {@link ATN#INVALID_ALT_NUMBER}.</li>
    # </ul>
    #
    # <p>
    # In some scenarios, the algorithm described above could predict an
    # alternative which will result in a {@link FailedPredicateException} in
    # the parser. Specifically, this could occur if the <em>only</em> configuration
    # capable of successfully parsing to the end of the decision rule is
    # blocked by a semantic predicate. By choosing this alternative within
    # {@link #adaptivePredict} instead of throwing a
    # {@link NoViableAltException}, the resulting
    # {@link FailedPredicateException} in the parser will identify the specific
    # predicate which is preventing the parser from successfully parsing the
    # decision rule, which helps developers identify and correct logic errors
    # in semantic predicates.
    # </p>
    #
    # @param configs The ATN configurations which were valid immediately before
    # the {@link #ERROR} state was reached
    # @param outerContext The is the \gamma_0 initial parser context from the paper
    # or the parser stack at the instant before prediction commences.
    #
    # @return The value to return from {@link #adaptivePredict}, or
    # {@link ATN#INVALID_ALT_NUMBER} if a suitable alternative was not
    # identified and {@link #adaptivePredict} should report an error instead.
    #
    def getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(self, configs:ATNConfigSet, outerContext:ParserRuleContext):
        semValidConfigs, semInvalidConfigs = self.splitAccordingToSemanticValidity(configs, outerContext)
        alt = self.getAltThatFinishedDecisionEntryRule(semValidConfigs)
        if alt!=ATN.INVALID_ALT_NUMBER: # semantically/syntactically viable path exists
            return alt
        # Is there a syntactically valid path with a failed pred?
        if len(semInvalidConfigs)>0:
            alt = self.getAltThatFinishedDecisionEntryRule(semInvalidConfigs)
            if alt!=ATN.INVALID_ALT_NUMBER: # syntactically viable path exists
                return alt
        return ATN.INVALID_ALT_NUMBER

    def getAltThatFinishedDecisionEntryRule(self, configs:ATNConfigSet):
        alts = set()
        for c in configs:
            if c.reachesIntoOuterContext>0 or (isinstance(c.state, RuleStopState) and c.context.hasEmptyPath() ):
                alts.add(c.alt)
        if len(alts)==0:
            return ATN.INVALID_ALT_NUMBER
        else:
            return min(alts)

    # Walk the list of configurations and split them according to
    #  those that have preds evaluating to true/false.  If no pred, assume
    #  true pred and include in succeeded set.  Returns Pair of sets.
    #
    #  Create a new set so as not to alter the incoming parameter.
    #
    #  Assumption: the input stream has been restored to the starting point
    #  prediction, which is where predicates need to evaluate.
    #
    def splitAccordingToSemanticValidity(self, configs:ATNConfigSet, outerContext:ParserRuleContext):
        succeeded = ATNConfigSet(configs.fullCtx)
        failed = ATNConfigSet(configs.fullCtx)
        for c in configs:
            if c.semanticContext is not SemanticContext.NONE:
                predicateEvaluationResult = c.semanticContext.eval(self.parser, outerContext)
                if predicateEvaluationResult:
                    succeeded.add(c)
                else:
                    failed.add(c)
            else:
                succeeded.add(c)
        return (succeeded,failed)

    # Look through a list of predicate/alt pairs, returning alts for the
    #  pairs that win. A {@code NONE} predicate indicates an alt containing an
    #  unpredicated config which behaves as "always true." If !complete
    #  then we stop at the first predicate that evaluates to true. This
    #  includes pairs with null predicates.
    #
    def evalSemanticContext(self, predPredictions:list, outerContext:ParserRuleContext, complete:bool):
        predictions = set()
        for pair in predPredictions:
            if pair.pred is SemanticContext.NONE:
                predictions.add(pair.alt)
                if not complete:
                    break
                continue
            predicateEvaluationResult = pair.pred.eval(self.parser, outerContext)
            if ParserATNSimulator.debug or ParserATNSimulator.dfa_debug:
                print("eval pred " + str(pair) + "=" + str(predicateEvaluationResult))

            if predicateEvaluationResult:
                if ParserATNSimulator.debug or ParserATNSimulator.dfa_debug:
                    print("PREDICT " + str(pair.alt))
                predictions.add(pair.alt)
                if not complete:
                    break
        return predictions


    # TODO: If we are doing predicates, there is no point in pursuing
    #     closure operations if we reach a DFA state that uniquely predicts
    #     alternative. We will not be caching that DFA state and it is a
    #     waste to pursue the closure. Might have to advance when we do
    #     ambig detection thought :(
    #

    def closure(self, config:ATNConfig, configs:ATNConfigSet, closureBusy:set, collectPredicates:bool, fullCtx:bool, treatEofAsEpsilon:bool):
        initialDepth = 0
        self.closureCheckingStopState(config, configs, closureBusy, collectPredicates,
                                 fullCtx, initialDepth, treatEofAsEpsilon)


    def closureCheckingStopState(self, config:ATNConfig, configs:ATNConfigSet, closureBusy:set, collectPredicates:bool, fullCtx:bool, depth:int, treatEofAsEpsilon:bool):
        if ParserATNSimulator.debug:
            print("closure(" + str(config) + ")")

        if isinstance(config.state, RuleStopState):
            # We hit rule end. If we have context info, use it
            # run thru all possible stack tops in ctx
            if not config.context.isEmpty():
                for i in range(0, len(config.context)):
                    state = config.context.getReturnState(i)
                    if state is PredictionContext.EMPTY_RETURN_STATE:
                        if fullCtx:
                            configs.add(ATNConfig(state=config.state, context=PredictionContext.EMPTY, config=config), self.mergeCache)
                            continue
                        else:
                            # we have no context info, just chase follow links (if greedy)
                            if ParserATNSimulator.debug:
                                print("FALLING off rule " + self.getRuleName(config.state.ruleIndex))
                            self.closure_(config, configs, closureBusy, collectPredicates,
                                     fullCtx, depth, treatEofAsEpsilon)
                        continue
                    returnState = self.atn.states[state]
                    newContext = config.context.getParent(i) # "pop" return state
                    c = ATNConfig(state=returnState, alt=config.alt, context=newContext, semantic=config.semanticContext)
                    # While we have context to pop back from, we may have
                    # gotten that context AFTER having falling off a rule.
                    # Make sure we track that we are now out of context.
                    c.reachesIntoOuterContext = config.reachesIntoOuterContext
                    self.closureCheckingStopState(c, configs, closureBusy, collectPredicates, fullCtx, depth - 1, treatEofAsEpsilon)
                return
            elif fullCtx:
                # reached end of start rule
                configs.add(config, self.mergeCache)
                return
            else:
                # else if we have no context info, just chase follow links (if greedy)
                if ParserATNSimulator.debug:
                    print("FALLING off rule " + self.getRuleName(config.state.ruleIndex))

        self.closure_(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon)

    # Do the actual work of walking epsilon edges#
    def closure_(self, config:ATNConfig, configs:ATNConfigSet, closureBusy:set, collectPredicates:bool, fullCtx:bool, depth:int, treatEofAsEpsilon:bool):
        p = config.state
        # optimization
        if not p.epsilonOnlyTransitions:
            configs.add(config, self.mergeCache)
            # make sure to not return here, because EOF transitions can act as
            # both epsilon transitions and non-epsilon transitions.

        first = True
        for t in p.transitions:
            if first:
                first = False
                if self.canDropLoopEntryEdgeInLeftRecursiveRule(config):
                    continue

            continueCollecting = collectPredicates and not isinstance(t, ActionTransition)
            c = self.getEpsilonTarget(config, t, continueCollecting, depth == 0, fullCtx, treatEofAsEpsilon)
            if c is not None:
                newDepth = depth
                if isinstance( config.state, RuleStopState):
                    # target fell off end of rule; mark resulting c as having dipped into outer context
                    # We can't get here if incoming config was rule stop and we had context
                    # track how far we dip into outer context.  Might
                    # come in handy and we avoid evaluating context dependent
                    # preds if this is > 0.
                    if self._dfa is not None and self._dfa.precedenceDfa:
                        if t.outermostPrecedenceReturn == self._dfa.atnStartState.ruleIndex:
                            c.precedenceFilterSuppressed = True
                    c.reachesIntoOuterContext += 1
                    if c in closureBusy:
                        # avoid infinite recursion for right-recursive rules
                        continue
                    closureBusy.add(c)
                    configs.dipsIntoOuterContext = True # TODO: can remove? only care when we add to set per middle of this method
                    newDepth -= 1
                    if ParserATNSimulator.debug:
                        print("dips into outer ctx: " + str(c))
                else:
                    if not t.isEpsilon:
                        if c in closureBusy:
                            # avoid infinite recursion for EOF* and EOF+
                            continue
                        closureBusy.add(c)
                    if isinstance(t, RuleTransition):
                        # latch when newDepth goes negative - once we step out of the entry context we can't return
                        if newDepth >= 0:
                            newDepth += 1

                self.closureCheckingStopState(c, configs, closureBusy, continueCollecting, fullCtx, newDepth, treatEofAsEpsilon)



    # Implements first-edge (loop entry) elimination as an optimization
    #  during closure operations.  See antlr/antlr4#1398.
    #
    # The optimization is to avoid adding the loop entry config when
    # the exit path can only lead back to the same
    # StarLoopEntryState after popping context at the rule end state
    # (traversing only epsilon edges, so we're still in closure, in
    # this same rule).
    #
    # We need to detect any state that can reach loop entry on
    # epsilon w/o exiting rule. We don't have to look at FOLLOW
    # links, just ensure that all stack tops for config refer to key
    # states in LR rule.
    #
    # To verify we are in the right situation we must first check
    # closure is at a StarLoopEntryState generated during LR removal.
    # Then we check that each stack top of context is a return state
    # from one of these cases:
    #
    #   1. 'not' expr, '(' type ')' expr. The return state points at loop entry state
    #   2. expr op expr. The return state is the block end of internal block of (...)*
    #   3. 'between' expr 'and' expr. The return state of 2nd expr reference.
    #      That state points at block end of internal block of (...)*.
    #   4. expr '?' expr ':' expr. The return state points at block end,
    #      which points at loop entry state.
    #
    # If any is true for each stack top, then closure does not add a
    # config to the current config set for edge[0], the loop entry branch.
    #
    #  Conditions fail if any context for the current config is:
    #
    #   a. empty (we'd fall out of expr to do a global FOLLOW which could
    #      even be to some weird spot in expr) or,
    #   b. lies outside of expr or,
    #   c. lies within expr but at a state not the BlockEndState
    #   generated during LR removal
    #
    # Do we need to evaluate predicates ever in closure for this case?
    #
    # No. Predicates, including precedence predicates, are only
    # evaluated when computing a DFA start state. I.e., only before
    # the lookahead (but not parser) consumes a token.
    #
    # There are no epsilon edges allowed in LR rule alt blocks or in
    # the "primary" part (ID here). If closure is in
    # StarLoopEntryState any lookahead operation will have consumed a
    # token as there are no epsilon-paths that lead to
    # StarLoopEntryState. We do not have to evaluate predicates
    # therefore if we are in the generated StarLoopEntryState of a LR
    # rule. Note that when making a prediction starting at that
    # decision point, decision d=2, compute-start-state performs
    # closure starting at edges[0], edges[1] emanating from
    # StarLoopEntryState. That means it is not performing closure on
    # StarLoopEntryState during compute-start-state.
    #
    # How do we know this always gives same prediction answer?
    #
    # Without predicates, loop entry and exit paths are ambiguous
    # upon remaining input +b (in, say, a+b). Either paths lead to
    # valid parses. Closure can lead to consuming + immediately or by
    # falling out of this call to expr back into expr and loop back
    # again to StarLoopEntryState to match +b. In this special case,
    # we choose the more efficient path, which is to take the bypass
    # path.
    #
    # The lookahead language has not changed because closure chooses
    # one path over the other. Both paths lead to consuming the same
    # remaining input during a lookahead operation. If the next token
    # is an operator, lookahead will enter the choice block with
    # operators. If it is not, lookahead will exit expr. Same as if
    # closure had chosen to enter the choice block immediately.
    #
    # Closure is examining one config (some loopentrystate, some alt,
    # context) which means it is considering exactly one alt. Closure
    # always copies the same alt to any derived configs.
    #
    # How do we know this optimization doesn't mess up precedence in
    # our parse trees?
    #
    # Looking through expr from left edge of stat only has to confirm
    # that an input, say, a+b+c; begins with any valid interpretation
    # of an expression. The precedence actually doesn't matter when
    # making a decision in stat seeing through expr. It is only when
    # parsing rule expr that we must use the precedence to get the
    # right interpretation and, hence, parse tree.
    #
    # @since 4.6
    #
    def canDropLoopEntryEdgeInLeftRecursiveRule(self, config):
        # return False
        p = config.state
        # First check to see if we are in StarLoopEntryState generated during
        # left-recursion elimination. For efficiency, also check if
        # the context has an empty stack case. If so, it would mean
        # global FOLLOW so we can't perform optimization
        # Are we the special loop entry/exit state? or SLL wildcard
        if p.stateType != ATNState.STAR_LOOP_ENTRY  \
                or not p.isPrecedenceDecision       \
                or config.context.isEmpty()         \
                or config.context.hasEmptyPath():
            return False

        # Require all return states to return back to the same rule
        # that p is in.
        numCtxs = len(config.context)
        for i in range(0, numCtxs):  # for each stack context
            returnState = self.atn.states[config.context.getReturnState(i)]
            if returnState.ruleIndex != p.ruleIndex:
                return False

        decisionStartState = p.transitions[0].target
        blockEndStateNum = decisionStartState.endState.stateNumber
        blockEndState = self.atn.states[blockEndStateNum]

        # Verify that the top of each stack context leads to loop entry/exit
        # state through epsilon edges and w/o leaving rule.
        for i in range(0, numCtxs):  # for each stack context
            returnStateNumber = config.context.getReturnState(i)
            returnState = self.atn.states[returnStateNumber]
            # all states must have single outgoing epsilon edge
            if len(returnState.transitions) != 1 or not returnState.transitions[0].isEpsilon:
                return False

            # Look for prefix op case like 'not expr', (' type ')' expr
            returnStateTarget = returnState.transitions[0].target
            if returnState.stateType == ATNState.BLOCK_END and returnStateTarget is p:
                continue

            # Look for 'expr op expr' or case where expr's return state is block end
            # of (...)* internal block; the block end points to loop back
            # which points to p but we don't need to check that
            if returnState is blockEndState:
                continue

            # Look for ternary expr ? expr : expr. The return state points at block end,
            # which points at loop entry state
            if returnStateTarget is blockEndState:
                continue

            # Look for complex prefix 'between expr and expr' case where 2nd expr's
            # return state points at block end state of (...)* internal block
            if returnStateTarget.stateType == ATNState.BLOCK_END \
                and len(returnStateTarget.transitions) == 1 \
                and returnStateTarget.transitions[0].isEpsilon \
                and returnStateTarget.transitions[0].target is p:
                    continue

            # anything else ain't conforming
            return False

        return True


    def getRuleName(self, index:int):
        if self.parser is not None and index>=0:
            return self.parser.ruleNames[index]
        else:
            return "<rule " + str(index) + ">"

    epsilonTargetMethods = dict()
    epsilonTargetMethods[Transition.RULE] = lambda sim, config, t, collectPredicates, inContext, fullCtx, treatEofAsEpsilon: \
        sim.ruleTransition(config, t)
    epsilonTargetMethods[Transition.PRECEDENCE] = lambda sim, config, t, collectPredicates, inContext, fullCtx, treatEofAsEpsilon: \
        sim.precedenceTransition(config, t, collectPredicates, inContext, fullCtx)
    epsilonTargetMethods[Transition.PREDICATE] = lambda sim, config, t, collectPredicates, inContext, fullCtx, treatEofAsEpsilon: \
        sim.predTransition(config, t, collectPredicates, inContext, fullCtx)
    epsilonTargetMethods[Transition.ACTION] = lambda sim, config, t, collectPredicates, inContext, fullCtx, treatEofAsEpsilon: \
        sim.actionTransition(config, t)
    epsilonTargetMethods[Transition.EPSILON] = lambda sim, config, t, collectPredicates, inContext, fullCtx, treatEofAsEpsilon: \
        ATNConfig(state=t.target, config=config)
    epsilonTargetMethods[Transition.ATOM] = lambda sim, config, t, collectPredicates, inContext, fullCtx, treatEofAsEpsilon: \
        ATNConfig(state=t.target, config=config) if treatEofAsEpsilon and t.matches(Token.EOF, 0, 1) else None
    epsilonTargetMethods[Transition.RANGE] = lambda sim, config, t, collectPredicates, inContext, fullCtx, treatEofAsEpsilon: \
        ATNConfig(state=t.target, config=config) if treatEofAsEpsilon and t.matches(Token.EOF, 0, 1) else None
    epsilonTargetMethods[Transition.SET] = lambda sim, config, t, collectPredicates, inContext, fullCtx, treatEofAsEpsilon: \
        ATNConfig(state=t.target, config=config) if treatEofAsEpsilon and t.matches(Token.EOF, 0, 1) else None

    def getEpsilonTarget(self, config:ATNConfig, t:Transition, collectPredicates:bool, inContext:bool, fullCtx:bool, treatEofAsEpsilon:bool):
        m = self.epsilonTargetMethods.get(t.serializationType, None)
        if m is None:
            return None
        else:
            return m(self, config, t, collectPredicates, inContext, fullCtx, treatEofAsEpsilon)

    def actionTransition(self, config:ATNConfig, t:ActionTransition):
        if ParserATNSimulator.debug:
            print("ACTION edge " + str(t.ruleIndex) + ":" + str(t.actionIndex))
        return ATNConfig(state=t.target, config=config)

    def precedenceTransition(self, config:ATNConfig, pt:PrecedencePredicateTransition,  collectPredicates:bool, inContext:bool, fullCtx:bool):
        if ParserATNSimulator.debug:
            print("PRED (collectPredicates=" + str(collectPredicates) + ") " +
                    str(pt.precedence) + ">=_p, ctx dependent=true")
            if self.parser is not None:
                print("context surrounding pred is " + str(self.parser.getRuleInvocationStack()))

        c = None
        if collectPredicates and inContext:
            if fullCtx:
                # In full context mode, we can evaluate predicates on-the-fly
                # during closure, which dramatically reduces the size of
                # the config sets. It also obviates the need to test predicates
                # later during conflict resolution.
                currentPosition = self._input.index
                self._input.seek(self._startIndex)
                predSucceeds = pt.getPredicate().eval(self.parser, self._outerContext)
                self._input.seek(currentPosition)
                if predSucceeds:
                    c = ATNConfig(state=pt.target, config=config) # no pred context
            else:
                newSemCtx = andContext(config.semanticContext, pt.getPredicate())
                c = ATNConfig(state=pt.target, semantic=newSemCtx, config=config)
        else:
            c = ATNConfig(state=pt.target, config=config)

        if ParserATNSimulator.debug:
            print("config from pred transition=" + str(c))
        return c

    def predTransition(self, config:ATNConfig, pt:PredicateTransition, collectPredicates:bool, inContext:bool, fullCtx:bool):
        if ParserATNSimulator.debug:
            print("PRED (collectPredicates=" + str(collectPredicates) + ") " + str(pt.ruleIndex) +
                    ":" + str(pt.predIndex) + ", ctx dependent=" + str(pt.isCtxDependent))
            if self.parser is not None:
                print("context surrounding pred is " + str(self.parser.getRuleInvocationStack()))

        c = None
        if collectPredicates and (not pt.isCtxDependent or (pt.isCtxDependent and inContext)):
            if fullCtx:
                # In full context mode, we can evaluate predicates on-the-fly
                # during closure, which dramatically reduces the size of
                # the config sets. It also obviates the need to test predicates
                # later during conflict resolution.
                currentPosition = self._input.index
                self._input.seek(self._startIndex)
                predSucceeds = pt.getPredicate().eval(self.parser, self._outerContext)
                self._input.seek(currentPosition)
                if predSucceeds:
                    c = ATNConfig(state=pt.target, config=config) # no pred context
            else:
                newSemCtx = andContext(config.semanticContext, pt.getPredicate())
                c = ATNConfig(state=pt.target, semantic=newSemCtx, config=config)
        else:
            c = ATNConfig(state=pt.target, config=config)

        if ParserATNSimulator.debug:
            print("config from pred transition=" + str(c))
        return c

    def ruleTransition(self, config:ATNConfig, t:RuleTransition):
        if ParserATNSimulator.debug:
            print("CALL rule " + self.getRuleName(t.target.ruleIndex) + ", ctx=" + str(config.context))
        returnState = t.followState
        newContext = SingletonPredictionContext.create(config.context, returnState.stateNumber)
        return ATNConfig(state=t.target, context=newContext, config=config )

    def getConflictingAlts(self, configs:ATNConfigSet):
        altsets = PredictionMode.getConflictingAltSubsets(configs)
        return PredictionMode.getAlts(altsets)

     # Sam pointed out a problem with the previous definition, v3, of
     # ambiguous states. If we have another state associated with conflicting
     # alternatives, we should keep going. For example, the following grammar
     #
     # s : (ID | ID ID?) ';' ;
     #
     # When the ATN simulation reaches the state before ';', it has a DFA
     # state that looks like: [12|1|[], 6|2|[], 12|2|[]]. Naturally
     # 12|1|[] and 12|2|[] conflict, but we cannot stop processing this node
     # because alternative to has another way to continue, via [6|2|[]].
     # The key is that we have a single state that has config's only associated
     # with a single alternative, 2, and crucially the state transitions
     # among the configurations are all non-epsilon transitions. That means
     # we don't consider any conflicts that include alternative 2. So, we
     # ignore the conflict between alts 1 and 2. We ignore a set of
     # conflicting alts when there is an intersection with an alternative
     # associated with a single alt state in the state&rarr;config-list map.
     #
     # It's also the case that we might have two conflicting configurations but
     # also a 3rd nonconflicting configuration for a different alternative:
     # [1|1|[], 1|2|[], 8|3|[]]. This can come about from grammar:
     #
     # a : A | A | A B ;
     #
     # After matching input A, we reach the stop state for rule A, state 1.
     # State 8 is the state right before B. Clearly alternatives 1 and 2
     # conflict and no amount of further lookahead will separate the two.
     # However, alternative 3 will be able to continue and so we do not
     # stop working on this state. In the previous example, we're concerned
     # with states associated with the conflicting alternatives. Here alt
     # 3 is not associated with the conflicting configs, but since we can continue
     # looking for input reasonably, I don't declare the state done. We
     # ignore a set of conflicting alts when we have an alternative
     # that we still need to pursue.
    #

    def getConflictingAltsOrUniqueAlt(self, configs:ATNConfigSet):
        conflictingAlts = None
        if configs.uniqueAlt!= ATN.INVALID_ALT_NUMBER:
            conflictingAlts = set()
            conflictingAlts.add(configs.uniqueAlt)
        else:
            conflictingAlts = configs.conflictingAlts
        return conflictingAlts

    def getTokenName(self, t:int):
        if t==Token.EOF:
            return "EOF"
        if self.parser is not None and \
            self.parser.literalNames is not None and \
            t < len(self.parser.literalNames):
                 return self.parser.literalNames[t] + "<" + str(t) + ">"
        else:
            return str(t)

    def getLookaheadName(self, input:TokenStream):
        return self.getTokenName(input.LA(1))

    # Used for debugging in adaptivePredict around execATN but I cut
    #  it out for clarity now that alg. works well. We can leave this
    #  "dead" code for a bit.
    #
    def dumpDeadEndConfigs(self, nvae:NoViableAltException):
        print("dead end configs: ")
        for c in nvae.getDeadEndConfigs():
            trans = "no edges"
            if len(c.state.transitions)>0:
                t = c.state.transitions[0]
                if isinstance(t, AtomTransition):
                    trans = "Atom "+ self.getTokenName(t.label)
                elif isinstance(t, SetTransition):
                    neg = isinstance(t, NotSetTransition)
                    trans = ("~" if neg else "")+"Set "+ str(t.set)
            print(c.toString(self.parser, True) + ":" + trans, file=sys.stderr)

    def noViableAlt(self, input:TokenStream, outerContext:ParserRuleContext, configs:ATNConfigSet, startIndex:int):
        return NoViableAltException(self.parser, input, input.get(startIndex), input.LT(1), configs, outerContext)

    def getUniqueAlt(self, configs:ATNConfigSet):
        alt = ATN.INVALID_ALT_NUMBER
        for c in configs:
            if alt == ATN.INVALID_ALT_NUMBER:
                alt = c.alt # found first alt
            elif c.alt!=alt:
                return ATN.INVALID_ALT_NUMBER
        return alt

    #
    # Add an edge to the DFA, if possible. This method calls
    # {@link #addDFAState} to ensure the {@code to} state is present in the
    # DFA. If {@code from} is {@code null}, or if {@code t} is outside the
    # range of edges that can be represented in the DFA tables, this method
    # returns without adding the edge to the DFA.
    #
    # <p>If {@code to} is {@code null}, this method returns {@code null}.
    # Otherwise, this method returns the {@link DFAState} returned by calling
    # {@link #addDFAState} for the {@code to} state.</p>
    #
    # @param dfa The DFA
    # @param from The source state for the edge
    # @param t The input symbol
    # @param to The target state for the edge
    #
    # @return If {@code to} is {@code null}, this method returns {@code null};
    # otherwise this method returns the result of calling {@link #addDFAState}
    # on {@code to}
    #
    def addDFAEdge(self, dfa:DFA, from_:DFAState, t:int, to:DFAState):
        if ParserATNSimulator.debug:
            print("EDGE " + str(from_) + " -> " + str(to) + " upon " + self.getTokenName(t))

        if to is None:
            return None

        to = self.addDFAState(dfa, to) # used existing if possible not incoming
        if from_ is None or t < -1 or t > self.atn.maxTokenType:
            return to

        if from_.edges is None:
            from_.edges = [None] * (self.atn.maxTokenType + 2)
        from_.edges[t+1] = to # connect

        if ParserATNSimulator.debug:
            names = None if self.parser is None else self.parser.literalNames
            print("DFA=\n" + dfa.toString(names))

        return to

    #
    # Add state {@code D} to the DFA if it is not already present, and return
    # the actual instance stored in the DFA. If a state equivalent to {@code D}
    # is already in the DFA, the existing state is returned. Otherwise this
    # method returns {@code D} after adding it to the DFA.
    #
    # <p>If {@code D} is {@link #ERROR}, this method returns {@link #ERROR} and
    # does not change the DFA.</p>
    #
    # @param dfa The dfa
    # @param D The DFA state to add
    # @return The state stored in the DFA. This will be either the existing
    # state if {@code D} is already in the DFA, or {@code D} itself if the
    # state was not already present.
    #
    def addDFAState(self, dfa:DFA, D:DFAState):
        if D is self.ERROR:
            return D


        existing = dfa.states.get(D, None)
        if existing is not None:
            return existing

        D.stateNumber = len(dfa.states)
        if not D.configs.readonly:
            D.configs.optimizeConfigs(self)
            D.configs.setReadonly(True)
        dfa.states[D] = D
        if ParserATNSimulator.debug:
            print("adding new DFA state: " + str(D))
        return D

    def reportAttemptingFullContext(self, dfa:DFA, conflictingAlts:set, configs:ATNConfigSet, startIndex:int, stopIndex:int):
        if ParserATNSimulator.debug or ParserATNSimulator.retry_debug:
            print("reportAttemptingFullContext decision=" + str(dfa.decision) + ":" + str(configs) +
                               ", input=" + self.parser.getTokenStream().getText(startIndex, stopIndex))
        if self.parser is not None:
            self.parser.getErrorListenerDispatch().reportAttemptingFullContext(self.parser, dfa, startIndex, stopIndex, conflictingAlts, configs)

    def reportContextSensitivity(self, dfa:DFA, prediction:int, configs:ATNConfigSet, startIndex:int, stopIndex:int):
        if ParserATNSimulator.debug or ParserATNSimulator.retry_debug:
            print("reportContextSensitivity decision=" + str(dfa.decision) + ":" + str(configs) +
                               ", input=" + self.parser.getTokenStream().getText(startIndex, stopIndex))
        if self.parser is not None:
            self.parser.getErrorListenerDispatch().reportContextSensitivity(self.parser, dfa, startIndex, stopIndex, prediction, configs)

    # If context sensitive parsing, we know it's ambiguity not conflict#
    def reportAmbiguity(self, dfa:DFA, D:DFAState, startIndex:int, stopIndex:int,
                                   exact:bool, ambigAlts:set, configs:ATNConfigSet ):
        if ParserATNSimulator.debug or ParserATNSimulator.retry_debug:
#			ParserATNPathFinder finder = new ParserATNPathFinder(parser, atn);
#			int i = 1;
#			for (Transition t : dfa.atnStartState.transitions) {
#				print("ALT "+i+"=");
#				print(startIndex+".."+stopIndex+", len(input)="+parser.getInputStream().size());
#				TraceTree path = finder.trace(t.target, parser.getContext(), (TokenStream)parser.getInputStream(),
#											  startIndex, stopIndex);
#				if ( path!=null ) {
#					print("path = "+path.toStringTree());
#					for (TraceTree leaf : path.leaves) {
#						List<ATNState> states = path.getPathToNode(leaf);
#						print("states="+states);
#					}
#				}
#				i++;
#			}
            print("reportAmbiguity " + str(ambigAlts) + ":" + str(configs) +
                               ", input=" + self.parser.getTokenStream().getText(startIndex, stopIndex))
        if self.parser is not None:
            self.parser.getErrorListenerDispatch().reportAmbiguity(self.parser, dfa, startIndex, stopIndex, exact, ambigAlts, configs)


// File: venv\Lib\site-packages\antlr4\atn\PredictionMode.py
----------------------------------------
#
# Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
# Use of this file is governed by the BSD 3-clause license that
# can be found in the LICENSE.txt file in the project root.
#
#
# This enumeration defines the prediction modes available in ANTLR 4 along with
# utility methods for analyzing configuration sets for conflicts and/or
# ambiguities.


from enum import Enum
from antlr4.atn.ATN import ATN
from antlr4.atn.ATNConfig import ATNConfig
from antlr4.atn.ATNConfigSet import ATNConfigSet
from antlr4.atn.ATNState import RuleStopState
from antlr4.atn.SemanticContext import SemanticContext

PredictionMode = None

class PredictionMode(Enum):
    #
    # The SLL(*) prediction mode. This prediction mode ignores the current
    # parser context when making predictions. This is the fastest prediction
    # mode, and provides correct results for many grammars. This prediction
    # mode is more powerful than the prediction mode provided by ANTLR 3, but
    # may result in syntax errors for grammar and input combinations which are
    # not SLL.
    #
    # <p>
    # When using this prediction mode, the parser will either return a correct
    # parse tree (i.e. the same parse tree that would be returned with the
    # {@link #LL} prediction mode), or it will report a syntax error. If a
    # syntax error is encountered when using the {@link #SLL} prediction mode,
    # it may be due to either an actual syntax error in the input or indicate
    # that the particular combination of grammar and input requires the more
    # powerful {@link #LL} prediction abilities to complete successfully.</p>
    #
    # <p>
    # This prediction mode does not provide any guarantees for prediction
    # behavior for syntactically-incorrect inputs.</p>
    #
    SLL = 0
    #
    # The LL(*) prediction mode. This prediction mode allows the current parser
    # context to be used for resolving SLL conflicts that occur during
    # prediction. This is the fastest prediction mode that guarantees correct
    # parse results for all combinations of grammars with syntactically correct
    # inputs.
    #
    # <p>
    # When using this prediction mode, the parser will make correct decisions
    # for all syntactically-correct grammar and input combinations. However, in
    # cases where the grammar is truly ambiguous this prediction mode might not
    # report a precise answer for <em>exactly which</em> alternatives are
    # ambiguous.</p>
    #
    # <p>
    # This prediction mode does not provide any guarantees for prediction
    # behavior for syntactically-incorrect inputs.</p>
    #
    LL = 1
    #
    # The LL(*) prediction mode with exact ambiguity detection. In addition to
    # the correctness guarantees provided by the {@link #LL} prediction mode,
    # this prediction mode instructs the prediction algorithm to determine the
    # complete and exact set of ambiguous alternatives for every ambiguous
    # decision encountered while parsing.
    #
    # <p>
    # This prediction mode may be used for diagnosing ambiguities during
    # grammar development. Due to the performance overhead of calculating sets
    # of ambiguous alternatives, this prediction mode should be avoided when
    # the exact results are not necessary.</p>
    #
    # <p>
    # This prediction mode does not provide any guarantees for prediction
    # behavior for syntactically-incorrect inputs.</p>
    #
    LL_EXACT_AMBIG_DETECTION = 2


    #
    # Computes the SLL prediction termination condition.
    #
    # <p>
    # This method computes the SLL prediction termination condition for both of
    # the following cases.</p>
    #
    # <ul>
    # <li>The usual SLL+LL fallback upon SLL conflict</li>
    # <li>Pure SLL without LL fallback</li>
    # </ul>
    #
    # <p><strong>COMBINED SLL+LL PARSING</strong></p>
    #
    # <p>When LL-fallback is enabled upon SLL conflict, correct predictions are
    # ensured regardless of how the termination condition is computed by this
    # method. Due to the substantially higher cost of LL prediction, the
    # prediction should only fall back to LL when the additional lookahead
    # cannot lead to a unique SLL prediction.</p>
    #
    # <p>Assuming combined SLL+LL parsing, an SLL configuration set with only
    # conflicting subsets should fall back to full LL, even if the
    # configuration sets don't resolve to the same alternative (e.g.
    # {@code {1,2}} and {@code {3,4}}. If there is at least one non-conflicting
    # configuration, SLL could continue with the hopes that more lookahead will
    # resolve via one of those non-conflicting configurations.</p>
    #
    # <p>Here's the prediction termination rule them: SLL (for SLL+LL parsing)
    # stops when it sees only conflicting configuration subsets. In contrast,
    # full LL keeps going when there is uncertainty.</p>
    #
    # <p><strong>HEURISTIC</strong></p>
    #
    # <p>As a heuristic, we stop prediction when we see any conflicting subset
    # unless we see a state that only has one alternative associated with it.
    # The single-alt-state thing lets prediction continue upon rules like
    # (otherwise, it would admit defeat too soon):</p>
    #
    # <p>{@code [12|1|[], 6|2|[], 12|2|[]]. s : (ID | ID ID?) ';' ;}</p>
    #
    # <p>When the ATN simulation reaches the state before {@code ';'}, it has a
    # DFA state that looks like: {@code [12|1|[], 6|2|[], 12|2|[]]}. Naturally
    # {@code 12|1|[]} and {@code 12|2|[]} conflict, but we cannot stop
    # processing this node because alternative to has another way to continue,
    # via {@code [6|2|[]]}.</p>
    #
    # <p>It also let's us continue for this rule:</p>
    #
    # <p>{@code [1|1|[], 1|2|[], 8|3|[]] a : A | A | A B ;}</p>
    #
    # <p>After matching input A, we reach the stop state for rule A, state 1.
    # State 8 is the state right before B. Clearly alternatives 1 and 2
    # conflict and no amount of further lookahead will separate the two.
    # However, alternative 3 will be able to continue and so we do not stop
    # working on this state. In the previous example, we're concerned with
    # states associated with the conflicting alternatives. Here alt 3 is not
    # associated with the conflicting configs, but since we can continue
    # looking for input reasonably, don't declare the state done.</p>
    #
    # <p><strong>PURE SLL PARSING</strong></p>
    #
    # <p>To handle pure SLL parsing, all we have to do is make sure that we
    # combine stack contexts for configurations that differ only by semantic
    # predicate. From there, we can do the usual SLL termination heuristic.</p>
    #
    # <p><strong>PREDICATES IN SLL+LL PARSING</strong></p>
    #
    # <p>SLL decisions don't evaluate predicates until after they reach DFA stop
    # states because they need to create the DFA cache that works in all
    # semantic situations. In contrast, full LL evaluates predicates collected
    # during start state computation so it can ignore predicates thereafter.
    # This means that SLL termination detection can totally ignore semantic
    # predicates.</p>
    #
    # <p>Implementation-wise, {@link ATNConfigSet} combines stack contexts but not
    # semantic predicate contexts so we might see two configurations like the
    # following.</p>
    #
    # <p>{@code (s, 1, x, {}), (s, 1, x', {p})}</p>
    #
    # <p>Before testing these configurations against others, we have to merge
    # {@code x} and {@code x'} (without modifying the existing configurations).
    # For example, we test {@code (x+x')==x''} when looking for conflicts in
    # the following configurations.</p>
    #
    # <p>{@code (s, 1, x, {}), (s, 1, x', {p}), (s, 2, x'', {})}</p>
    #
    # <p>If the configuration set has predicates (as indicated by
    # {@link ATNConfigSet#hasSemanticContext}), this algorithm makes a copy of
    # the configurations to strip out all of the predicates so that a standard
    # {@link ATNConfigSet} will merge everything ignoring predicates.</p>
    #
    @classmethod
    def hasSLLConflictTerminatingPrediction(cls, mode:PredictionMode, configs:ATNConfigSet):
        # Configs in rule stop states indicate reaching the end of the decision
        # rule (local context) or end of start rule (full context). If all
        # configs meet this condition, then none of the configurations is able
        # to match additional input so we terminate prediction.
        #
        if cls.allConfigsInRuleStopStates(configs):
            return True

        # pure SLL mode parsing
        if mode == PredictionMode.SLL:
            # Don't bother with combining configs from different semantic
            # contexts if we can fail over to full LL; costs more time
            # since we'll often fail over anyway.
            if configs.hasSemanticContext:
                # dup configs, tossing out semantic predicates
                dup = ATNConfigSet()
                for c in configs:
                    c = ATNConfig(config=c, semantic=SemanticContext.NONE)
                    dup.add(c)
                configs = dup
            # now we have combined contexts for configs with dissimilar preds

        # pure SLL or combined SLL+LL mode parsing
        altsets = cls.getConflictingAltSubsets(configs)
        return cls.hasConflictingAltSet(altsets) and not cls.hasStateAssociatedWithOneAlt(configs)

    # Checks if any configuration in {@code configs} is in a
    # {@link RuleStopState}. Configurations meeting this condition have reached
    # the end of the decision rule (local context) or end of start rule (full
    # context).
    #
    # @param configs the configuration set to test
    # @return {@code true} if any configuration in {@code configs} is in a
    # {@link RuleStopState}, otherwise {@code false}
    @classmethod
    def hasConfigInRuleStopState(cls, configs:ATNConfigSet):
        return any(isinstance(cfg.state, RuleStopState) for cfg in configs)

    # Checks if all configurations in {@code configs} are in a
    # {@link RuleStopState}. Configurations meeting this condition have reached
    # the end of the decision rule (local context) or end of start rule (full
    # context).
    #
    # @param configs the configuration set to test
    # @return {@code true} if all configurations in {@code configs} are in a
    # {@link RuleStopState}, otherwise {@code false}
    @classmethod
    def allConfigsInRuleStopStates(cls, configs:ATNConfigSet):
        return all(isinstance(cfg.state, RuleStopState) for cfg in configs)

    #
    # Full LL prediction termination.
    #
    # <p>Can we stop looking ahead during ATN simulation or is there some
    # uncertainty as to which alternative we will ultimately pick, after
    # consuming more input? Even if there are partial conflicts, we might know
    # that everything is going to resolve to the same minimum alternative. That
    # means we can stop since no more lookahead will change that fact. On the
    # other hand, there might be multiple conflicts that resolve to different
    # minimums. That means we need more look ahead to decide which of those
    # alternatives we should predict.</p>
    #
    # <p>The basic idea is to split the set of configurations {@code C}, into
    # conflicting subsets {@code (s, _, ctx, _)} and singleton subsets with
    # non-conflicting configurations. Two configurations conflict if they have
    # identical {@link ATNConfig#state} and {@link ATNConfig#context} values
    # but different {@link ATNConfig#alt} value, e.g. {@code (s, i, ctx, _)}
    # and {@code (s, j, ctx, _)} for {@code i!=j}.</p>
    #
    # <p>Reduce these configuration subsets to the set of possible alternatives.
    # You can compute the alternative subsets in one pass as follows:</p>
    #
    # <p>{@code A_s,ctx = {i | (s, i, ctx, _)}} for each configuration in
    # {@code C} holding {@code s} and {@code ctx} fixed.</p>
    #
    # <p>Or in pseudo-code, for each configuration {@code c} in {@code C}:</p>
    #
    # <pre>
    # map[c] U= c.{@link ATNConfig#alt alt} # map hash/equals uses s and x, not
    # alt and not pred
    # </pre>
    #
    # <p>The values in {@code map} are the set of {@code A_s,ctx} sets.</p>
    #
    # <p>If {@code |A_s,ctx|=1} then there is no conflict associated with
    # {@code s} and {@code ctx}.</p>
    #
    # <p>Reduce the subsets to singletons by choosing a minimum of each subset. If
    # the union of these alternative subsets is a singleton, then no amount of
    # more lookahead will help us. We will always pick that alternative. If,
    # however, there is more than one alternative, then we are uncertain which
    # alternative to predict and must continue looking for resolution. We may
    # or may not discover an ambiguity in the future, even if there are no
    # conflicting subsets this round.</p>
    #
    # <p>The biggest sin is to terminate early because it means we've made a
    # decision but were uncertain as to the eventual outcome. We haven't used
    # enough lookahead. On the other hand, announcing a conflict too late is no
    # big deal; you will still have the conflict. It's just inefficient. It
    # might even look until the end of file.</p>
    #
    # <p>No special consideration for semantic predicates is required because
    # predicates are evaluated on-the-fly for full LL prediction, ensuring that
    # no configuration contains a semantic context during the termination
    # check.</p>
    #
    # <p><strong>CONFLICTING CONFIGS</strong></p>
    #
    # <p>Two configurations {@code (s, i, x)} and {@code (s, j, x')}, conflict
    # when {@code i!=j} but {@code x=x'}. Because we merge all
    # {@code (s, i, _)} configurations together, that means that there are at
    # most {@code n} configurations associated with state {@code s} for
    # {@code n} possible alternatives in the decision. The merged stacks
    # complicate the comparison of configuration contexts {@code x} and
    # {@code x'}. Sam checks to see if one is a subset of the other by calling
    # merge and checking to see if the merged result is either {@code x} or
    # {@code x'}. If the {@code x} associated with lowest alternative {@code i}
    # is the superset, then {@code i} is the only possible prediction since the
    # others resolve to {@code min(i)} as well. However, if {@code x} is
    # associated with {@code j>i} then at least one stack configuration for
    # {@code j} is not in conflict with alternative {@code i}. The algorithm
    # should keep going, looking for more lookahead due to the uncertainty.</p>
    #
    # <p>For simplicity, I'm doing a equality check between {@code x} and
    # {@code x'} that lets the algorithm continue to consume lookahead longer
    # than necessary. The reason I like the equality is of course the
    # simplicity but also because that is the test you need to detect the
    # alternatives that are actually in conflict.</p>
    #
    # <p><strong>CONTINUE/STOP RULE</strong></p>
    #
    # <p>Continue if union of resolved alternative sets from non-conflicting and
    # conflicting alternative subsets has more than one alternative. We are
    # uncertain about which alternative to predict.</p>
    #
    # <p>The complete set of alternatives, {@code [i for (_,i,_)]}, tells us which
    # alternatives are still in the running for the amount of input we've
    # consumed at this point. The conflicting sets let us to strip away
    # configurations that won't lead to more states because we resolve
    # conflicts to the configuration with a minimum alternate for the
    # conflicting set.</p>
    #
    # <p><strong>CASES</strong></p>
    #
    # <ul>
    #
    # <li>no conflicts and more than 1 alternative in set =&gt; continue</li>
    #
    # <li> {@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s, 3, z)},
    # {@code (s', 1, y)}, {@code (s', 2, y)} yields non-conflicting set
    # {@code {3}} U conflicting sets {@code min({1,2})} U {@code min({1,2})} =
    # {@code {1,3}} =&gt; continue
    # </li>
    #
    # <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 1, y)},
    # {@code (s', 2, y)}, {@code (s'', 1, z)} yields non-conflicting set
    # {@code {1}} U conflicting sets {@code min({1,2})} U {@code min({1,2})} =
    # {@code {1}} =&gt; stop and predict 1</li>
    #
    # <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 1, y)},
    # {@code (s', 2, y)} yields conflicting, reduced sets {@code {1}} U
    # {@code {1}} = {@code {1}} =&gt; stop and predict 1, can announce
    # ambiguity {@code {1,2}}</li>
    #
    # <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 2, y)},
    # {@code (s', 3, y)} yields conflicting, reduced sets {@code {1}} U
    # {@code {2}} = {@code {1,2}} =&gt; continue</li>
    #
    # <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 3, y)},
    # {@code (s', 4, y)} yields conflicting, reduced sets {@code {1}} U
    # {@code {3}} = {@code {1,3}} =&gt; continue</li>
    #
    # </ul>
    #
    # <p><strong>EXACT AMBIGUITY DETECTION</strong></p>
    #
    # <p>If all states report the same conflicting set of alternatives, then we
    # know we have the exact ambiguity set.</p>
    #
    # <p><code>|A_<em>i</em>|&gt;1</code> and
    # <code>A_<em>i</em> = A_<em>j</em></code> for all <em>i</em>, <em>j</em>.</p>
    #
    # <p>In other words, we continue examining lookahead until all {@code A_i}
    # have more than one alternative and all {@code A_i} are the same. If
    # {@code A={{1,2}, {1,3}}}, then regular LL prediction would terminate
    # because the resolved set is {@code {1}}. To determine what the real
    # ambiguity is, we have to know whether the ambiguity is between one and
    # two or one and three so we keep going. We can only stop prediction when
    # we need exact ambiguity detection when the sets look like
    # {@code A={{1,2}}} or {@code {{1,2},{1,2}}}, etc...</p>
    #
    @classmethod
    def resolvesToJustOneViableAlt(cls, altsets:list):
        return cls.getSingleViableAlt(altsets)

    #
    # Determines if every alternative subset in {@code altsets} contains more
    # than one alternative.
    #
    # @param altsets a collection of alternative subsets
    # @return {@code true} if every {@link BitSet} in {@code altsets} has
    # {@link BitSet#cardinality cardinality} &gt; 1, otherwise {@code false}
    #
    @classmethod
    def allSubsetsConflict(cls, altsets:list):
        return not cls.hasNonConflictingAltSet(altsets)

    #
    # Determines if any single alternative subset in {@code altsets} contains
    # exactly one alternative.
    #
    # @param altsets a collection of alternative subsets
    # @return {@code true} if {@code altsets} contains a {@link BitSet} with
    # {@link BitSet#cardinality cardinality} 1, otherwise {@code false}
    #
    @classmethod
    def hasNonConflictingAltSet(cls, altsets:list):
        return any(len(alts) == 1 for alts in altsets)

    #
    # Determines if any single alternative subset in {@code altsets} contains
    # more than one alternative.
    #
    # @param altsets a collection of alternative subsets
    # @return {@code true} if {@code altsets} contains a {@link BitSet} with
    # {@link BitSet#cardinality cardinality} &gt; 1, otherwise {@code false}
    #
    @classmethod
    def hasConflictingAltSet(cls, altsets:list):
        return any(len(alts) > 1 for alts in altsets)

    #
    # Determines if every alternative subset in {@code altsets} is equivalent.
    #
    # @param altsets a collection of alternative subsets
    # @return {@code true} if every member of {@code altsets} is equal to the
    # others, otherwise {@code false}
    #
    @classmethod
    def allSubsetsEqual(cls, altsets:list):
        if not altsets:
            return True
        first = next(iter(altsets))
        return all(alts == first for alts in iter(altsets))

    #
    # Returns the unique alternative predicted by all alternative subsets in
    # {@code altsets}. If no such alternative exists, this method returns
    # {@link ATN#INVALID_ALT_NUMBER}.
    #
    # @param altsets a collection of alternative subsets
    #
    @classmethod
    def getUniqueAlt(cls, altsets:list):
        all = cls.getAlts(altsets)
        if len(all)==1:
            return next(iter(all))
        return ATN.INVALID_ALT_NUMBER

    # Gets the complete set of represented alternatives for a collection of
    # alternative subsets. This method returns the union of each {@link BitSet}
    # in {@code altsets}.
    #
    # @param altsets a collection of alternative subsets
    # @return the set of represented alternatives in {@code altsets}
    #
    @classmethod
    def getAlts(cls, altsets:list):
        return set.union(*altsets)

    #
    # This function gets the conflicting alt subsets from a configuration set.
    # For each configuration {@code c} in {@code configs}:
    #
    # <pre>
    # map[c] U= c.{@link ATNConfig#alt alt} # map hash/equals uses s and x, not
    # alt and not pred
    # </pre>
    #
    @classmethod
    def getConflictingAltSubsets(cls, configs:ATNConfigSet):
        configToAlts = dict()
        for c in configs:
            h = hash((c.state.stateNumber, c.context))
            alts = configToAlts.get(h, None)
            if alts is None:
                alts = set()
                configToAlts[h] = alts
            alts.add(c.alt)
        return configToAlts.values()

    #
    # Get a map from state to alt subset from a configuration set. For each
    # configuration {@code c} in {@code configs}:
    #
    # <pre>
    # map[c.{@link ATNConfig#state state}] U= c.{@link ATNConfig#alt alt}
    # </pre>
    #
    @classmethod
    def getStateToAltMap(cls, configs:ATNConfigSet):
        m = dict()
        for c in configs:
            alts = m.get(c.state, None)
            if alts is None:
                alts = set()
                m[c.state] = alts
            alts.add(c.alt)
        return m

    @classmethod
    def hasStateAssociatedWithOneAlt(cls, configs:ATNConfigSet):
        return any(len(alts) == 1 for alts in cls.getStateToAltMap(configs).values())

    @classmethod
    def getSingleViableAlt(cls, altsets:list):
        viableAlts = set()
        for alts in altsets:
            minAlt = min(alts)
            viableAlts.add(minAlt)
            if len(viableAlts)>1 : # more than 1 viable alt
                return ATN.INVALID_ALT_NUMBER
        return min(viableAlts)


// File: venv\Lib\site-packages\antlr4\atn\SemanticContext.py
----------------------------------------
#
# Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
# Use of this file is governed by the BSD 3-clause license that
# can be found in the LICENSE.txt file in the project root.
#

# A tree structure used to record the semantic context in which
#  an ATN configuration is valid.  It's either a single predicate,
#  a conjunction {@code p1&&p2}, or a sum of products {@code p1||p2}.
#
#  <p>I have scoped the {@link AND}, {@link OR}, and {@link Predicate} subclasses of
#  {@link SemanticContext} within the scope of this outer class.</p>
#
from antlr4.Recognizer import Recognizer
from antlr4.RuleContext import RuleContext
from io import StringIO


class SemanticContext(object):
    #
    # The default {@link SemanticContext}, which is semantically equivalent to
    # a predicate of the form {@code {true}?}.
    #
    NONE = None

    #
    # For context independent predicates, we evaluate them without a local
    # context (i.e., null context). That way, we can evaluate them without
    # having to create proper rule-specific context during prediction (as
    # opposed to the parser, which creates them naturally). In a practical
    # sense, this avoids a cast exception from RuleContext to myruleContext.
    #
    # <p>For context dependent predicates, we must pass in a local context so that
    # references such as $arg evaluate properly as _localctx.arg. We only
    # capture context dependent predicates in the context in which we begin
    # prediction, so we passed in the outer context here in case of context
    # dependent predicate evaluation.</p>
    #
    def eval(self, parser:Recognizer , outerContext:RuleContext ):
        pass

    #
    # Evaluate the precedence predicates for the context and reduce the result.
    #
    # @param parser The parser instance.
    # @param outerContext The current parser context object.
    # @return The simplified semantic context after precedence predicates are
    # evaluated, which will be one of the following values.
    # <ul>
    # <li>{@link #NONE}: if the predicate simplifies to {@code true} after
    # precedence predicates are evaluated.</li>
    # <li>{@code null}: if the predicate simplifies to {@code false} after
    # precedence predicates are evaluated.</li>
    # <li>{@code this}: if the semantic context is not changed as a result of
    # precedence predicate evaluation.</li>
    # <li>A non-{@code null} {@link SemanticContext}: the new simplified
    # semantic context after precedence predicates are evaluated.</li>
    # </ul>
    #
    def evalPrecedence(self, parser:Recognizer, outerContext:RuleContext):
        return self

# need forward declaration
AND = None

def andContext(a:SemanticContext, b:SemanticContext):
    if a is None or a is SemanticContext.NONE:
        return b
    if b is None or b is SemanticContext.NONE:
        return a
    result = AND(a, b)
    if len(result.opnds) == 1:
        return result.opnds[0]
    else:
        return result

# need forward declaration
OR = None

def orContext(a:SemanticContext, b:SemanticContext):
    if a is None:
        return b
    if b is None:
        return a
    if a is SemanticContext.NONE or b is SemanticContext.NONE:
        return SemanticContext.NONE
    result = OR(a, b)
    if len(result.opnds) == 1:
        return result.opnds[0]
    else:
        return result

def filterPrecedencePredicates(collection:set):
    return [context for context in collection if isinstance(context, PrecedencePredicate)]


class Predicate(SemanticContext):
    __slots__ = ('ruleIndex', 'predIndex', 'isCtxDependent')

    def __init__(self, ruleIndex:int=-1, predIndex:int=-1, isCtxDependent:bool=False):
        self.ruleIndex = ruleIndex
        self.predIndex = predIndex
        self.isCtxDependent = isCtxDependent # e.g., $i ref in pred

    def eval(self, parser:Recognizer , outerContext:RuleContext ):
        localctx = outerContext if self.isCtxDependent else None
        return parser.sempred(localctx, self.ruleIndex, self.predIndex)

    def __hash__(self):
        return hash((self.ruleIndex, self.predIndex, self.isCtxDependent))

    def __eq__(self, other):
        if self is other:
            return True
        elif not isinstance(other, Predicate):
            return False
        return self.ruleIndex == other.ruleIndex and \
               self.predIndex == other.predIndex and \
               self.isCtxDependent == other.isCtxDependent

    def __str__(self):
        return "{" + str(self.ruleIndex) + ":" + str(self.predIndex) + "}?"


class PrecedencePredicate(SemanticContext):

    def __init__(self, precedence:int=0):
        self.precedence = precedence

    def eval(self, parser:Recognizer , outerContext:RuleContext ):
        return parser.precpred(outerContext, self.precedence)

    def evalPrecedence(self, parser:Recognizer, outerContext:RuleContext):
        if parser.precpred(outerContext, self.precedence):
            return SemanticContext.NONE
        else:
            return None

    def __lt__(self, other):
        return self.precedence < other.precedence

    def __hash__(self):
        return 31

    def __eq__(self, other):
        if self is other:
            return True
        elif not isinstance(other, PrecedencePredicate):
            return False
        else:
            return self.precedence == other.precedence

# A semantic context which is true whenever none of the contained contexts
# is false.
del AND
class AND(SemanticContext):
    __slots__ = 'opnds'

    def __init__(self, a:SemanticContext, b:SemanticContext):
        operands = set()
        if isinstance( a, AND ):
            operands.update(a.opnds)
        else:
            operands.add(a)
        if isinstance( b, AND ):
            operands.update(b.opnds)
        else:
            operands.add(b)

        precedencePredicates = filterPrecedencePredicates(operands)
        if len(precedencePredicates)>0:
            # interested in the transition with the lowest precedence
            reduced = min(precedencePredicates)
            operands.add(reduced)

        self.opnds = list(operands)

    def __eq__(self, other):
        if self is other:
            return True
        elif not isinstance(other, AND):
            return False
        else:
            return self.opnds == other.opnds

    def __hash__(self):
        h = 0
        for o in self.opnds:
            h = hash((h, o))
        return hash((h, "AND"))

    #
    # {@inheritDoc}
    #
    # <p>
    # The evaluation of predicates by this context is short-circuiting, but
    # unordered.</p>
    #
    def eval(self, parser:Recognizer, outerContext:RuleContext):
        return all(opnd.eval(parser, outerContext) for opnd in self.opnds)

    def evalPrecedence(self, parser:Recognizer, outerContext:RuleContext):
        differs = False
        operands = []
        for context in self.opnds:
            evaluated = context.evalPrecedence(parser, outerContext)
            differs |= evaluated is not context
            if evaluated is None:
                # The AND context is false if any element is false
                return None
            elif evaluated is not SemanticContext.NONE:
                # Reduce the result by skipping true elements
                operands.append(evaluated)

        if not differs:
            return self

        if len(operands)==0:
            # all elements were true, so the AND context is true
            return SemanticContext.NONE

        result = None
        for o in operands:
            result = o if result is None else andContext(result, o)

        return result

    def __str__(self):
        with StringIO() as buf:
            first = True
            for o in self.opnds:
                if not first:
                    buf.write("&&")
                buf.write(str(o))
                first = False
            return buf.getvalue()

#
# A semantic context which is true whenever at least one of the contained
# contexts is true.
del OR
class OR (SemanticContext):
    __slots__ = 'opnds'

    def __init__(self, a:SemanticContext, b:SemanticContext):
        operands = set()
        if isinstance( a, OR ):
            operands.update(a.opnds)
        else:
            operands.add(a)
        if isinstance( b, OR ):
            operands.update(b.opnds)
        else:
            operands.add(b)

        precedencePredicates = filterPrecedencePredicates(operands)
        if len(precedencePredicates)>0:
            # interested in the transition with the highest precedence
            s = sorted(precedencePredicates)
            reduced = s[-1]
            operands.add(reduced)

        self.opnds = list(operands)

    def __eq__(self, other):
        if self is other:
            return True
        elif not isinstance(other, OR):
            return False
        else:
            return self.opnds == other.opnds

    def __hash__(self):
        h = 0
        for o in self.opnds:
            h = hash((h, o))
        return hash((h, "OR"))

    # <p>
    # The evaluation of predicates by this context is short-circuiting, but
    # unordered.</p>
    #
    def eval(self, parser:Recognizer, outerContext:RuleContext):
        return any(opnd.eval(parser, outerContext) for opnd in self.opnds)

    def evalPrecedence(self, parser:Recognizer, outerContext:RuleContext):
        differs = False
        operands = []
        for context in self.opnds:
            evaluated = context.evalPrecedence(parser, outerContext)
            differs |= evaluated is not context
            if evaluated is SemanticContext.NONE:
                # The OR context is true if any element is true
                return SemanticContext.NONE
            elif evaluated is not None:
                # Reduce the result by skipping false elements
                operands.append(evaluated)

        if not differs:
            return self

        if len(operands)==0:
            # all elements were false, so the OR context is false
            return None

        result = None
        for o in operands:
            result = o if result is None else orContext(result, o)

        return result

    def __str__(self):
        with StringIO() as buf:
            first = True
            for o in self.opnds:
                if not first:
                    buf.write("||")
                buf.write(str(o))
                first = False
            return buf.getvalue()


SemanticContext.NONE = Predicate()


// File: venv\Lib\site-packages\antlr4\atn\Transition.py
----------------------------------------
#
# Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
# Use of this file is governed by the BSD 3-clause license that
# can be found in the LICENSE.txt file in the project root.
#

#  An ATN transition between any two ATN states.  Subclasses define
#  atom, set, epsilon, action, predicate, rule transitions.
#
#  <p>This is a one way link.  It emanates from a state (usually via a list of
#  transitions) and has a target state.</p>
#
#  <p>Since we never have to change the ATN transitions once we construct it,
#  we can fix these transitions as specific classes. The DFA transitions
#  on the other hand need to update the labels as it adds transitions to
#  the states. We'll use the term Edge for the DFA to distinguish them from
#  ATN transitions.</p>
#
from antlr4.IntervalSet import IntervalSet
from antlr4.Token import Token

# need forward declarations
from antlr4.atn.SemanticContext import Predicate, PrecedencePredicate

ATNState = None
RuleStartState = None

class Transition (object):
    __slots__ = ('target','isEpsilon','label')

    # constants for serialization
    EPSILON			= 1
    RANGE			= 2
    RULE			= 3
    PREDICATE		= 4 # e.g., {isType(input.LT(1))}?
    ATOM			= 5
    ACTION			= 6
    SET				= 7 # ~(A|B) or ~atom, wildcard, which convert to next 2
    NOT_SET			= 8
    WILDCARD		= 9
    PRECEDENCE		= 10

    serializationNames = [
            "INVALID",
            "EPSILON",
            "RANGE",
            "RULE",
            "PREDICATE",
            "ATOM",
            "ACTION",
            "SET",
            "NOT_SET",
            "WILDCARD",
            "PRECEDENCE"
        ]

    serializationTypes = dict()

    def __init__(self, target:ATNState):
        # The target of this transition.
        if target is None:
            raise Exception("target cannot be null.")
        self.target = target
        # Are we epsilon, action, sempred?
        self.isEpsilon = False
        self.label = None


# TODO: make all transitions sets? no, should remove set edges
class AtomTransition(Transition):
    __slots__ = ('label_', 'serializationType')

    def __init__(self, target:ATNState, label:int):
        super().__init__(target)
        self.label_ = label # The token type or character value; or, signifies special label.
        self.label = self.makeLabel()
        self.serializationType = self.ATOM

    def makeLabel(self):
        s = IntervalSet()
        s.addOne(self.label_)
        return s

    def matches( self, symbol:int, minVocabSymbol:int,  maxVocabSymbol:int):
        return self.label_ == symbol

    def __str__(self):
        return str(self.label_)

class RuleTransition(Transition):
    __slots__ = ('ruleIndex', 'precedence', 'followState', 'serializationType')

    def __init__(self, ruleStart:RuleStartState, ruleIndex:int, precedence:int, followState:ATNState):
        super().__init__(ruleStart)
        self.ruleIndex = ruleIndex # ptr to the rule definition object for this rule ref
        self.precedence = precedence
        self.followState = followState # what node to begin computations following ref to rule
        self.serializationType = self.RULE
        self.isEpsilon = True

    def matches( self, symbol:int, minVocabSymbol:int,  maxVocabSymbol:int):
        return False


class EpsilonTransition(Transition):
    __slots__ = ('serializationType', 'outermostPrecedenceReturn')

    def __init__(self, target, outermostPrecedenceReturn=-1):
        super(EpsilonTransition, self).__init__(target)
        self.serializationType = self.EPSILON
        self.isEpsilon = True
        self.outermostPrecedenceReturn = outermostPrecedenceReturn

    def matches( self, symbol:int, minVocabSymbol:int,  maxVocabSymbol:int):
        return False

    def __str__(self):
        return "epsilon"

class RangeTransition(Transition):
    __slots__ = ('serializationType', 'start', 'stop')

    def __init__(self, target:ATNState, start:int, stop:int):
        super().__init__(target)
        self.serializationType = self.RANGE
        self.start = start
        self.stop = stop
        self.label = self.makeLabel()

    def makeLabel(self):
        s = IntervalSet()
        s.addRange(range(self.start, self.stop + 1))
        return s

    def matches( self, symbol:int, minVocabSymbol:int,  maxVocabSymbol:int):
        return symbol >= self.start and symbol <= self.stop

    def __str__(self):
        return "'" + chr(self.start) + "'..'" + chr(self.stop) + "'"

class AbstractPredicateTransition(Transition):

    def __init__(self, target:ATNState):
        super().__init__(target)


class PredicateTransition(AbstractPredicateTransition):
    __slots__ = ('serializationType', 'ruleIndex', 'predIndex', 'isCtxDependent')

    def __init__(self, target:ATNState, ruleIndex:int, predIndex:int, isCtxDependent:bool):
        super().__init__(target)
        self.serializationType = self.PREDICATE
        self.ruleIndex = ruleIndex
        self.predIndex = predIndex
        self.isCtxDependent = isCtxDependent # e.g., $i ref in pred
        self.isEpsilon = True

    def matches( self, symbol:int, minVocabSymbol:int,  maxVocabSymbol:int):
        return False

    def getPredicate(self):
        return Predicate(self.ruleIndex, self.predIndex, self.isCtxDependent)

    def __str__(self):
        return "pred_" + str(self.ruleIndex) + ":" + str(self.predIndex)

class ActionTransition(Transition):
    __slots__ = ('serializationType', 'ruleIndex', 'actionIndex', 'isCtxDependent')

    def __init__(self, target:ATNState, ruleIndex:int, actionIndex:int=-1, isCtxDependent:bool=False):
        super().__init__(target)
        self.serializationType = self.ACTION
        self.ruleIndex = ruleIndex
        self.actionIndex = actionIndex
        self.isCtxDependent = isCtxDependent # e.g., $i ref in pred
        self.isEpsilon = True

    def matches( self, symbol:int, minVocabSymbol:int,  maxVocabSymbol:int):
        return False

    def __str__(self):
        return "action_"+self.ruleIndex+":"+self.actionIndex

# A transition containing a set of values.
class SetTransition(Transition):
    __slots__ = 'serializationType'

    def __init__(self, target:ATNState, set:IntervalSet):
        super().__init__(target)
        self.serializationType = self.SET
        if set is not None:
            self.label = set
        else:
            self.label = IntervalSet()
            self.label.addRange(range(Token.INVALID_TYPE, Token.INVALID_TYPE + 1))

    def matches( self, symbol:int, minVocabSymbol:int,  maxVocabSymbol:int):
        return symbol in self.label

    def __str__(self):
        return str(self.label)

class NotSetTransition(SetTransition):

    def __init__(self, target:ATNState, set:IntervalSet):
        super().__init__(target, set)
        self.serializationType = self.NOT_SET

    def matches( self, symbol:int, minVocabSymbol:int,  maxVocabSymbol:int):
        return symbol >= minVocabSymbol \
            and symbol <= maxVocabSymbol \
            and not super(type(self), self).matches(symbol, minVocabSymbol, maxVocabSymbol)

    def __str__(self):
        return '~' + super(type(self), self).__str__()


class WildcardTransition(Transition):
    __slots__ = 'serializationType'

    def __init__(self, target:ATNState):
        super().__init__(target)
        self.serializationType = self.WILDCARD

    def matches( self, symbol:int, minVocabSymbol:int,  maxVocabSymbol:int):
        return symbol >= minVocabSymbol and symbol <= maxVocabSymbol

    def __str__(self):
        return "."


class PrecedencePredicateTransition(AbstractPredicateTransition):
    __slots__ = ('serializationType', 'precedence')

    def __init__(self, target:ATNState, precedence:int):
        super().__init__(target)
        self.serializationType = self.PRECEDENCE
        self.precedence = precedence
        self.isEpsilon = True

    def matches( self, symbol:int, minVocabSymbol:int,  maxVocabSymbol:int):
        return False


    def getPredicate(self):
        return PrecedencePredicate(self.precedence)

    def __str__(self):
        return self.precedence + " >= _p"


Transition.serializationTypes = {
             EpsilonTransition: Transition.EPSILON,
             RangeTransition: Transition.RANGE,
             RuleTransition: Transition.RULE,
             PredicateTransition: Transition.PREDICATE,
             AtomTransition: Transition.ATOM,
             ActionTransition: Transition.ACTION,
             SetTransition: Transition.SET,
             NotSetTransition: Transition.NOT_SET,
             WildcardTransition: Transition.WILDCARD,
             PrecedencePredicateTransition: Transition.PRECEDENCE
         }

del ATNState
del RuleStartState

from antlr4.atn.ATNState import *


// File: venv\Lib\site-packages\antlr4\BufferedTokenStream.py
----------------------------------------
#
# Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
# Use of this file is governed by the BSD 3-clause license that
# can be found in the LICENSE.txt file in the project root.

# This implementation of {@link TokenStream} loads tokens from a
# {@link TokenSource} on-demand, and places the tokens in a buffer to provide
# access to any previous token by index.
#
# <p>
# This token stream ignores the value of {@link Token#getChannel}. If your
# parser requires the token stream filter tokens to only those on a particular
# channel, such as {@link Token#DEFAULT_CHANNEL} or
# {@link Token#HIDDEN_CHANNEL}, use a filtering token stream such a
# {@link CommonTokenStream}.</p>
from io import StringIO
from antlr4.Token import Token
from antlr4.error.Errors import IllegalStateException

# need forward declaration
Lexer = None

# this is just to keep meaningful parameter types to Parser
class TokenStream(object):

    pass


class BufferedTokenStream(TokenStream):
    __slots__ = ('tokenSource', 'tokens', 'index', 'fetchedEOF')

    def __init__(self, tokenSource:Lexer):
        # The {@link TokenSource} from which tokens for this stream are fetched.
        self.tokenSource = tokenSource

        # A collection of all tokens fetched from the token source. The list is
        # considered a complete view of the input once {@link #fetchedEOF} is set
        # to {@code true}.
        self.tokens = []

        # The index into {@link #tokens} of the current token (next token to
        # {@link #consume}). {@link #tokens}{@code [}{@link #p}{@code ]} should be
        # {@link #LT LT(1)}.
        #
        # <p>This field is set to -1 when the stream is first constructed or when
        # {@link #setTokenSource} is called, indicating that the first token has
        # not yet been fetched from the token source. For additional information,
        # see the documentation of {@link IntStream} for a description of
        # Initializing Methods.</p>
        self.index = -1

        # Indicates whether the {@link Token#EOF} token has been fetched from
        # {@link #tokenSource} and added to {@link #tokens}. This field improves
        # performance for the following cases:
        #
        # <ul>
        # <li>{@link #consume}: The lookahead check in {@link #consume} to prevent
        # consuming the EOF symbol is optimized by checking the values of
        # {@link #fetchedEOF} and {@link #p} instead of calling {@link #LA}.</li>
        # <li>{@link #fetch}: The check to prevent adding multiple EOF symbols into
        # {@link #tokens} is trivial with this field.</li>
        # <ul>
        self.fetchedEOF = False

    def mark(self):
        return 0

    def release(self, marker:int):
        # no resources to release
        pass

    def reset(self):
        self.seek(0)

    def seek(self, index:int):
        self.lazyInit()
        self.index = self.adjustSeekIndex(index)

    def get(self, index:int):
        self.lazyInit()
        return self.tokens[index]

    def consume(self):
        skipEofCheck = False
        if self.index >= 0:
            if self.fetchedEOF:
                # the last token in tokens is EOF. skip check if p indexes any
                # fetched token except the last.
                skipEofCheck = self.index < len(self.tokens) - 1
            else:
               # no EOF token in tokens. skip check if p indexes a fetched token.
                skipEofCheck = self.index < len(self.tokens)
        else:
            # not yet initialized
            skipEofCheck = False

        if not skipEofCheck and self.LA(1) == Token.EOF:
            raise IllegalStateException("cannot consume EOF")

        if self.sync(self.index + 1):
            self.index = self.adjustSeekIndex(self.index + 1)

    # Make sure index {@code i} in tokens has a token.
    #
    # @return {@code true} if a token is located at index {@code i}, otherwise
    #    {@code false}.
    # @see #get(int i)
    #/
    def sync(self, i:int):
        n = i - len(self.tokens) + 1 # how many more elements we need?
        if n > 0 :
            fetched = self.fetch(n)
            return fetched >= n
        return True

    # Add {@code n} elements to buffer.
    #
    # @return The actual number of elements added to the buffer.
    #/
    def fetch(self, n:int):
        if self.fetchedEOF:
            return 0
        for i in range(0, n):
            t = self.tokenSource.nextToken()
            t.tokenIndex = len(self.tokens)
            self.tokens.append(t)
            if t.type==Token.EOF:
                self.fetchedEOF = True
                return i + 1
        return n


    # Get all tokens from start..stop inclusively#/
    def getTokens(self, start:int, stop:int, types:set=None):
        if start<0 or stop<0:
            return None
        self.lazyInit()
        subset = []
        if stop >= len(self.tokens):
            stop = len(self.tokens)-1
        for i in range(start, stop):
            t = self.tokens[i]
            if t.type==Token.EOF:
                break
            if types is None or t.type in types:
                subset.append(t)
        return subset

    def LA(self, i:int):
        return self.LT(i).type

    def LB(self, k:int):
        if (self.index-k) < 0:
            return None
        return self.tokens[self.index-k]

    def LT(self, k:int):
        self.lazyInit()
        if k==0:
            return None
        if k < 0:
            return self.LB(-k)
        i = self.index + k - 1
        self.sync(i)
        if i >= len(self.tokens): # return EOF token
            # EOF must be last token
            return self.tokens[len(self.tokens)-1]
        return self.tokens[i]

    # Allowed derived classes to modify the behavior of operations which change
    # the current stream position by adjusting the target token index of a seek
    # operation. The default implementation simply returns {@code i}. If an
    # exception is thrown in this method, the current stream index should not be
    # changed.
    #
    # <p>For example, {@link CommonTokenStream} overrides this method to ensure that
    # the seek target is always an on-channel token.</p>
    #
    # @param i The target token index.
    # @return The adjusted target token index.

    def adjustSeekIndex(self, i:int):
        return i

    def lazyInit(self):
        if self.index == -1:
            self.setup()

    def setup(self):
        self.sync(0)
        self.index = self.adjustSeekIndex(0)

    # Reset this token stream by setting its token source.#/
    def setTokenSource(self, tokenSource:Lexer):
        self.tokenSource = tokenSource
        self.tokens = []
        self.index = -1
        self.fetchedEOF = False


    # Given a starting index, return the index of the next token on channel.
    #  Return i if tokens[i] is on channel.  Return the index of the EOF token
    # if there are no tokens on channel between i and EOF.
    #/
    def nextTokenOnChannel(self, i:int, channel:int):
        self.sync(i)
        if i>=len(self.tokens):
            return len(self.tokens) - 1
        token = self.tokens[i]
        while token.channel!=channel:
            if token.type==Token.EOF:
                return i
            i += 1
            self.sync(i)
            token = self.tokens[i]
        return i

    # Given a starting index, return the index of the previous token on channel.
    #  Return i if tokens[i] is on channel. Return -1 if there are no tokens
    #  on channel between i and 0.
    def previousTokenOnChannel(self, i:int, channel:int):
        while i>=0 and self.tokens[i].channel!=channel:
            i -= 1
        return i

    # Collect all tokens on specified channel to the right of
    #  the current token up until we see a token on DEFAULT_TOKEN_CHANNEL or
    #  EOF. If channel is -1, find any non default channel token.
    def getHiddenTokensToRight(self, tokenIndex:int, channel:int=-1):
        self.lazyInit()
        if tokenIndex<0 or tokenIndex>=len(self.tokens):
            raise Exception(str(tokenIndex) + " not in 0.." + str(len(self.tokens)-1))
        from antlr4.Lexer import Lexer
        nextOnChannel = self.nextTokenOnChannel(tokenIndex + 1, Lexer.DEFAULT_TOKEN_CHANNEL)
        from_ = tokenIndex+1
        # if none onchannel to right, nextOnChannel=-1 so set to = last token
        to = (len(self.tokens)-1) if nextOnChannel==-1 else nextOnChannel
        return self.filterForChannel(from_, to, channel)


    # Collect all tokens on specified channel to the left of
    #  the current token up until we see a token on DEFAULT_TOKEN_CHANNEL.
    #  If channel is -1, find any non default channel token.
    def getHiddenTokensToLeft(self, tokenIndex:int, channel:int=-1):
        self.lazyInit()
        if tokenIndex<0 or tokenIndex>=len(self.tokens):
            raise Exception(str(tokenIndex) + " not in 0.." + str(len(self.tokens)-1))
        from antlr4.Lexer import Lexer
        prevOnChannel = self.previousTokenOnChannel(tokenIndex - 1, Lexer.DEFAULT_TOKEN_CHANNEL)
        if prevOnChannel == tokenIndex - 1:
            return None
        # if none on channel to left, prevOnChannel=-1 then from=0
        from_ = prevOnChannel+1
        to = tokenIndex-1
        return self.filterForChannel(from_, to, channel)


    def filterForChannel(self, left:int, right:int, channel:int):
        hidden = []
        for i in range(left, right+1):
            t = self.tokens[i]
            if channel==-1:
                from antlr4.Lexer import Lexer
                if t.channel!= Lexer.DEFAULT_TOKEN_CHANNEL:
                    hidden.append(t)
            elif t.channel==channel:
                    hidden.append(t)
        if len(hidden)==0:
            return None
        return hidden

    def getSourceName(self):
        return self.tokenSource.getSourceName()

    # Get the text of all tokens in this buffer.#/
    def getText(self, start:int=None, stop:int=None):
        self.lazyInit()
        self.fill()
        if isinstance(start, Token):
            start = start.tokenIndex
        elif start is None:
            start = 0
        if isinstance(stop, Token):
            stop = stop.tokenIndex
        elif stop is None or stop >= len(self.tokens):
            stop = len(self.tokens) - 1
        if start < 0 or stop < 0 or stop < start:
            return ""
        with StringIO() as buf:
            for i in range(start, stop+1):
                t = self.tokens[i]
                if t.type==Token.EOF:
                    break
                buf.write(t.text)
            return buf.getvalue()


    # Get all tokens from lexer until EOF#/
    def fill(self):
        self.lazyInit()
        while self.fetch(1000)==1000:
            pass


// File: venv\Lib\site-packages\antlr4\CommonTokenFactory.py
----------------------------------------
#
# Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
# Use of this file is governed by the BSD 3-clause license that
# can be found in the LICENSE.txt file in the project root.
#

#
# This default implementation of {@link TokenFactory} creates
# {@link CommonToken} objects.
#
from antlr4.Token import CommonToken

class TokenFactory(object):

    pass

class CommonTokenFactory(TokenFactory):
    __slots__ = 'copyText'

    #
    # The default {@link CommonTokenFactory} instance.
    #
    # <p>
    # This token factory does not explicitly copy token text when constructing
    # tokens.</p>
    #
    DEFAULT = None

    def __init__(self, copyText:bool=False):
        # Indicates whether {@link CommonToken#setText} should be called after
        # constructing tokens to explicitly set the text. This is useful for cases
        # where the input stream might not be able to provide arbitrary substrings
        # of text from the input after the lexer creates a token (e.g. the
        # implementation of {@link CharStream#getText} in
        # {@link UnbufferedCharStream} throws an
        # {@link UnsupportedOperationException}). Explicitly setting the token text
        # allows {@link Token#getText} to be called at any time regardless of the
        # input stream implementation.
        #
        # <p>
        # The default value is {@code false} to avoid the performance and memory
        # overhead of copying text for every token unless explicitly requested.</p>
        #
        self.copyText = copyText

    def create(self, source, type:int, text:str, channel:int, start:int, stop:int, line:int, column:int):
        t = CommonToken(source, type, channel, start, stop)
        t.line = line
        t.column = column
        if text is not None:
            t.text = text
        elif self.copyText and source[1] is not None:
            t.text = source[1].getText(start,stop)
        return t

    def createThin(self, type:int, text:str):
        t = CommonToken(type=type)
        t.text = text
        return t

CommonTokenFactory.DEFAULT = CommonTokenFactory()


// File: venv\Lib\site-packages\antlr4\CommonTokenStream.py
----------------------------------------
#
# Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
# Use of this file is governed by the BSD 3-clause license that
# can be found in the LICENSE.txt file in the project root.
#/

#
# This class extends {@link BufferedTokenStream} with functionality to filter
# token streams to tokens on a particular channel (tokens where
# {@link Token#getChannel} returns a particular value).
#
# <p>
# This token stream provides access to all tokens by index or when calling
# methods like {@link #getText}. The channel filtering is only used for code
# accessing tokens via the lookahead methods {@link #LA}, {@link #LT}, and
# {@link #LB}.</p>
#
# <p>
# By default, tokens are placed on the default channel
# ({@link Token#DEFAULT_CHANNEL}), but may be reassigned by using the
# {@code ->channel(HIDDEN)} lexer command, or by using an embedded action to
# call {@link Lexer#setChannel}.
# </p>
#
# <p>
# Note: lexer rules which use the {@code ->skip} lexer command or call
# {@link Lexer#skip} do not produce tokens at all, so input text matched by
# such a rule will not be available as part of the token stream, regardless of
# channel.</p>
#/

from antlr4.BufferedTokenStream import BufferedTokenStream
from antlr4.Lexer import Lexer
from antlr4.Token import Token


class CommonTokenStream(BufferedTokenStream):
    __slots__ = 'channel'

    def __init__(self, lexer:Lexer, channel:int=Token.DEFAULT_CHANNEL):
        super().__init__(lexer)
        self.channel = channel

    def adjustSeekIndex(self, i:int):
        return self.nextTokenOnChannel(i, self.channel)

    def LB(self, k:int):
        if k==0 or (self.index-k)<0:
            return None
        i = self.index
        n = 1
        # find k good tokens looking backwards
        while n <= k:
            # skip off-channel tokens
            i = self.previousTokenOnChannel(i - 1, self.channel)
            n += 1
        if i < 0:
            return None
        return self.tokens[i]

    def LT(self, k:int):
        self.lazyInit()
        if k == 0:
            return None
        if k < 0:
            return self.LB(-k)
        i = self.index
        n = 1 # we know tokens[pos] is a good one
        # find k good tokens
        while n < k:
            # skip off-channel tokens, but make sure to not look past EOF
            if self.sync(i + 1):
                i = self.nextTokenOnChannel(i + 1, self.channel)
            n += 1
        return self.tokens[i]

    # Count EOF just once.#/
    def getNumberOfOnChannelTokens(self):
        n = 0
        self.fill()
        for i in range(0, len(self.tokens)):
            t = self.tokens[i]
            if t.channel==self.channel:
                n += 1
            if t.type==Token.EOF:
                break
        return n


// File: venv\Lib\site-packages\antlr4\dfa\__init__.py
----------------------------------------
__author__ = 'ericvergnaud'


// File: venv\Lib\site-packages\antlr4\dfa\DFA.py
----------------------------------------
#
# Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
# Use of this file is governed by the BSD 3-clause license that
# can be found in the LICENSE.txt file in the project root.
from antlr4.atn.ATNState import StarLoopEntryState

from antlr4.atn.ATNConfigSet import ATNConfigSet
from antlr4.atn.ATNState import DecisionState
from antlr4.dfa.DFAState import DFAState
from antlr4.error.Errors import IllegalStateException


class DFA(object):
    __slots__ = ('atnStartState', 'decision', '_states', 's0', 'precedenceDfa')

    def __init__(self, atnStartState:DecisionState, decision:int=0):
        # From which ATN state did we create this DFA?
        self.atnStartState = atnStartState
        self.decision = decision
        # A set of all DFA states. Use {@link Map} so we can get old state back
        #  ({@link Set} only allows you to see if it's there).
        self._states = dict()
        self.s0 = None
        # {@code true} if this DFA is for a precedence decision; otherwise,
        # {@code false}. This is the backing field for {@link #isPrecedenceDfa},
        # {@link #setPrecedenceDfa}.
        self.precedenceDfa = False

        if isinstance(atnStartState, StarLoopEntryState):
            if atnStartState.isPrecedenceDecision:
                self.precedenceDfa = True
                precedenceState = DFAState(configs=ATNConfigSet())
                precedenceState.edges = []
                precedenceState.isAcceptState = False
                precedenceState.requiresFullContext = False
                self.s0 = precedenceState


    # Get the start state for a specific precedence value.
    #
    # @param precedence The current precedence.
    # @return The start state corresponding to the specified precedence, or
    # {@code null} if no start state exists for the specified precedence.
    #
    # @throws IllegalStateException if this is not a precedence DFA.
    # @see #isPrecedenceDfa()

    def getPrecedenceStartState(self, precedence:int):
        if not self.precedenceDfa:
            raise IllegalStateException("Only precedence DFAs may contain a precedence start state.")

        # s0.edges is never null for a precedence DFA
        if precedence < 0 or precedence >= len(self.s0.edges):
            return None
        return self.s0.edges[precedence]

    # Set the start state for a specific precedence value.
    #
    # @param precedence The current precedence.
    # @param startState The start state corresponding to the specified
    # precedence.
    #
    # @throws IllegalStateException if this is not a precedence DFA.
    # @see #isPrecedenceDfa()
    #
    def setPrecedenceStartState(self, precedence:int, startState:DFAState):
        if not self.precedenceDfa:
            raise IllegalStateException("Only precedence DFAs may contain a precedence start state.")

        if precedence < 0:
            return

        # synchronization on s0 here is ok. when the DFA is turned into a
        # precedence DFA, s0 will be initialized once and not updated again
        # s0.edges is never null for a precedence DFA
        if precedence >= len(self.s0.edges):
            ext = [None] * (precedence + 1 - len(self.s0.edges))
            self.s0.edges.extend(ext)
        self.s0.edges[precedence] = startState
    #
    # Sets whether this is a precedence DFA. If the specified value differs
    # from the current DFA configuration, the following actions are taken;
    # otherwise no changes are made to the current DFA.
    #
    # <ul>
    # <li>The {@link #states} map is cleared</li>
    # <li>If {@code precedenceDfa} is {@code false}, the initial state
    # {@link #s0} is set to {@code null}; otherwise, it is initialized to a new
    # {@link DFAState} with an empty outgoing {@link DFAState#edges} array to
    # store the start states for individual precedence values.</li>
    # <li>The {@link #precedenceDfa} field is updated</li>
    # </ul>
    #
    # @param precedenceDfa {@code true} if this is a precedence DFA; otherwise,
    # {@code false}

    def setPrecedenceDfa(self, precedenceDfa:bool):
        if self.precedenceDfa != precedenceDfa:
            self._states = dict()
            if precedenceDfa:
                precedenceState = DFAState(configs=ATNConfigSet())
                precedenceState.edges = []
                precedenceState.isAcceptState = False
                precedenceState.requiresFullContext = False
                self.s0 = precedenceState
            else:
                self.s0 = None
            self.precedenceDfa = precedenceDfa

    @property
    def states(self):
        return self._states

    # Return a list of all states in this DFA, ordered by state number.
    def sortedStates(self):
        return sorted(self._states.keys(), key=lambda state: state.stateNumber)

    def __str__(self):
        return self.toString(None)

    def toString(self, literalNames:list=None, symbolicNames:list=None):
        if self.s0 is None:
            return ""
        from antlr4.dfa.DFASerializer import DFASerializer
        serializer = DFASerializer(self,literalNames,symbolicNames)
        return str(serializer)

    def toLexerString(self):
        if self.s0 is None:
            return ""
        from antlr4.dfa.DFASerializer import LexerDFASerializer
        serializer = LexerDFASerializer(self)
        return str(serializer)


// File: venv\Lib\site-packages\antlr4\dfa\DFASerializer.py
----------------------------------------
#
# Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
# Use of this file is governed by the BSD 3-clause license that
# can be found in the LICENSE.txt file in the project root.
#/

# A DFA walker that knows how to dump them to serialized strings.#/
from io import StringIO
from antlr4 import DFA
from antlr4.Utils import str_list
from antlr4.dfa.DFAState import DFAState


class DFASerializer(object):
    __slots__ = ('dfa', 'literalNames', 'symbolicNames')

    def __init__(self, dfa:DFA, literalNames:list=None, symbolicNames:list=None):
        self.dfa = dfa
        self.literalNames = literalNames
        self.symbolicNames = symbolicNames

    def __str__(self):
        if self.dfa.s0 is None:
            return None
        with StringIO() as buf:
            for s in self.dfa.sortedStates():
                n = 0
                if s.edges is not None:
                    n = len(s.edges)
                for i in range(0, n):
                    t = s.edges[i]
                    if t is not None and t.stateNumber != 0x7FFFFFFF:
                        buf.write(self.getStateString(s))
                        label = self.getEdgeLabel(i)
                        buf.write("-")
                        buf.write(label)
                        buf.write("->")
                        buf.write(self.getStateString(t))
                        buf.write('\n')
            output = buf.getvalue()
            if len(output)==0:
                return None
            else:
                return output

    def getEdgeLabel(self, i:int):
        if i==0:
            return "EOF"
        if self.literalNames is not None and i<=len(self.literalNames):
            return self.literalNames[i-1]
        elif self.symbolicNames is not None and i<=len(self.symbolicNames):
            return self.symbolicNames[i-1]
        else:
            return str(i-1)

    def getStateString(self, s:DFAState):
        n = s.stateNumber
        baseStateStr = ( ":" if s.isAcceptState else "") + "s" + str(n) + ( "^" if s.requiresFullContext else "")
        if s.isAcceptState:
            if s.predicates is not None:
                return baseStateStr + "=>" + str_list(s.predicates)
            else:
                return baseStateStr + "=>" + str(s.prediction)
        else:
            return baseStateStr

class LexerDFASerializer(DFASerializer):

    def __init__(self, dfa:DFA):
        super().__init__(dfa, None)

    def getEdgeLabel(self, i:int):
        return "'" + chr(i) + "'"


// File: venv\Lib\site-packages\antlr4\dfa\DFAState.py
----------------------------------------
#
# Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
# Use of this file is governed by the BSD 3-clause license that
# can be found in the LICENSE.txt file in the project root.
#/

# Map a predicate to a predicted alternative.#/
from io import StringIO
from antlr4.atn.ATNConfigSet import ATNConfigSet
from antlr4.atn.SemanticContext import SemanticContext


class PredPrediction(object):
    __slots__ = ('alt', 'pred')

    def __init__(self, pred:SemanticContext, alt:int):
        self.alt = alt
        self.pred = pred

    def __str__(self):
        return "(" + str(self.pred) + ", " + str(self.alt) +  ")"

# A DFA state represents a set of possible ATN configurations.
#  As Aho, Sethi, Ullman p. 117 says "The DFA uses its state
#  to keep track of all possible states the ATN can be in after
#  reading each input symbol.  That is to say, after reading
#  input a1a2..an, the DFA is in a state that represents the
#  subset T of the states of the ATN that are reachable from the
#  ATN's start state along some path labeled a1a2..an."
#  In conventional NFA&rarr;DFA conversion, therefore, the subset T
#  would be a bitset representing the set of states the
#  ATN could be in.  We need to track the alt predicted by each
#  state as well, however.  More importantly, we need to maintain
#  a stack of states, tracking the closure operations as they
#  jump from rule to rule, emulating rule invocations (method calls).
#  I have to add a stack to simulate the proper lookahead sequences for
#  the underlying LL grammar from which the ATN was derived.
#
#  <p>I use a set of ATNConfig objects not simple states.  An ATNConfig
#  is both a state (ala normal conversion) and a RuleContext describing
#  the chain of rules (if any) followed to arrive at that state.</p>
#
#  <p>A DFA state may have multiple references to a particular state,
#  but with different ATN contexts (with same or different alts)
#  meaning that state was reached via a different set of rule invocations.</p>
#/
class DFAState(object):
    __slots__ = (
        'stateNumber', 'configs', 'edges', 'isAcceptState', 'prediction',
        'lexerActionExecutor', 'requiresFullContext', 'predicates'
    )

    def __init__(self, stateNumber:int=-1, configs:ATNConfigSet=ATNConfigSet()):
        self.stateNumber = stateNumber
        self.configs = configs
        # {@code edges[symbol]} points to target of symbol. Shift up by 1 so (-1)
        #  {@link Token#EOF} maps to {@code edges[0]}.
        self.edges = None
        self.isAcceptState = False
        # if accept state, what ttype do we match or alt do we predict?
        #  This is set to {@link ATN#INVALID_ALT_NUMBER} when {@link #predicates}{@code !=null} or
        #  {@link #requiresFullContext}.
        self.prediction = 0
        self.lexerActionExecutor = None
        # Indicates that this state was created during SLL prediction that
        # discovered a conflict between the configurations in the state. Future
        # {@link ParserATNSimulator#execATN} invocations immediately jumped doing
        # full context prediction if this field is true.
        self.requiresFullContext = False
        # During SLL parsing, this is a list of predicates associated with the
        #  ATN configurations of the DFA state. When we have predicates,
        #  {@link #requiresFullContext} is {@code false} since full context prediction evaluates predicates
        #  on-the-fly. If this is not null, then {@link #prediction} is
        #  {@link ATN#INVALID_ALT_NUMBER}.
        #
        #  <p>We only use these for non-{@link #requiresFullContext} but conflicting states. That
        #  means we know from the context (it's $ or we don't dip into outer
        #  context) that it's an ambiguity not a conflict.</p>
        #
        #  <p>This list is computed by {@link ParserATNSimulator#predicateDFAState}.</p>
        self.predicates = None



    # Get the set of all alts mentioned by all ATN configurations in this
    #  DFA state.
    def getAltSet(self):
        if self.configs is not None:
            return set(cfg.alt for cfg in self.configs) or None
        return None

    def __hash__(self):
        return hash(self.configs)

    # Two {@link DFAState} instances are equal if their ATN configuration sets
    # are the same. This method is used to see if a state already exists.
    #
    # <p>Because the number of alternatives and number of ATN configurations are
    # finite, there is a finite number of DFA states that can be processed.
    # This is necessary to show that the algorithm terminates.</p>
    #
    # <p>Cannot test the DFA state numbers here because in
    # {@link ParserATNSimulator#addDFAState} we need to know if any other state
    # exists that has this exact set of ATN configurations. The
    # {@link #stateNumber} is irrelevant.</p>
    def __eq__(self, other):
        # compare set of ATN configurations in this set with other
        if self is other:
            return True
        elif not isinstance(other, DFAState):
            return False
        else:
            return self.configs==other.configs

    def __str__(self):
        with StringIO() as buf:
            buf.write(str(self.stateNumber))
            buf.write(":")
            buf.write(str(self.configs))
            if self.isAcceptState:
                buf.write("=>")
                if self.predicates is not None:
                    buf.write(str(self.predicates))
                else:
                    buf.write(str(self.prediction))
            return buf.getvalue()


// File: venv\Lib\site-packages\antlr4\error\__init__.py
----------------------------------------
__author__ = 'ericvergnaud'


// File: venv\Lib\site-packages\antlr4\error\DiagnosticErrorListener.py
----------------------------------------
#
# Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
# Use of this file is governed by the BSD 3-clause license that
# can be found in the LICENSE.txt file in the project root.
#


#
# This implementation of {@link ANTLRErrorListener} can be used to identify
# certain potential correctness and performance problems in grammars. "Reports"
# are made by calling {@link Parser#notifyErrorListeners} with the appropriate
# message.
#
# <ul>
# <li><b>Ambiguities</b>: These are cases where more than one path through the
# grammar can match the input.</li>
# <li><b>Weak context sensitivity</b>: These are cases where full-context
# prediction resolved an SLL conflict to a unique alternative which equaled the
# minimum alternative of the SLL conflict.</li>
# <li><b>Strong (forced) context sensitivity</b>: These are cases where the
# full-context prediction resolved an SLL conflict to a unique alternative,
# <em>and</em> the minimum alternative of the SLL conflict was found to not be
# a truly viable alternative. Two-stage parsing cannot be used for inputs where
# this situation occurs.</li>
# </ul>

from io import StringIO
from antlr4 import Parser, DFA
from antlr4.atn.ATNConfigSet import ATNConfigSet
from antlr4.error.ErrorListener import ErrorListener

class DiagnosticErrorListener(ErrorListener):

    def __init__(self, exactOnly:bool=True):
        # whether all ambiguities or only exact ambiguities are reported.
        self.exactOnly = exactOnly

    def reportAmbiguity(self, recognizer:Parser, dfa:DFA, startIndex:int,
                       stopIndex:int, exact:bool, ambigAlts:set, configs:ATNConfigSet):
        if self.exactOnly and not exact:
            return

        with StringIO() as buf:
            buf.write("reportAmbiguity d=")
            buf.write(self.getDecisionDescription(recognizer, dfa))
            buf.write(": ambigAlts=")
            buf.write(str(self.getConflictingAlts(ambigAlts, configs)))
            buf.write(", input='")
            buf.write(recognizer.getTokenStream().getText(startIndex, stopIndex))
            buf.write("'")
            recognizer.notifyErrorListeners(buf.getvalue())


    def reportAttemptingFullContext(self, recognizer:Parser, dfa:DFA, startIndex:int,
                       stopIndex:int, conflictingAlts:set, configs:ATNConfigSet):
        with StringIO() as buf:
            buf.write("reportAttemptingFullContext d=")
            buf.write(self.getDecisionDescription(recognizer, dfa))
            buf.write(", input='")
            buf.write(recognizer.getTokenStream().getText(startIndex, stopIndex))
            buf.write("'")
            recognizer.notifyErrorListeners(buf.getvalue())

    def reportContextSensitivity(self, recognizer:Parser, dfa:DFA, startIndex:int,
                       stopIndex:int, prediction:int, configs:ATNConfigSet):
        with StringIO() as buf:
            buf.write("reportContextSensitivity d=")
            buf.write(self.getDecisionDescription(recognizer, dfa))
            buf.write(", input='")
            buf.write(recognizer.getTokenStream().getText(startIndex, stopIndex))
            buf.write("'")
            recognizer.notifyErrorListeners(buf.getvalue())

    def getDecisionDescription(self, recognizer:Parser, dfa:DFA):
        decision = dfa.decision
        ruleIndex = dfa.atnStartState.ruleIndex

        ruleNames = recognizer.ruleNames
        if ruleIndex < 0 or ruleIndex >= len(ruleNames):
            return str(decision)

        ruleName = ruleNames[ruleIndex]
        if ruleName is None or len(ruleName)==0:
            return str(decision)

        return str(decision) + " (" + ruleName + ")"

    #
    # Computes the set of conflicting or ambiguous alternatives from a
    # configuration set, if that information was not already provided by the
    # parser.
    #
    # @param reportedAlts The set of conflicting or ambiguous alternatives, as
    # reported by the parser.
    # @param configs The conflicting or ambiguous configuration set.
    # @return Returns {@code reportedAlts} if it is not {@code null}, otherwise
    # returns the set of alternatives represented in {@code configs}.
    #
    def getConflictingAlts(self, reportedAlts:set, configs:ATNConfigSet):
        if reportedAlts is not None:
            return reportedAlts

        result = set()
        for config in configs:
            result.add(config.alt)

        return result


// File: venv\Lib\site-packages\antlr4\error\ErrorListener.py
----------------------------------------
#
# Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
# Use of this file is governed by the BSD 3-clause license that
# can be found in the LICENSE.txt file in the project root.

# Provides an empty default implementation of {@link ANTLRErrorListener}. The
# default implementation of each method does nothing, but can be overridden as
# necessary.


import sys

class ErrorListener(object):

    def syntaxError(self, recognizer, offendingSymbol, line, column, msg, e):
        pass

    def reportAmbiguity(self, recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs):
        pass

    def reportAttemptingFullContext(self, recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs):
        pass

    def reportContextSensitivity(self, recognizer, dfa, startIndex, stopIndex, prediction, configs):
        pass

class ConsoleErrorListener(ErrorListener):
    #
    # Provides a default instance of {@link ConsoleErrorListener}.
    #
    INSTANCE = None

    #
    # {@inheritDoc}
    #
    # <p>
    # This implementation prints messages to {@link System#err} containing the
    # values of {@code line}, {@code charPositionInLine}, and {@code msg} using
    # the following format.</p>
    #
    # <pre>
    # line <em>line</em>:<em>charPositionInLine</em> <em>msg</em>
    # </pre>
    #
    def syntaxError(self, recognizer, offendingSymbol, line, column, msg, e):
        print("line " + str(line) + ":" + str(column) + " " + msg, file=sys.stderr)

ConsoleErrorListener.INSTANCE = ConsoleErrorListener()

class ProxyErrorListener(ErrorListener):

    def __init__(self, delegates):
        super().__init__()
        if delegates is None:
            raise ReferenceError("delegates")
        self.delegates = delegates

    def syntaxError(self, recognizer, offendingSymbol, line, column, msg, e):
        for delegate in self.delegates:
            delegate.syntaxError(recognizer, offendingSymbol, line, column, msg, e)

    def reportAmbiguity(self, recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs):
        for delegate in self.delegates:
            delegate.reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs)

    def reportAttemptingFullContext(self, recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs):
        for delegate in self.delegates:
            delegate.reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs)

    def reportContextSensitivity(self, recognizer, dfa, startIndex, stopIndex, prediction, configs):
        for delegate in self.delegates:
            delegate.reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs)


// File: venv\Lib\site-packages\antlr4\error\Errors.py
----------------------------------------
# Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
# Use of this file is governed by the BSD 3-clause license that
# can be found in the LICENSE.txt file in the project root.
#

# need forward declaration
Token = None
Lexer = None
Parser = None
TokenStream = None
ATNConfigSet = None
ParserRulecontext = None
PredicateTransition = None
BufferedTokenStream = None

class UnsupportedOperationException(Exception):

    def __init__(self, msg:str):
        super().__init__(msg)

class IllegalStateException(Exception):

    def __init__(self, msg:str):
        super().__init__(msg)

class CancellationException(IllegalStateException):

    def __init__(self, msg:str):
        super().__init__(msg)

# The root of the ANTLR exception hierarchy. In general, ANTLR tracks just
#  3 kinds of errors: prediction errors, failed predicate errors, and
#  mismatched input errors. In each case, the parser knows where it is
#  in the input, where it is in the ATN, the rule invocation stack,
#  and what kind of problem occurred.

from antlr4.InputStream import InputStream
from antlr4.ParserRuleContext import ParserRuleContext
from antlr4.Recognizer import Recognizer

class RecognitionException(Exception):


    def __init__(self, message:str=None, recognizer:Recognizer=None, input:InputStream=None, ctx:ParserRulecontext=None):
        super().__init__(message)
        self.message = message
        self.recognizer = recognizer
        self.input = input
        self.ctx = ctx
        # The current {@link Token} when an error occurred. Since not all streams
        # support accessing symbols by index, we have to track the {@link Token}
        # instance itself.
        self.offendingToken = None
        # Get the ATN state number the parser was in at the time the error
        # occurred. For {@link NoViableAltException} and
        # {@link LexerNoViableAltException} exceptions, this is the
        # {@link DecisionState} number. For others, it is the state whose outgoing
        # edge we couldn't match.
        self.offendingState = -1
        if recognizer is not None:
            self.offendingState = recognizer.state

    # <p>If the state number is not known, this method returns -1.</p>

    #
    # Gets the set of input symbols which could potentially follow the
    # previously matched symbol at the time this exception was thrown.
    #
    # <p>If the set of expected tokens is not known and could not be computed,
    # this method returns {@code null}.</p>
    #
    # @return The set of token types that could potentially follow the current
    # state in the ATN, or {@code null} if the information is not available.
    #/
    def getExpectedTokens(self):
        if self.recognizer is not None:
            return self.recognizer.atn.getExpectedTokens(self.offendingState, self.ctx)
        else:
            return None


class LexerNoViableAltException(RecognitionException):

    def __init__(self, lexer:Lexer, input:InputStream, startIndex:int, deadEndConfigs:ATNConfigSet):
        super().__init__(message=None, recognizer=lexer, input=input, ctx=None)
        self.startIndex = startIndex
        self.deadEndConfigs = deadEndConfigs

    def __str__(self):
        symbol = ""
        if self.startIndex >= 0 and self.startIndex < self.input.size:
            symbol = self.input.getText(self.startIndex, self.startIndex)
            # TODO symbol = Utils.escapeWhitespace(symbol, false);
        return "LexerNoViableAltException('" + symbol + "')"

# Indicates that the parser could not decide which of two or more paths
#  to take based upon the remaining input. It tracks the starting token
#  of the offending input and also knows where the parser was
#  in the various paths when the error. Reported by reportNoViableAlternative()
#
class NoViableAltException(RecognitionException):

    def __init__(self, recognizer:Parser, input:TokenStream=None, startToken:Token=None,
                    offendingToken:Token=None, deadEndConfigs:ATNConfigSet=None, ctx:ParserRuleContext=None):
        if ctx is None:
            ctx = recognizer._ctx
        if offendingToken is None:
            offendingToken = recognizer.getCurrentToken()
        if startToken is None:
            startToken = recognizer.getCurrentToken()
        if input is None:
            input = recognizer.getInputStream()
        super().__init__(recognizer=recognizer, input=input, ctx=ctx)
        # Which configurations did we try at input.index() that couldn't match input.LT(1)?#
        self.deadEndConfigs = deadEndConfigs
        # The token object at the start index; the input stream might
        # 	not be buffering tokens so get a reference to it. (At the
        #  time the error occurred, of course the stream needs to keep a
        #  buffer all of the tokens but later we might not have access to those.)
        self.startToken = startToken
        self.offendingToken = offendingToken

# This signifies any kind of mismatched input exceptions such as
#  when the current input does not match the expected token.
#
class InputMismatchException(RecognitionException):

    def __init__(self, recognizer:Parser):
        super().__init__(recognizer=recognizer, input=recognizer.getInputStream(), ctx=recognizer._ctx)
        self.offendingToken = recognizer.getCurrentToken()


# A semantic predicate failed during validation.  Validation of predicates
#  occurs when normally parsing the alternative just like matching a token.
#  Disambiguating predicate evaluation occurs when we test a predicate during
#  prediction.

class FailedPredicateException(RecognitionException):

    def __init__(self, recognizer:Parser, predicate:str=None, message:str=None):
        super().__init__(message=self.formatMessage(predicate,message), recognizer=recognizer,
                         input=recognizer.getInputStream(), ctx=recognizer._ctx)
        s = recognizer._interp.atn.states[recognizer.state]
        trans = s.transitions[0]
        from antlr4.atn.Transition import PredicateTransition
        if isinstance(trans, PredicateTransition):
            self.ruleIndex = trans.ruleIndex
            self.predicateIndex = trans.predIndex
        else:
            self.ruleIndex = 0
            self.predicateIndex = 0
        self.predicate = predicate
        self.offendingToken = recognizer.getCurrentToken()

    def formatMessage(self, predicate:str, message:str):
        if message is not None:
            return message
        else:
            return "failed predicate: {" + predicate + "}?"

class ParseCancellationException(CancellationException):

    pass

del Token
del Lexer
del Parser
del TokenStream
del ATNConfigSet
del ParserRulecontext
del PredicateTransition
del BufferedTokenStream


// File: venv\Lib\site-packages\antlr4\error\ErrorStrategy.py
----------------------------------------
#
# Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
# Use of this file is governed by the BSD 3-clause license that
# can be found in the LICENSE.txt file in the project root.
#
import sys
from antlr4.IntervalSet import IntervalSet

from antlr4.Token import Token
from antlr4.atn.ATNState import ATNState
from antlr4.error.Errors import RecognitionException, NoViableAltException, InputMismatchException, \
    FailedPredicateException, ParseCancellationException

# need forward declaration
Parser = None

class ErrorStrategy(object):

    def reset(self, recognizer:Parser):
        pass

    def recoverInline(self, recognizer:Parser):
        pass

    def recover(self, recognizer:Parser, e:RecognitionException):
        pass

    def sync(self, recognizer:Parser):
        pass

    def inErrorRecoveryMode(self, recognizer:Parser):
        pass

    def reportError(self, recognizer:Parser, e:RecognitionException):
        pass


# This is the default implementation of {@link ANTLRErrorStrategy} used for
# error reporting and recovery in ANTLR parsers.
#
class DefaultErrorStrategy(ErrorStrategy):

    def __init__(self):
        super().__init__()
        # Indicates whether the error strategy is currently "recovering from an
        # error". This is used to suppress reporting multiple error messages while
        # attempting to recover from a detected syntax error.
        #
        # @see #inErrorRecoveryMode
        #
        self.errorRecoveryMode = False

        # The index into the input stream where the last error occurred.
        # 	This is used to prevent infinite loops where an error is found
        #  but no token is consumed during recovery...another error is found,
        #  ad nauseum.  This is a failsafe mechanism to guarantee that at least
        #  one token/tree node is consumed for two errors.
        #
        self.lastErrorIndex = -1
        self.lastErrorStates = None
        self.nextTokensContext = None
        self.nextTokenState = 0

    # <p>The default implementation simply calls {@link #endErrorCondition} to
    # ensure that the handler is not in error recovery mode.</p>
    def reset(self, recognizer:Parser):
        self.endErrorCondition(recognizer)

    #
    # This method is called to enter error recovery mode when a recognition
    # exception is reported.
    #
    # @param recognizer the parser instance
    #
    def beginErrorCondition(self, recognizer:Parser):
        self.errorRecoveryMode = True

    def inErrorRecoveryMode(self, recognizer:Parser):
        return self.errorRecoveryMode

    #
    # This method is called to leave error recovery mode after recovering from
    # a recognition exception.
    #
    # @param recognizer
    #
    def endErrorCondition(self, recognizer:Parser):
        self.errorRecoveryMode = False
        self.lastErrorStates = None
        self.lastErrorIndex = -1

    #
    # {@inheritDoc}
    #
    # <p>The default implementation simply calls {@link #endErrorCondition}.</p>
    #
    def reportMatch(self, recognizer:Parser):
        self.endErrorCondition(recognizer)

    #
    # {@inheritDoc}
    #
    # <p>The default implementation returns immediately if the handler is already
    # in error recovery mode. Otherwise, it calls {@link #beginErrorCondition}
    # and dispatches the reporting task based on the runtime type of {@code e}
    # according to the following table.</p>
    #
    # <ul>
    # <li>{@link NoViableAltException}: Dispatches the call to
    # {@link #reportNoViableAlternative}</li>
    # <li>{@link InputMismatchException}: Dispatches the call to
    # {@link #reportInputMismatch}</li>
    # <li>{@link FailedPredicateException}: Dispatches the call to
    # {@link #reportFailedPredicate}</li>
    # <li>All other types: calls {@link Parser#notifyErrorListeners} to report
    # the exception</li>
    # </ul>
    #
    def reportError(self, recognizer:Parser, e:RecognitionException):
       # if we've already reported an error and have not matched a token
       # yet successfully, don't report any errors.
        if self.inErrorRecoveryMode(recognizer):
            return # don't report spurious errors
        self.beginErrorCondition(recognizer)
        if isinstance( e, NoViableAltException ):
            self.reportNoViableAlternative(recognizer, e)
        elif isinstance( e, InputMismatchException ):
            self.reportInputMismatch(recognizer, e)
        elif isinstance( e, FailedPredicateException ):
            self.reportFailedPredicate(recognizer, e)
        else:
            print("unknown recognition error type: " + type(e).__name__)
            recognizer.notifyErrorListeners(e.message, e.offendingToken, e)

    #
    # {@inheritDoc}
    #
    # <p>The default implementation resynchronizes the parser by consuming tokens
    # until we find one in the resynchronization set--loosely the set of tokens
    # that can follow the current rule.</p>
    #
    def recover(self, recognizer:Parser, e:RecognitionException):
        if self.lastErrorIndex==recognizer.getInputStream().index \
            and self.lastErrorStates is not None \
            and recognizer.state in self.lastErrorStates:
           # uh oh, another error at same token index and previously-visited
           # state in ATN; must be a case where LT(1) is in the recovery
           # token set so nothing got consumed. Consume a single token
           # at least to prevent an infinite loop; this is a failsafe.
            recognizer.consume()

        self.lastErrorIndex = recognizer._input.index
        if self.lastErrorStates is None:
            self.lastErrorStates = []
        self.lastErrorStates.append(recognizer.state)
        followSet = self.getErrorRecoverySet(recognizer)
        self.consumeUntil(recognizer, followSet)

    # The default implementation of {@link ANTLRErrorStrategy#sync} makes sure
    # that the current lookahead symbol is consistent with what were expecting
    # at this point in the ATN. You can call this anytime but ANTLR only
    # generates code to check before subrules/loops and each iteration.
    #
    # <p>Implements Jim Idle's magic sync mechanism in closures and optional
    # subrules. E.g.,</p>
    #
    # <pre>
    # a : sync ( stuff sync )* ;
    # sync : {consume to what can follow sync} ;
    # </pre>
    #
    # At the start of a sub rule upon error, {@link #sync} performs single
    # token deletion, if possible. If it can't do that, it bails on the current
    # rule and uses the default error recovery, which consumes until the
    # resynchronization set of the current rule.
    #
    # <p>If the sub rule is optional ({@code (...)?}, {@code (...)*}, or block
    # with an empty alternative), then the expected set includes what follows
    # the subrule.</p>
    #
    # <p>During loop iteration, it consumes until it sees a token that can start a
    # sub rule or what follows loop. Yes, that is pretty aggressive. We opt to
    # stay in the loop as long as possible.</p>
    #
    # <p><strong>ORIGINS</strong></p>
    #
    # <p>Previous versions of ANTLR did a poor job of their recovery within loops.
    # A single mismatch token or missing token would force the parser to bail
    # out of the entire rules surrounding the loop. So, for rule</p>
    #
    # <pre>
    # classDef : 'class' ID '{' member* '}'
    # </pre>
    #
    # input with an extra token between members would force the parser to
    # consume until it found the next class definition rather than the next
    # member definition of the current class.
    #
    # <p>This functionality cost a little bit of effort because the parser has to
    # compare token set at the start of the loop and at each iteration. If for
    # some reason speed is suffering for you, you can turn off this
    # functionality by simply overriding this method as a blank { }.</p>
    #
    def sync(self, recognizer:Parser):
        # If already recovering, don't try to sync
        if self.inErrorRecoveryMode(recognizer):
            return

        s = recognizer._interp.atn.states[recognizer.state]
        la = recognizer.getTokenStream().LA(1)
        # try cheaper subset first; might get lucky. seems to shave a wee bit off
        nextTokens = recognizer.atn.nextTokens(s)
        if la in nextTokens:
            self.nextTokensContext = None
            self.nextTokenState = ATNState.INVALID_STATE_NUMBER
            return
        elif Token.EPSILON in nextTokens:
            if self.nextTokensContext is None:
                # It's possible the next token won't match information tracked
                # by sync is restricted for performance.
                self.nextTokensContext = recognizer._ctx
                self.nextTokensState = recognizer._stateNumber
            return

        if s.stateType in [ATNState.BLOCK_START, ATNState.STAR_BLOCK_START,
                                ATNState.PLUS_BLOCK_START, ATNState.STAR_LOOP_ENTRY]:
           # report error and recover if possible
            if self.singleTokenDeletion(recognizer)is not None:
                return
            else:
                raise InputMismatchException(recognizer)

        elif s.stateType in [ATNState.PLUS_LOOP_BACK, ATNState.STAR_LOOP_BACK]:
            self.reportUnwantedToken(recognizer)
            expecting = recognizer.getExpectedTokens()
            whatFollowsLoopIterationOrRule = expecting.addSet(self.getErrorRecoverySet(recognizer))
            self.consumeUntil(recognizer, whatFollowsLoopIterationOrRule)

        else:
           # do nothing if we can't identify the exact kind of ATN state
           pass

    # This is called by {@link #reportError} when the exception is a
    # {@link NoViableAltException}.
    #
    # @see #reportError
    #
    # @param recognizer the parser instance
    # @param e the recognition exception
    #
    def reportNoViableAlternative(self, recognizer:Parser, e:NoViableAltException):
        tokens = recognizer.getTokenStream()
        if tokens is not None:
            if e.startToken.type==Token.EOF:
                input = "<EOF>"
            else:
                input = tokens.getText(e.startToken, e.offendingToken)
        else:
            input = "<unknown input>"
        msg = "no viable alternative at input " + self.escapeWSAndQuote(input)
        recognizer.notifyErrorListeners(msg, e.offendingToken, e)

    #
    # This is called by {@link #reportError} when the exception is an
    # {@link InputMismatchException}.
    #
    # @see #reportError
    #
    # @param recognizer the parser instance
    # @param e the recognition exception
    #
    def reportInputMismatch(self, recognizer:Parser, e:InputMismatchException):
        msg = "mismatched input " + self.getTokenErrorDisplay(e.offendingToken) \
              + " expecting " + e.getExpectedTokens().toString(recognizer.literalNames, recognizer.symbolicNames)
        recognizer.notifyErrorListeners(msg, e.offendingToken, e)

    #
    # This is called by {@link #reportError} when the exception is a
    # {@link FailedPredicateException}.
    #
    # @see #reportError
    #
    # @param recognizer the parser instance
    # @param e the recognition exception
    #
    def reportFailedPredicate(self, recognizer, e):
        ruleName = recognizer.ruleNames[recognizer._ctx.getRuleIndex()]
        msg = "rule " + ruleName + " " + e.message
        recognizer.notifyErrorListeners(msg, e.offendingToken, e)

    # This method is called to report a syntax error which requires the removal
    # of a token from the input stream. At the time this method is called, the
    # erroneous symbol is current {@code LT(1)} symbol and has not yet been
    # removed from the input stream. When this method returns,
    # {@code recognizer} is in error recovery mode.
    #
    # <p>This method is called when {@link #singleTokenDeletion} identifies
    # single-token deletion as a viable recovery strategy for a mismatched
    # input error.</p>
    #
    # <p>The default implementation simply returns if the handler is already in
    # error recovery mode. Otherwise, it calls {@link #beginErrorCondition} to
    # enter error recovery mode, followed by calling
    # {@link Parser#notifyErrorListeners}.</p>
    #
    # @param recognizer the parser instance
    #
    def reportUnwantedToken(self, recognizer:Parser):
        if self.inErrorRecoveryMode(recognizer):
            return

        self.beginErrorCondition(recognizer)
        t = recognizer.getCurrentToken()
        tokenName = self.getTokenErrorDisplay(t)
        expecting = self.getExpectedTokens(recognizer)
        msg = "extraneous input " + tokenName + " expecting " \
            + expecting.toString(recognizer.literalNames, recognizer.symbolicNames)
        recognizer.notifyErrorListeners(msg, t, None)

    # This method is called to report a syntax error which requires the
    # insertion of a missing token into the input stream. At the time this
    # method is called, the missing token has not yet been inserted. When this
    # method returns, {@code recognizer} is in error recovery mode.
    #
    # <p>This method is called when {@link #singleTokenInsertion} identifies
    # single-token insertion as a viable recovery strategy for a mismatched
    # input error.</p>
    #
    # <p>The default implementation simply returns if the handler is already in
    # error recovery mode. Otherwise, it calls {@link #beginErrorCondition} to
    # enter error recovery mode, followed by calling
    # {@link Parser#notifyErrorListeners}.</p>
    #
    # @param recognizer the parser instance
    #
    def reportMissingToken(self, recognizer:Parser):
        if self.inErrorRecoveryMode(recognizer):
            return
        self.beginErrorCondition(recognizer)
        t = recognizer.getCurrentToken()
        expecting = self.getExpectedTokens(recognizer)
        msg = "missing " + expecting.toString(recognizer.literalNames, recognizer.symbolicNames) \
              + " at " + self.getTokenErrorDisplay(t)
        recognizer.notifyErrorListeners(msg, t, None)

    # <p>The default implementation attempts to recover from the mismatched input
    # by using single token insertion and deletion as described below. If the
    # recovery attempt fails, this method throws an
    # {@link InputMismatchException}.</p>
    #
    # <p><strong>EXTRA TOKEN</strong> (single token deletion)</p>
    #
    # <p>{@code LA(1)} is not what we are looking for. If {@code LA(2)} has the
    # right token, however, then assume {@code LA(1)} is some extra spurious
    # token and delete it. Then consume and return the next token (which was
    # the {@code LA(2)} token) as the successful result of the match operation.</p>
    #
    # <p>This recovery strategy is implemented by {@link #singleTokenDeletion}.</p>
    #
    # <p><strong>MISSING TOKEN</strong> (single token insertion)</p>
    #
    # <p>If current token (at {@code LA(1)}) is consistent with what could come
    # after the expected {@code LA(1)} token, then assume the token is missing
    # and use the parser's {@link TokenFactory} to create it on the fly. The
    # "insertion" is performed by returning the created token as the successful
    # result of the match operation.</p>
    #
    # <p>This recovery strategy is implemented by {@link #singleTokenInsertion}.</p>
    #
    # <p><strong>EXAMPLE</strong></p>
    #
    # <p>For example, Input {@code i=(3;} is clearly missing the {@code ')'}. When
    # the parser returns from the nested call to {@code expr}, it will have
    # call chain:</p>
    #
    # <pre>
    # stat &rarr; expr &rarr; atom
    # </pre>
    #
    # and it will be trying to match the {@code ')'} at this point in the
    # derivation:
    #
    # <pre>
    # =&gt; ID '=' '(' INT ')' ('+' atom)* ';'
    #                    ^
    # </pre>
    #
    # The attempt to match {@code ')'} will fail when it sees {@code ';'} and
    # call {@link #recoverInline}. To recover, it sees that {@code LA(1)==';'}
    # is in the set of tokens that can follow the {@code ')'} token reference
    # in rule {@code atom}. It can assume that you forgot the {@code ')'}.
    #
    def recoverInline(self, recognizer:Parser):
        # SINGLE TOKEN DELETION
        matchedSymbol = self.singleTokenDeletion(recognizer)
        if matchedSymbol is not None:
            # we have deleted the extra token.
            # now, move past ttype token as if all were ok
            recognizer.consume()
            return matchedSymbol

        # SINGLE TOKEN INSERTION
        if self.singleTokenInsertion(recognizer):
            return self.getMissingSymbol(recognizer)

        # even that didn't work; must throw the exception
        raise InputMismatchException(recognizer)

    #
    # This method implements the single-token insertion inline error recovery
    # strategy. It is called by {@link #recoverInline} if the single-token
    # deletion strategy fails to recover from the mismatched input. If this
    # method returns {@code true}, {@code recognizer} will be in error recovery
    # mode.
    #
    # <p>This method determines whether or not single-token insertion is viable by
    # checking if the {@code LA(1)} input symbol could be successfully matched
    # if it were instead the {@code LA(2)} symbol. If this method returns
    # {@code true}, the caller is responsible for creating and inserting a
    # token with the correct type to produce this behavior.</p>
    #
    # @param recognizer the parser instance
    # @return {@code true} if single-token insertion is a viable recovery
    # strategy for the current mismatched input, otherwise {@code false}
    #
    def singleTokenInsertion(self, recognizer:Parser):
        currentSymbolType = recognizer.getTokenStream().LA(1)
        # if current token is consistent with what could come after current
        # ATN state, then we know we're missing a token; error recovery
        # is free to conjure up and insert the missing token
        atn = recognizer._interp.atn
        currentState = atn.states[recognizer.state]
        next = currentState.transitions[0].target
        expectingAtLL2 = atn.nextTokens(next, recognizer._ctx)
        if currentSymbolType in expectingAtLL2:
            self.reportMissingToken(recognizer)
            return True
        else:
            return False

    # This method implements the single-token deletion inline error recovery
    # strategy. It is called by {@link #recoverInline} to attempt to recover
    # from mismatched input. If this method returns null, the parser and error
    # handler state will not have changed. If this method returns non-null,
    # {@code recognizer} will <em>not</em> be in error recovery mode since the
    # returned token was a successful match.
    #
    # <p>If the single-token deletion is successful, this method calls
    # {@link #reportUnwantedToken} to report the error, followed by
    # {@link Parser#consume} to actually "delete" the extraneous token. Then,
    # before returning {@link #reportMatch} is called to signal a successful
    # match.</p>
    #
    # @param recognizer the parser instance
    # @return the successfully matched {@link Token} instance if single-token
    # deletion successfully recovers from the mismatched input, otherwise
    # {@code null}
    #
    def singleTokenDeletion(self, recognizer:Parser):
        nextTokenType = recognizer.getTokenStream().LA(2)
        expecting = self.getExpectedTokens(recognizer)
        if nextTokenType in expecting:
            self.reportUnwantedToken(recognizer)
            # print("recoverFromMismatchedToken deleting " \
            #     + str(recognizer.getTokenStream().LT(1)) \
            #     + " since " + str(recognizer.getTokenStream().LT(2)) \
            #     + " is what we want", file=sys.stderr)
            recognizer.consume() # simply delete extra token
            # we want to return the token we're actually matching
            matchedSymbol = recognizer.getCurrentToken()
            self.reportMatch(recognizer) # we know current token is correct
            return matchedSymbol
        else:
            return None

    # Conjure up a missing token during error recovery.
    #
    #  The recognizer attempts to recover from single missing
    #  symbols. But, actions might refer to that missing symbol.
    #  For example, x=ID {f($x);}. The action clearly assumes
    #  that there has been an identifier matched previously and that
    #  $x points at that token. If that token is missing, but
    #  the next token in the stream is what we want we assume that
    #  this token is missing and we keep going. Because we
    #  have to return some token to replace the missing token,
    #  we have to conjure one up. This method gives the user control
    #  over the tokens returned for missing tokens. Mostly,
    #  you will want to create something special for identifier
    #  tokens. For literals such as '{' and ',', the default
    #  action in the parser or tree parser works. It simply creates
    #  a CommonToken of the appropriate type. The text will be the token.
    #  If you change what tokens must be created by the lexer,
    #  override this method to create the appropriate tokens.
    #
    def getMissingSymbol(self, recognizer:Parser):
        currentSymbol = recognizer.getCurrentToken()
        expecting = self.getExpectedTokens(recognizer)
        expectedTokenType = expecting[0] # get any element
        if expectedTokenType==Token.EOF:
            tokenText = "<missing EOF>"
        else:
            name = None
            if expectedTokenType < len(recognizer.literalNames):
                name = recognizer.literalNames[expectedTokenType]
            if name is None and expectedTokenType < len(recognizer.symbolicNames):
                name = recognizer.symbolicNames[expectedTokenType]
            tokenText = "<missing " + str(name) + ">"
        current = currentSymbol
        lookback = recognizer.getTokenStream().LT(-1)
        if current.type==Token.EOF and lookback is not None:
            current = lookback
        return recognizer.getTokenFactory().create(current.source,
            expectedTokenType, tokenText, Token.DEFAULT_CHANNEL,
            -1, -1, current.line, current.column)

    def getExpectedTokens(self, recognizer:Parser):
        return recognizer.getExpectedTokens()

    # How should a token be displayed in an error message? The default
    #  is to display just the text, but during development you might
    #  want to have a lot of information spit out.  Override in that case
    #  to use t.toString() (which, for CommonToken, dumps everything about
    #  the token). This is better than forcing you to override a method in
    #  your token objects because you don't have to go modify your lexer
    #  so that it creates a new Java type.
    #
    def getTokenErrorDisplay(self, t:Token):
        if t is None:
            return "<no token>"
        s = t.text
        if s is None:
            if t.type==Token.EOF:
                s = "<EOF>"
            else:
                s = "<" + str(t.type) + ">"
        return self.escapeWSAndQuote(s)

    def escapeWSAndQuote(self, s:str):
        s = s.replace("\n","\\n")
        s = s.replace("\r","\\r")
        s = s.replace("\t","\\t")
        return "'" + s + "'"

    #  Compute the error recovery set for the current rule.  During
    #  rule invocation, the parser pushes the set of tokens that can
    #  follow that rule reference on the stack; this amounts to
    #  computing FIRST of what follows the rule reference in the
    #  enclosing rule. See LinearApproximator.FIRST().
    #  This local follow set only includes tokens
    #  from within the rule; i.e., the FIRST computation done by
    #  ANTLR stops at the end of a rule.
    #
    #  EXAMPLE
    #
    #  When you find a "no viable alt exception", the input is not
    #  consistent with any of the alternatives for rule r.  The best
    #  thing to do is to consume tokens until you see something that
    #  can legally follow a call to r#or* any rule that called r.
    #  You don't want the exact set of viable next tokens because the
    #  input might just be missing a token--you might consume the
    #  rest of the input looking for one of the missing tokens.
    #
    #  Consider grammar:
    #
    #  a : '[' b ']'
    #    | '(' b ')'
    #    ;
    #  b : c '^' INT ;
    #  c : ID
    #    | INT
    #    ;
    #
    #  At each rule invocation, the set of tokens that could follow
    #  that rule is pushed on a stack.  Here are the various
    #  context-sensitive follow sets:
    #
    #  FOLLOW(b1_in_a) = FIRST(']') = ']'
    #  FOLLOW(b2_in_a) = FIRST(')') = ')'
    #  FOLLOW(c_in_b) = FIRST('^') = '^'
    #
    #  Upon erroneous input "[]", the call chain is
    #
    #  a -> b -> c
    #
    #  and, hence, the follow context stack is:
    #
    #  depth     follow set       start of rule execution
    #    0         <EOF>                    a (from main())
    #    1          ']'                     b
    #    2          '^'                     c
    #
    #  Notice that ')' is not included, because b would have to have
    #  been called from a different context in rule a for ')' to be
    #  included.
    #
    #  For error recovery, we cannot consider FOLLOW(c)
    #  (context-sensitive or otherwise).  We need the combined set of
    #  all context-sensitive FOLLOW sets--the set of all tokens that
    #  could follow any reference in the call chain.  We need to
    #  resync to one of those tokens.  Note that FOLLOW(c)='^' and if
    #  we resync'd to that token, we'd consume until EOF.  We need to
    #  sync to context-sensitive FOLLOWs for a, b, and c: {']','^'}.
    #  In this case, for input "[]", LA(1) is ']' and in the set, so we would
    #  not consume anything. After printing an error, rule c would
    #  return normally.  Rule b would not find the required '^' though.
    #  At this point, it gets a mismatched token error and throws an
    #  exception (since LA(1) is not in the viable following token
    #  set).  The rule exception handler tries to recover, but finds
    #  the same recovery set and doesn't consume anything.  Rule b
    #  exits normally returning to rule a.  Now it finds the ']' (and
    #  with the successful match exits errorRecovery mode).
    #
    #  So, you can see that the parser walks up the call chain looking
    #  for the token that was a member of the recovery set.
    #
    #  Errors are not generated in errorRecovery mode.
    #
    #  ANTLR's error recovery mechanism is based upon original ideas:
    #
    #  "Algorithms + Data Structures = Programs" by Niklaus Wirth
    #
    #  and
    #
    #  "A note on error recovery in recursive descent parsers":
    #  http:#portal.acm.org/citation.cfm?id=947902.947905
    #
    #  Later, Josef Grosch had some good ideas:
    #
    #  "Efficient and Comfortable Error Recovery in Recursive Descent
    #  Parsers":
    #  ftp:#www.cocolab.com/products/cocktail/doca4.ps/ell.ps.zip
    #
    #  Like Grosch I implement context-sensitive FOLLOW sets that are combined
    #  at run-time upon error to avoid overhead during parsing.
    #
    def getErrorRecoverySet(self, recognizer:Parser):
        atn = recognizer._interp.atn
        ctx = recognizer._ctx
        recoverSet = IntervalSet()
        while ctx is not None and ctx.invokingState>=0:
            # compute what follows who invoked us
            invokingState = atn.states[ctx.invokingState]
            rt = invokingState.transitions[0]
            follow = atn.nextTokens(rt.followState)
            recoverSet.addSet(follow)
            ctx = ctx.parentCtx
        recoverSet.removeOne(Token.EPSILON)
        return recoverSet

    # Consume tokens until one matches the given token set.#
    def consumeUntil(self, recognizer:Parser, set_:set):
        ttype = recognizer.getTokenStream().LA(1)
        while ttype != Token.EOF and not ttype in set_:
            recognizer.consume()
            ttype = recognizer.getTokenStream().LA(1)


#
# This implementation of {@link ANTLRErrorStrategy} responds to syntax errors
# by immediately canceling the parse operation with a
# {@link ParseCancellationException}. The implementation ensures that the
# {@link ParserRuleContext#exception} field is set for all parse tree nodes
# that were not completed prior to encountering the error.
#
# <p>
# This error strategy is useful in the following scenarios.</p>
#
# <ul>
# <li><strong>Two-stage parsing:</strong> This error strategy allows the first
# stage of two-stage parsing to immediately terminate if an error is
# encountered, and immediately fall back to the second stage. In addition to
# avoiding wasted work by attempting to recover from errors here, the empty
# implementation of {@link BailErrorStrategy#sync} improves the performance of
# the first stage.</li>
# <li><strong>Silent validation:</strong> When syntax errors are not being
# reported or logged, and the parse result is simply ignored if errors occur,
# the {@link BailErrorStrategy} avoids wasting work on recovering from errors
# when the result will be ignored either way.</li>
# </ul>
#
# <p>
# {@code myparser.setErrorHandler(new BailErrorStrategy());}</p>
#
# @see Parser#setErrorHandler(ANTLRErrorStrategy)
#
class BailErrorStrategy(DefaultErrorStrategy):
    # Instead of recovering from exception {@code e}, re-throw it wrapped
    #  in a {@link ParseCancellationException} so it is not caught by the
    #  rule function catches.  Use {@link Exception#getCause()} to get the
    #  original {@link RecognitionException}.
    #
    def recover(self, recognizer:Parser, e:RecognitionException):
        context = recognizer._ctx
        while context is not None:
            context.exception = e
            context = context.parentCtx
        raise ParseCancellationException(e)

    # Make sure we don't attempt to recover inline; if the parser
    #  successfully recovers, it won't throw an exception.
    #
    def recoverInline(self, recognizer:Parser):
        self.recover(recognizer, InputMismatchException(recognizer))

    # Make sure we don't attempt to recover from problems in subrules.#
    def sync(self, recognizer:Parser):
        pass

del Parser

// File: venv\Lib\site-packages\antlr4\FileStream.py
----------------------------------------
#
# Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
# Use of this file is governed by the BSD 3-clause license that
# can be found in the LICENSE.txt file in the project root.
#

#
#  This is an InputStream that is loaded from a file all at once
#  when you construct the object.
#

import codecs
from antlr4.InputStream import InputStream


class FileStream(InputStream):
    __slots__ = 'fileName'

    def __init__(self, fileName:str, encoding:str='ascii', errors:str='strict'):
        super().__init__(self.readDataFrom(fileName, encoding, errors))
        self.fileName = fileName

    def readDataFrom(self, fileName:str, encoding:str, errors:str='strict'):
        # read binary to avoid line ending conversion
        with open(fileName, 'rb') as file:
            bytes = file.read()
            return codecs.decode(bytes, encoding, errors)


// File: venv\Lib\site-packages\antlr4\InputStream.py
----------------------------------------
#
# Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
# Use of this file is governed by the BSD 3-clause license that
# can be found in the LICENSE.txt file in the project root.
#


#
#  Vacuum all input from a string and then treat it like a buffer.
#
from antlr4.Token import Token


class InputStream (object):
    __slots__ = ('name', 'strdata', '_index', 'data', '_size')

    def __init__(self, data: str):
        self.name = "<empty>"
        self.strdata = data
        self._loadString()

    def _loadString(self):
        self._index = 0
        self.data = [ord(c) for c in self.strdata]
        self._size = len(self.data)

    @property
    def index(self):
        return self._index

    @property
    def size(self):
        return self._size

    # Reset the stream so that it's in the same state it was
    #  when the object was created *except* the data array is not
    #  touched.
    #
    def reset(self):
        self._index = 0

    def consume(self):
        if self._index >= self._size:
            assert self.LA(1) == Token.EOF
            raise Exception("cannot consume EOF")
        self._index += 1

    def LA(self, offset: int):
        if offset==0:
            return 0 # undefined
        if offset<0:
            offset += 1 # e.g., translate LA(-1) to use offset=0
        pos = self._index + offset - 1
        if pos < 0 or pos >= self._size: # invalid
            return Token.EOF
        return self.data[pos]

    def LT(self, offset: int):
        return self.LA(offset)

    # mark/release do nothing; we have entire buffer
    def mark(self):
        return -1

    def release(self, marker: int):
        pass

    # consume() ahead until p==_index; can't just set p=_index as we must
    # update line and column. If we seek backwards, just set p
    #
    def seek(self, _index: int):
        if _index<=self._index:
            self._index = _index # just jump; don't update stream state (line, ...)
            return
        # seek forward
        self._index = min(_index, self._size)

    def getText(self, start :int, stop: int):
        if stop >= self._size:
            stop = self._size-1
        if start >= self._size:
            return ""
        else:
            return self.strdata[start:stop+1]

    def __str__(self):
        return self.strdata


// File: venv\Lib\site-packages\antlr4\IntervalSet.py
----------------------------------------
#
# Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
# Use of this file is governed by the BSD 3-clause license that
# can be found in the LICENSE.txt file in the project root.
#

from io import StringIO
from antlr4.Token import Token

# need forward declarations
IntervalSet = None

class IntervalSet(object):
    __slots__ = ('intervals', 'readonly')

    def __init__(self):
        self.intervals = None
        self.readonly = False

    def __iter__(self):
        if self.intervals is not None:
            for i in self.intervals:
                for c in i:
                    yield c

    def __getitem__(self, item):
        i = 0
        for k in self:
            if i==item:
                return k
            else:
                i += 1
        return Token.INVALID_TYPE

    def addOne(self, v:int):
        self.addRange(range(v, v+1))

    def addRange(self, v:range):
        if self.intervals is None:
            self.intervals = list()
            self.intervals.append(v)
        else:
            # find insert pos
            k = 0
            for i in self.intervals:
                # distinct range -> insert
                if v.stop<i.start:
                    self.intervals.insert(k, v)
                    return
                # contiguous range -> adjust
                elif v.stop==i.start:
                    self.intervals[k] = range(v.start, i.stop)
                    return
                # overlapping range -> adjust and reduce
                elif v.start<=i.stop:
                    self.intervals[k] = range(min(i.start,v.start), max(i.stop,v.stop))
                    self.reduce(k)
                    return
                k += 1
            # greater than any existing
            self.intervals.append(v)

    def addSet(self, other:IntervalSet):
        if other.intervals is not None:
            for i in other.intervals:
                self.addRange(i)
        return self

    def reduce(self, k:int):
        # only need to reduce if k is not the last
        if k<len(self.intervals)-1:
            l = self.intervals[k]
            r = self.intervals[k+1]
            # if r contained in l
            if l.stop >= r.stop:
                self.intervals.pop(k+1)
                self.reduce(k)
            elif l.stop >= r.start:
                self.intervals[k] = range(l.start, r.stop)
                self.intervals.pop(k+1)

    def complement(self, start, stop):
        result = IntervalSet()
        result.addRange(range(start,stop+1))
        for i in self.intervals:
            result.removeRange(i)
        return result

    def __contains__(self, item):
        if self.intervals is None:
            return False
        else:
            return any(item in i for i in self.intervals)

    def __len__(self):
        return sum(len(i) for i in self.intervals)

    def removeRange(self, v):
        if v.start==v.stop-1:
            self.removeOne(v.start)
        elif self.intervals is not None:
            k = 0
            for i in self.intervals:
                # intervals are ordered
                if v.stop<=i.start:
                    return
                # check for including range, split it
                elif v.start>i.start and v.stop<i.stop:
                    self.intervals[k] = range(i.start, v.start)
                    x = range(v.stop, i.stop)
                    self.intervals.insert(k, x)
                    return
                # check for included range, remove it
                elif v.start<=i.start and v.stop>=i.stop:
                    self.intervals.pop(k)
                    k -= 1  # need another pass
                # check for lower boundary
                elif v.start<i.stop:
                    self.intervals[k] = range(i.start, v.start)
                # check for upper boundary
                elif v.stop<i.stop:
                    self.intervals[k] = range(v.stop, i.stop)
                k += 1

    def removeOne(self, v):
        if self.intervals is not None:
            k = 0
            for i in self.intervals:
                # intervals is ordered
                if v<i.start:
                    return
                # check for single value range
                elif v==i.start and v==i.stop-1:
                    self.intervals.pop(k)
                    return
                # check for lower boundary
                elif v==i.start:
                    self.intervals[k] = range(i.start+1, i.stop)
                    return
                # check for upper boundary
                elif v==i.stop-1:
                    self.intervals[k] = range(i.start, i.stop-1)
                    return
                # split existing range
                elif v<i.stop-1:
                    x = range(i.start, v)
                    self.intervals[k] = range(v + 1, i.stop)
                    self.intervals.insert(k, x)
                    return
                k += 1


    def toString(self, literalNames:list, symbolicNames:list):
        if self.intervals is None:
            return "{}"
        with StringIO() as buf:
            if len(self)>1:
                buf.write("{")
            first = True
            for i in self.intervals:
                for j in i:
                    if not first:
                        buf.write(", ")
                    buf.write(self.elementName(literalNames, symbolicNames, j))
                    first = False
            if len(self)>1:
                buf.write("}")
            return buf.getvalue()

    def elementName(self, literalNames:list, symbolicNames:list, a:int):
        if a==Token.EOF:
            return "<EOF>"
        elif a==Token.EPSILON:
            return "<EPSILON>"
        else:
            if a<len(literalNames) and literalNames[a] != "<INVALID>":
                return literalNames[a]
            if a<len(symbolicNames):
                return symbolicNames[a]
            return "<UNKNOWN>"


// File: venv\Lib\site-packages\antlr4\Lexer.py
----------------------------------------
# Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
# Use of this file is governed by the BSD 3-clause license that
# can be found in the LICENSE.txt file in the project root.
#/

# A lexer is recognizer that draws input symbols from a character stream.
#  lexer grammars result in a subclass of self object. A Lexer object
#  uses simplified match() and error recovery mechanisms in the interest
#  of speed.
#/
from io import StringIO

import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO
from antlr4.CommonTokenFactory import CommonTokenFactory
from antlr4.atn.LexerATNSimulator import LexerATNSimulator
from antlr4.InputStream import InputStream
from antlr4.Recognizer import Recognizer
from antlr4.Token import Token
from antlr4.error.Errors import IllegalStateException, LexerNoViableAltException, RecognitionException

class TokenSource(object):

    pass


class Lexer(Recognizer, TokenSource):
    __slots__ = (
        '_input', '_output', '_factory', '_tokenFactorySourcePair', '_token',
        '_tokenStartCharIndex', '_tokenStartLine', '_tokenStartColumn',
        '_hitEOF', '_channel', '_type', '_modeStack', '_mode', '_text'
    )

    DEFAULT_MODE = 0
    MORE = -2
    SKIP = -3

    DEFAULT_TOKEN_CHANNEL = Token.DEFAULT_CHANNEL
    HIDDEN = Token.HIDDEN_CHANNEL
    MIN_CHAR_VALUE = 0x0000
    MAX_CHAR_VALUE = 0x10FFFF

    def __init__(self, input:InputStream, output:TextIO = sys.stdout):
        super().__init__()
        self._input = input
        self._output = output
        self._factory = CommonTokenFactory.DEFAULT
        self._tokenFactorySourcePair = (self, input)

        self._interp = None # child classes must populate this

        # The goal of all lexer rules/methods is to create a token object.
        #  self is an instance variable as multiple rules may collaborate to
        #  create a single token.  nextToken will return self object after
        #  matching lexer rule(s).  If you subclass to allow multiple token
        #  emissions, then set self to the last token to be matched or
        #  something nonnull so that the auto token emit mechanism will not
        #  emit another token.
        self._token = None

        # What character index in the stream did the current token start at?
        #  Needed, for example, to get the text for current token.  Set at
        #  the start of nextToken.
        self._tokenStartCharIndex = -1

        # The line on which the first character of the token resides#/
        self._tokenStartLine = -1

        # The character position of first character within the line#/
        self._tokenStartColumn = -1

        # Once we see EOF on char stream, next token will be EOF.
        #  If you have DONE : EOF ; then you see DONE EOF.
        self._hitEOF = False

        # The channel number for the current token#/
        self._channel = Token.DEFAULT_CHANNEL

        # The token type for the current token#/
        self._type = Token.INVALID_TYPE

        self._modeStack = []
        self._mode = self.DEFAULT_MODE

        # You can set the text for the current token to override what is in
        #  the input char buffer.  Use setText() or can set self instance var.
        #/
        self._text = None


    def reset(self):
        # wack Lexer state variables
        if self._input is not None:
            self._input.seek(0) # rewind the input
        self._token = None
        self._type = Token.INVALID_TYPE
        self._channel = Token.DEFAULT_CHANNEL
        self._tokenStartCharIndex = -1
        self._tokenStartColumn = -1
        self._tokenStartLine = -1
        self._text = None

        self._hitEOF = False
        self._mode = Lexer.DEFAULT_MODE
        self._modeStack = []

        self._interp.reset()

    # Return a token from self source; i.e., match a token on the char
    #  stream.
    def nextToken(self):
        if self._input is None:
            raise IllegalStateException("nextToken requires a non-null input stream.")

        # Mark start location in char stream so unbuffered streams are
        # guaranteed at least have text of current token
        tokenStartMarker = self._input.mark()
        try:
            while True:
                if self._hitEOF:
                    self.emitEOF()
                    return self._token
                self._token = None
                self._channel = Token.DEFAULT_CHANNEL
                self._tokenStartCharIndex = self._input.index
                self._tokenStartColumn = self._interp.column
                self._tokenStartLine = self._interp.line
                self._text = None
                continueOuter = False
                while True:
                    self._type = Token.INVALID_TYPE
                    ttype = self.SKIP
                    try:
                        ttype = self._interp.match(self._input, self._mode)
                    except LexerNoViableAltException as e:
                        self.notifyListeners(e)		# report error
                        self.recover(e)
                    if self._input.LA(1)==Token.EOF:
                        self._hitEOF = True
                    if self._type == Token.INVALID_TYPE:
                        self._type = ttype
                    if self._type == self.SKIP:
                        continueOuter = True
                        break
                    if self._type!=self.MORE:
                        break
                if continueOuter:
                    continue
                if self._token is None:
                    self.emit()
                return self._token
        finally:
            # make sure we release marker after match or
            # unbuffered char stream will keep buffering
            self._input.release(tokenStartMarker)

    # Instruct the lexer to skip creating a token for current lexer rule
    #  and look for another token.  nextToken() knows to keep looking when
    #  a lexer rule finishes with token set to SKIP_TOKEN.  Recall that
    #  if token==null at end of any token rule, it creates one for you
    #  and emits it.
    #/
    def skip(self):
        self._type = self.SKIP

    def more(self):
        self._type = self.MORE

    def mode(self, m:int):
        self._mode = m

    def pushMode(self, m:int):
        if self._interp.debug:
            print("pushMode " + str(m), file=self._output)
        self._modeStack.append(self._mode)
        self.mode(m)

    def popMode(self):
        if len(self._modeStack)==0:
            raise Exception("Empty Stack")
        if self._interp.debug:
            print("popMode back to "+ self._modeStack[:-1], file=self._output)
        self.mode( self._modeStack.pop() )
        return self._mode

    # Set the char stream and reset the lexer#/
    @property
    def inputStream(self):
        return self._input

    @inputStream.setter
    def inputStream(self, input:InputStream):
        self._input = None
        self._tokenFactorySourcePair = (self, self._input)
        self.reset()
        self._input = input
        self._tokenFactorySourcePair = (self, self._input)

    @property
    def sourceName(self):
        return self._input.sourceName

    # By default does not support multiple emits per nextToken invocation
    #  for efficiency reasons.  Subclass and override self method, nextToken,
    #  and getToken (to push tokens into a list and pull from that list
    #  rather than a single variable as self implementation does).
    #/
    def emitToken(self, token:Token):
        self._token = token

    # The standard method called to automatically emit a token at the
    #  outermost lexical rule.  The token object should point into the
    #  char buffer start..stop.  If there is a text override in 'text',
    #  use that to set the token's text.  Override self method to emit
    #  custom Token objects or provide a new factory.
    #/
    def emit(self):
        t = self._factory.create(self._tokenFactorySourcePair, self._type, self._text, self._channel, self._tokenStartCharIndex,
                                 self.getCharIndex()-1, self._tokenStartLine, self._tokenStartColumn)
        self.emitToken(t)
        return t

    def emitEOF(self):
        cpos = self.column
        lpos = self.line
        eof = self._factory.create(self._tokenFactorySourcePair, Token.EOF, None, Token.DEFAULT_CHANNEL, self._input.index,
                                   self._input.index-1, lpos, cpos)
        self.emitToken(eof)
        return eof

    @property
    def type(self):
        return self._type

    @type.setter
    def type(self, type:int):
        self._type = type

    @property
    def line(self):
        return self._interp.line

    @line.setter
    def line(self, line:int):
        self._interp.line = line

    @property
    def column(self):
        return self._interp.column

    @column.setter
    def column(self, column:int):
        self._interp.column = column

    # What is the index of the current character of lookahead?#/
    def getCharIndex(self):
        return self._input.index

    # Return the text matched so far for the current token or any
    #  text override.
    @property
    def text(self):
        if self._text is not None:
            return self._text
        else:
            return self._interp.getText(self._input)

    # Set the complete text of self token; it wipes any previous
    #  changes to the text.
    @text.setter
    def text(self, txt:str):
        self._text = txt

    # Return a list of all Token objects in input char stream.
    #  Forces load of all tokens. Does not include EOF token.
    #/
    def getAllTokens(self):
        tokens = []
        t = self.nextToken()
        while t.type!=Token.EOF:
            tokens.append(t)
            t = self.nextToken()
        return tokens

    def notifyListeners(self, e:LexerNoViableAltException):
        start = self._tokenStartCharIndex
        stop = self._input.index
        text = self._input.getText(start, stop)
        msg = "token recognition error at: '" + self.getErrorDisplay(text) + "'"
        listener = self.getErrorListenerDispatch()
        listener.syntaxError(self, None, self._tokenStartLine, self._tokenStartColumn, msg, e)

    def getErrorDisplay(self, s:str):
        with StringIO() as buf:
            for c in s:
                buf.write(self.getErrorDisplayForChar(c))
            return buf.getvalue()

    def getErrorDisplayForChar(self, c:str):
        if ord(c[0])==Token.EOF:
            return "<EOF>"
        elif c=='\n':
            return "\\n"
        elif c=='\t':
            return "\\t"
        elif c=='\r':
            return "\\r"
        else:
            return c

    def getCharErrorDisplay(self, c:str):
        return "'" + self.getErrorDisplayForChar(c) + "'"

    # Lexers can normally match any char in it's vocabulary after matching
    #  a token, so do the easy thing and just kill a character and hope
    #  it all works out.  You can instead use the rule invocation stack
    #  to do sophisticated error recovery if you are in a fragment rule.
    #/
    def recover(self, re:RecognitionException):
        if self._input.LA(1) != Token.EOF:
            if isinstance(re, LexerNoViableAltException):
                    # skip a char and try again
                    self._interp.consume(self._input)
            else:
                # TODO: Do we lose character or line position information?
                self._input.consume()


// File: venv\Lib\site-packages\antlr4\ListTokenSource.py
----------------------------------------
#
# Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
# Use of this file is governed by the BSD 3-clause license that
# can be found in the LICENSE.txt file in the project root.
#

#
# Provides an implementation of {@link TokenSource} as a wrapper around a list
# of {@link Token} objects.
#
# <p>If the final token in the list is an {@link Token#EOF} token, it will be used
# as the EOF token for every call to {@link #nextToken} after the end of the
# list is reached. Otherwise, an EOF token will be created.</p>
#
from antlr4.CommonTokenFactory import CommonTokenFactory
from antlr4.Lexer import TokenSource
from antlr4.Token import Token


class ListTokenSource(TokenSource):
    __slots__ = ('tokens', 'sourceName', 'pos', 'eofToken', '_factory')

    # Constructs a new {@link ListTokenSource} instance from the specified
    # collection of {@link Token} objects and source name.
    #
    # @param tokens The collection of {@link Token} objects to provide as a
    # {@link TokenSource}.
    # @param sourceName The name of the {@link TokenSource}. If this value is
    # {@code null}, {@link #getSourceName} will attempt to infer the name from
    # the next {@link Token} (or the previous token if the end of the input has
    # been reached).
    #
    # @exception NullPointerException if {@code tokens} is {@code null}
    #
    def __init__(self, tokens:list, sourceName:str=None):
        if tokens is None:
            raise ReferenceError("tokens cannot be null")
        self.tokens = tokens
        self.sourceName = sourceName
        # The index into {@link #tokens} of token to return by the next call to
        # {@link #nextToken}. The end of the input is indicated by this value
        # being greater than or equal to the number of items in {@link #tokens}.
        self.pos = 0
        # This field caches the EOF token for the token source.
        self.eofToken = None
        # This is the backing field for {@link #getTokenFactory} and
        self._factory = CommonTokenFactory.DEFAULT


    #
    # {@inheritDoc}
    #
    @property
    def column(self):
        if self.pos < len(self.tokens):
            return self.tokens[self.pos].column
        elif self.eofToken is not None:
            return self.eofToken.column
        elif len(self.tokens) > 0:
            # have to calculate the result from the line/column of the previous
            # token, along with the text of the token.
            lastToken = self.tokens[len(self.tokens) - 1]
            tokenText = lastToken.text
            if tokenText is not None:
                lastNewLine = tokenText.rfind('\n')
                if lastNewLine >= 0:
                    return len(tokenText) - lastNewLine - 1
            return lastToken.column + lastToken.stop - lastToken.start + 1

        # only reach this if tokens is empty, meaning EOF occurs at the first
        # position in the input
        return 0

    #
    # {@inheritDoc}
    #
    def nextToken(self):
        if self.pos >= len(self.tokens):
            if self.eofToken is None:
                start = -1
                if len(self.tokens) > 0:
                    previousStop = self.tokens[len(self.tokens) - 1].stop
                    if previousStop != -1:
                        start = previousStop + 1
                stop = max(-1, start - 1)
                self.eofToken = self._factory.create((self, self.getInputStream()),
                            Token.EOF, "EOF", Token.DEFAULT_CHANNEL, start, stop, self.line, self.column)
            return self.eofToken
        t = self.tokens[self.pos]
        if self.pos == len(self.tokens) - 1 and t.type == Token.EOF:
            self.eofToken = t
        self.pos += 1
        return t

    #
    # {@inheritDoc}
    #
    @property
    def line(self):
        if self.pos < len(self.tokens):
            return self.tokens[self.pos].line
        elif self.eofToken is not None:
            return self.eofToken.line
        elif len(self.tokens) > 0:
            # have to calculate the result from the line/column of the previous
            # token, along with the text of the token.
            lastToken = self.tokens[len(self.tokens) - 1]
            line = lastToken.line
            tokenText = lastToken.text
            if tokenText is not None:
                line += tokenText.count('\n')

            # if no text is available, assume the token did not contain any newline characters.
            return line

        # only reach this if tokens is empty, meaning EOF occurs at the first
        # position in the input
        return 1

    #
    # {@inheritDoc}
    #
    def getInputStream(self):
        if self.pos < len(self.tokens):
            return self.tokens[self.pos].getInputStream()
        elif self.eofToken is not None:
            return self.eofToken.getInputStream()
        elif len(self.tokens) > 0:
            return self.tokens[len(self.tokens) - 1].getInputStream()
        else:
            # no input stream information is available
            return None

    #
    # {@inheritDoc}
    #
    def getSourceName(self):
        if self.sourceName is not None:
            return self.sourceName
        inputStream = self.getInputStream()
        if inputStream is not None:
            return inputStream.getSourceName()
        else:
            return "List"


// File: venv\Lib\site-packages\antlr4\LL1Analyzer.py
----------------------------------------
#
# Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
# Use of this file is governed by the BSD 3-clause license that
# can be found in the LICENSE.txt file in the project root.
#/
from antlr4.IntervalSet import IntervalSet
from antlr4.Token import Token
from antlr4.PredictionContext import PredictionContext, SingletonPredictionContext, PredictionContextFromRuleContext
from antlr4.RuleContext import RuleContext
from antlr4.atn.ATN import ATN
from antlr4.atn.ATNConfig import ATNConfig
from antlr4.atn.ATNState import ATNState, RuleStopState
from antlr4.atn.Transition import WildcardTransition, NotSetTransition, AbstractPredicateTransition, RuleTransition


class LL1Analyzer (object):
    __slots__ = 'atn'

    #* Special value added to the lookahead sets to indicate that we hit
    #  a predicate during analysis if {@code seeThruPreds==false}.
    #/
    HIT_PRED = Token.INVALID_TYPE

    def __init__(self, atn:ATN):
        self.atn = atn

    #*
    # Calculates the SLL(1) expected lookahead set for each outgoing transition
    # of an {@link ATNState}. The returned array has one element for each
    # outgoing transition in {@code s}. If the closure from transition
    # <em>i</em> leads to a semantic predicate before matching a symbol, the
    # element at index <em>i</em> of the result will be {@code null}.
    #
    # @param s the ATN state
    # @return the expected symbols for each outgoing transition of {@code s}.
    #/
    def getDecisionLookahead(self, s:ATNState):
        if s is None:
            return None

        count = len(s.transitions)
        look = [] * count
        for alt in range(0, count):
            look[alt] = set()
            lookBusy = set()
            seeThruPreds = False # fail to get lookahead upon pred
            self._LOOK(s.transition(alt).target, None, PredictionContext.EMPTY,
                  look[alt], lookBusy, set(), seeThruPreds, False)
            # Wipe out lookahead for this alternative if we found nothing
            # or we had a predicate when we !seeThruPreds
            if len(look[alt])==0 or self.HIT_PRED in look[alt]:
                look[alt] = None
        return look

    #*
    # Compute set of tokens that can follow {@code s} in the ATN in the
    # specified {@code ctx}.
    #
    # <p>If {@code ctx} is {@code null} and the end of the rule containing
    # {@code s} is reached, {@link Token#EPSILON} is added to the result set.
    # If {@code ctx} is not {@code null} and the end of the outermost rule is
    # reached, {@link Token#EOF} is added to the result set.</p>
    #
    # @param s the ATN state
    # @param stopState the ATN state to stop at. This can be a
    # {@link BlockEndState} to detect epsilon paths through a closure.
    # @param ctx the complete parser context, or {@code null} if the context
    # should be ignored
    #
    # @return The set of tokens that can follow {@code s} in the ATN in the
    # specified {@code ctx}.
    #/
    def LOOK(self, s:ATNState, stopState:ATNState=None, ctx:RuleContext=None):
        r = IntervalSet()
        seeThruPreds = True # ignore preds; get all lookahead
        lookContext = PredictionContextFromRuleContext(s.atn, ctx) if ctx is not None else None
        self._LOOK(s, stopState, lookContext, r, set(), set(), seeThruPreds, True)
        return r

    #*
    # Compute set of tokens that can follow {@code s} in the ATN in the
    # specified {@code ctx}.
    #
    # <p>If {@code ctx} is {@code null} and {@code stopState} or the end of the
    # rule containing {@code s} is reached, {@link Token#EPSILON} is added to
    # the result set. If {@code ctx} is not {@code null} and {@code addEOF} is
    # {@code true} and {@code stopState} or the end of the outermost rule is
    # reached, {@link Token#EOF} is added to the result set.</p>
    #
    # @param s the ATN state.
    # @param stopState the ATN state to stop at. This can be a
    # {@link BlockEndState} to detect epsilon paths through a closure.
    # @param ctx The outer context, or {@code null} if the outer context should
    # not be used.
    # @param look The result lookahead set.
    # @param lookBusy A set used for preventing epsilon closures in the ATN
    # from causing a stack overflow. Outside code should pass
    # {@code new HashSet<ATNConfig>} for this argument.
    # @param calledRuleStack A set used for preventing left recursion in the
    # ATN from causing a stack overflow. Outside code should pass
    # {@code new BitSet()} for this argument.
    # @param seeThruPreds {@code true} to true semantic predicates as
    # implicitly {@code true} and "see through them", otherwise {@code false}
    # to treat semantic predicates as opaque and add {@link #HIT_PRED} to the
    # result if one is encountered.
    # @param addEOF Add {@link Token#EOF} to the result if the end of the
    # outermost context is reached. This parameter has no effect if {@code ctx}
    # is {@code null}.
    #/
    def _LOOK(self, s:ATNState, stopState:ATNState , ctx:PredictionContext, look:IntervalSet, lookBusy:set,
                     calledRuleStack:set, seeThruPreds:bool, addEOF:bool):
        c = ATNConfig(s, 0, ctx)

        if c in lookBusy:
            return
        lookBusy.add(c)

        if s == stopState:
            if ctx is None:
                look.addOne(Token.EPSILON)
                return
            elif ctx.isEmpty() and addEOF:
                look.addOne(Token.EOF)
                return

        if isinstance(s, RuleStopState ):
            if ctx is None:
                look.addOne(Token.EPSILON)
                return
            elif ctx.isEmpty() and addEOF:
                look.addOne(Token.EOF)
                return

            if ctx != PredictionContext.EMPTY:
                removed = s.ruleIndex in calledRuleStack
                try:
                    calledRuleStack.discard(s.ruleIndex)
                    # run thru all possible stack tops in ctx
                    for i in range(0, len(ctx)):
                        returnState = self.atn.states[ctx.getReturnState(i)]
                        self._LOOK(returnState, stopState, ctx.getParent(i), look, lookBusy, calledRuleStack, seeThruPreds, addEOF)
                finally:
                    if removed:
                        calledRuleStack.add(s.ruleIndex)
                return

        for t in s.transitions:
            if type(t) == RuleTransition:
                if t.target.ruleIndex in calledRuleStack:
                    continue

                newContext = SingletonPredictionContext.create(ctx, t.followState.stateNumber)

                try:
                    calledRuleStack.add(t.target.ruleIndex)
                    self._LOOK(t.target, stopState, newContext, look, lookBusy, calledRuleStack, seeThruPreds, addEOF)
                finally:
                    calledRuleStack.remove(t.target.ruleIndex)
            elif isinstance(t, AbstractPredicateTransition ):
                if seeThruPreds:
                    self._LOOK(t.target, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF)
                else:
                    look.addOne(self.HIT_PRED)
            elif t.isEpsilon:
                self._LOOK(t.target, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF)
            elif type(t) == WildcardTransition:
                look.addRange( range(Token.MIN_USER_TOKEN_TYPE, self.atn.maxTokenType + 1) )
            else:
                set_ = t.label
                if set_ is not None:
                    if isinstance(t, NotSetTransition):
                        set_ = set_.complement(Token.MIN_USER_TOKEN_TYPE, self.atn.maxTokenType)
                    look.addSet(set_)


// File: venv\Lib\site-packages\antlr4\Parser.py
----------------------------------------
#
# Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
# Use of this file is governed by the BSD 3-clause license that
# can be found in the LICENSE.txt file in the project root.
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO
from antlr4.BufferedTokenStream import TokenStream
from antlr4.CommonTokenFactory import TokenFactory
from antlr4.error.ErrorStrategy import DefaultErrorStrategy
from antlr4.InputStream import InputStream
from antlr4.Recognizer import Recognizer
from antlr4.RuleContext import RuleContext
from antlr4.ParserRuleContext import ParserRuleContext
from antlr4.Token import Token
from antlr4.Lexer import Lexer
from antlr4.atn.ATNDeserializer import ATNDeserializer
from antlr4.atn.ATNDeserializationOptions import ATNDeserializationOptions
from antlr4.error.Errors import UnsupportedOperationException, RecognitionException
from antlr4.tree.ParseTreePatternMatcher import ParseTreePatternMatcher
from antlr4.tree.Tree import ParseTreeListener, TerminalNode, ErrorNode

class TraceListener(ParseTreeListener):
    __slots__ = '_parser'

    def __init__(self, parser):
        self._parser = parser

    def enterEveryRule(self, ctx):
        print("enter   " + self._parser.ruleNames[ctx.getRuleIndex()] + ", LT(1)=" + self._parser._input.LT(1).text, file=self._parser._output)

    def visitTerminal(self, node):

        print("consume " + str(node.symbol) + " rule " + self._parser.ruleNames[self._parser._ctx.getRuleIndex()], file=self._parser._output)

    def visitErrorNode(self, node):
        pass


    def exitEveryRule(self, ctx):
        print("exit    " + self._parser.ruleNames[ctx.getRuleIndex()] + ", LT(1)=" + self._parser._input.LT(1).text, file=self._parser._output)


# self is all the parsing support code essentially; most of it is error recovery stuff.#
class Parser (Recognizer):
    __slots__ = (
        '_input', '_output', '_errHandler', '_precedenceStack', '_ctx',
        'buildParseTrees', '_tracer', '_parseListeners', '_syntaxErrors'

    )
    # self field maps from the serialized ATN string to the deserialized {@link ATN} with
    # bypass alternatives.
    #
    # @see ATNDeserializationOptions#isGenerateRuleBypassTransitions()
    #
    bypassAltsAtnCache = dict()

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__()
        # The input stream.
        self._input = None
        self._output = output
        # The error handling strategy for the parser. The default value is a new
        # instance of {@link DefaultErrorStrategy}.
        self._errHandler = DefaultErrorStrategy()
        self._precedenceStack = list()
        self._precedenceStack.append(0)
        # The {@link ParserRuleContext} object for the currently executing rule.
        # self is always non-null during the parsing process.
        self._ctx = None
        # Specifies whether or not the parser should construct a parse tree during
        # the parsing process. The default value is {@code true}.
        self.buildParseTrees = True
        # When {@link #setTrace}{@code (true)} is called, a reference to the
        # {@link TraceListener} is stored here so it can be easily removed in a
        # later call to {@link #setTrace}{@code (false)}. The listener itself is
        # implemented as a parser listener so self field is not directly used by
        # other parser methods.
        self._tracer = None
        # The list of {@link ParseTreeListener} listeners registered to receive
        # events during the parse.
        self._parseListeners = None
        # The number of syntax errors reported during parsing. self value is
        # incremented each time {@link #notifyErrorListeners} is called.
        self._syntaxErrors = 0
        self.setInputStream(input)

    # reset the parser's state#
    def reset(self):
        if self._input is not None:
            self._input.seek(0)
        self._errHandler.reset(self)
        self._ctx = None
        self._syntaxErrors = 0
        self.setTrace(False)
        self._precedenceStack = list()
        self._precedenceStack.append(0)
        if self._interp is not None:
            self._interp.reset()

    # Match current input symbol against {@code ttype}. If the symbol type
    # matches, {@link ANTLRErrorStrategy#reportMatch} and {@link #consume} are
    # called to complete the match process.
    #
    # <p>If the symbol type does not match,
    # {@link ANTLRErrorStrategy#recoverInline} is called on the current error
    # strategy to attempt recovery. If {@link #getBuildParseTree} is
    # {@code true} and the token index of the symbol returned by
    # {@link ANTLRErrorStrategy#recoverInline} is -1, the symbol is added to
    # the parse tree by calling {@link ParserRuleContext#addErrorNode}.</p>
    #
    # @param ttype the token type to match
    # @return the matched symbol
    # @throws RecognitionException if the current input symbol did not match
    # {@code ttype} and the error strategy could not recover from the
    # mismatched symbol

    def match(self, ttype:int):
        t = self.getCurrentToken()
        if t.type==ttype:
            self._errHandler.reportMatch(self)
            self.consume()
        else:
            t = self._errHandler.recoverInline(self)
            if self.buildParseTrees and t.tokenIndex==-1:
                # we must have conjured up a new token during single token insertion
                # if it's not the current symbol
                self._ctx.addErrorNode(t)
        return t

    # Match current input symbol as a wildcard. If the symbol type matches
    # (i.e. has a value greater than 0), {@link ANTLRErrorStrategy#reportMatch}
    # and {@link #consume} are called to complete the match process.
    #
    # <p>If the symbol type does not match,
    # {@link ANTLRErrorStrategy#recoverInline} is called on the current error
    # strategy to attempt recovery. If {@link #getBuildParseTree} is
    # {@code true} and the token index of the symbol returned by
    # {@link ANTLRErrorStrategy#recoverInline} is -1, the symbol is added to
    # the parse tree by calling {@link ParserRuleContext#addErrorNode}.</p>
    #
    # @return the matched symbol
    # @throws RecognitionException if the current input symbol did not match
    # a wildcard and the error strategy could not recover from the mismatched
    # symbol

    def matchWildcard(self):
        t = self.getCurrentToken()
        if t.type > 0:
            self._errHandler.reportMatch(self)
            self.consume()
        else:
            t = self._errHandler.recoverInline(self)
            if self.buildParseTrees and t.tokenIndex == -1:
                # we must have conjured up a new token during single token insertion
                # if it's not the current symbol
                self._ctx.addErrorNode(t)

        return t

    def getParseListeners(self):
        return list() if self._parseListeners is None else self._parseListeners

    # Registers {@code listener} to receive events during the parsing process.
    #
    # <p>To support output-preserving grammar transformations (including but not
    # limited to left-recursion removal, automated left-factoring, and
    # optimized code generation), calls to listener methods during the parse
    # may differ substantially from calls made by
    # {@link ParseTreeWalker#DEFAULT} used after the parse is complete. In
    # particular, rule entry and exit events may occur in a different order
    # during the parse than after the parser. In addition, calls to certain
    # rule entry methods may be omitted.</p>
    #
    # <p>With the following specific exceptions, calls to listener events are
    # <em>deterministic</em>, i.e. for identical input the calls to listener
    # methods will be the same.</p>
    #
    # <ul>
    # <li>Alterations to the grammar used to generate code may change the
    # behavior of the listener calls.</li>
    # <li>Alterations to the command line options passed to ANTLR 4 when
    # generating the parser may change the behavior of the listener calls.</li>
    # <li>Changing the version of the ANTLR Tool used to generate the parser
    # may change the behavior of the listener calls.</li>
    # </ul>
    #
    # @param listener the listener to add
    #
    # @throws NullPointerException if {@code} listener is {@code null}
    #
    def addParseListener(self, listener:ParseTreeListener):
        if listener is None:
            raise ReferenceError("listener")
        if self._parseListeners is None:
            self._parseListeners = []
        self._parseListeners.append(listener)

    #
    # Remove {@code listener} from the list of parse listeners.
    #
    # <p>If {@code listener} is {@code null} or has not been added as a parse
    # listener, self method does nothing.</p>
    # @param listener the listener to remove
    #
    def removeParseListener(self, listener:ParseTreeListener):
        if self._parseListeners is not None:
            self._parseListeners.remove(listener)
            if len(self._parseListeners)==0:
                    self._parseListeners = None

    # Remove all parse listeners.
    def removeParseListeners(self):
        self._parseListeners = None

    # Notify any parse listeners of an enter rule event.
    def triggerEnterRuleEvent(self):
        if self._parseListeners is not None:
            for listener in self._parseListeners:
                listener.enterEveryRule(self._ctx)
                self._ctx.enterRule(listener)

    #
    # Notify any parse listeners of an exit rule event.
    #
    # @see #addParseListener
    #
    def triggerExitRuleEvent(self):
        if self._parseListeners is not None:
            # reverse order walk of listeners
            for listener in reversed(self._parseListeners):
                self._ctx.exitRule(listener)
                listener.exitEveryRule(self._ctx)


    # Gets the number of syntax errors reported during parsing. This value is
    # incremented each time {@link #notifyErrorListeners} is called.
    #
    # @see #notifyErrorListeners
    #
    def getNumberOfSyntaxErrors(self):
        return self._syntaxErrors

    def getTokenFactory(self):
        return self._input.tokenSource._factory

    # Tell our token source and error strategy about a new way to create tokens.#
    def setTokenFactory(self, factory:TokenFactory):
        self._input.tokenSource._factory = factory

    # The ATN with bypass alternatives is expensive to create so we create it
    # lazily.
    #
    # @throws UnsupportedOperationException if the current parser does not
    # implement the {@link #getSerializedATN()} method.
    #
    def getATNWithBypassAlts(self):
        serializedAtn = self.getSerializedATN()
        if serializedAtn is None:
            raise UnsupportedOperationException("The current parser does not support an ATN with bypass alternatives.")
        result = self.bypassAltsAtnCache.get(serializedAtn, None)
        if result is None:
            deserializationOptions = ATNDeserializationOptions()
            deserializationOptions.generateRuleBypassTransitions = True
            result = ATNDeserializer(deserializationOptions).deserialize(serializedAtn)
            self.bypassAltsAtnCache[serializedAtn] = result
        return result

    # The preferred method of getting a tree pattern. For example, here's a
    # sample use:
    #
    # <pre>
    # ParseTree t = parser.expr();
    # ParseTreePattern p = parser.compileParseTreePattern("&lt;ID&gt;+0", MyParser.RULE_expr);
    # ParseTreeMatch m = p.match(t);
    # String id = m.get("ID");
    # </pre>
    #
    def compileParseTreePattern(self, pattern:str, patternRuleIndex:int, lexer:Lexer = None):
        if lexer is None:
            if self.getTokenStream() is not None:
                tokenSource = self.getTokenStream().tokenSource
                if isinstance( tokenSource, Lexer ):
                    lexer = tokenSource
        if lexer is None:
            raise UnsupportedOperationException("Parser can't discover a lexer to use")

        m = ParseTreePatternMatcher(lexer, self)
        return m.compile(pattern, patternRuleIndex)


    def getInputStream(self):
        return self.getTokenStream()

    def setInputStream(self, input:InputStream):
        self.setTokenStream(input)

    def getTokenStream(self):
        return self._input

    # Set the token stream and reset the parser.#
    def setTokenStream(self, input:TokenStream):
        self._input = None
        self.reset()
        self._input = input

    # Match needs to return the current input symbol, which gets put
    #  into the label for the associated token ref; e.g., x=ID.
    #
    def getCurrentToken(self):
        return self._input.LT(1)

    def notifyErrorListeners(self, msg:str, offendingToken:Token = None, e:RecognitionException = None):
        if offendingToken is None:
            offendingToken = self.getCurrentToken()
        self._syntaxErrors += 1
        line = offendingToken.line
        column = offendingToken.column
        listener = self.getErrorListenerDispatch()
        listener.syntaxError(self, offendingToken, line, column, msg, e)

    #
    # Consume and return the {@linkplain #getCurrentToken current symbol}.
    #
    # <p>E.g., given the following input with {@code A} being the current
    # lookahead symbol, self function moves the cursor to {@code B} and returns
    # {@code A}.</p>
    #
    # <pre>
    #  A B
    #  ^
    # </pre>
    #
    # If the parser is not in error recovery mode, the consumed symbol is added
    # to the parse tree using {@link ParserRuleContext#addChild(Token)}, and
    # {@link ParseTreeListener#visitTerminal} is called on any parse listeners.
    # If the parser <em>is</em> in error recovery mode, the consumed symbol is
    # added to the parse tree using
    # {@link ParserRuleContext#addErrorNode(Token)}, and
    # {@link ParseTreeListener#visitErrorNode} is called on any parse
    # listeners.
    #
    def consume(self):
        o = self.getCurrentToken()
        if o.type != Token.EOF:
            self.getInputStream().consume()
        hasListener = self._parseListeners is not None and len(self._parseListeners)>0
        if self.buildParseTrees or hasListener:
            if self._errHandler.inErrorRecoveryMode(self):
                node = self._ctx.addErrorNode(o)
            else:
                node = self._ctx.addTokenNode(o)
            if hasListener:
                for listener in self._parseListeners:
                    if isinstance(node, ErrorNode):
                        listener.visitErrorNode(node)
                    elif isinstance(node, TerminalNode):
                        listener.visitTerminal(node)
        return o

    def addContextToParseTree(self):
        # add current context to parent if we have a parent
        if self._ctx.parentCtx is not None:
            self._ctx.parentCtx.addChild(self._ctx)

    # Always called by generated parsers upon entry to a rule. Access field
    # {@link #_ctx} get the current context.
    #
    def enterRule(self, localctx:ParserRuleContext , state:int , ruleIndex:int):
        self.state = state
        self._ctx = localctx
        self._ctx.start = self._input.LT(1)
        if self.buildParseTrees:
            self.addContextToParseTree()
        if self._parseListeners  is not None:
            self.triggerEnterRuleEvent()

    def exitRule(self):
        self._ctx.stop = self._input.LT(-1)
        # trigger event on _ctx, before it reverts to parent
        if self._parseListeners is not None:
            self.triggerExitRuleEvent()
        self.state = self._ctx.invokingState
        self._ctx = self._ctx.parentCtx

    def enterOuterAlt(self, localctx:ParserRuleContext, altNum:int):
        localctx.setAltNumber(altNum)
        # if we have new localctx, make sure we replace existing ctx
        # that is previous child of parse tree
        if self.buildParseTrees and self._ctx != localctx:
            if self._ctx.parentCtx is not None:
                self._ctx.parentCtx.removeLastChild()
                self._ctx.parentCtx.addChild(localctx)
        self._ctx = localctx

    # Get the precedence level for the top-most precedence rule.
    #
    # @return The precedence level for the top-most precedence rule, or -1 if
    # the parser context is not nested within a precedence rule.
    #
    def getPrecedence(self):
        if len(self._precedenceStack)==0:
            return -1
        else:
            return self._precedenceStack[-1]

    def enterRecursionRule(self, localctx:ParserRuleContext, state:int, ruleIndex:int, precedence:int):
        self.state = state
        self._precedenceStack.append(precedence)
        self._ctx = localctx
        self._ctx.start = self._input.LT(1)
        if self._parseListeners is not None:
            self.triggerEnterRuleEvent() # simulates rule entry for left-recursive rules

    #
    # Like {@link #enterRule} but for recursive rules.
    #
    def pushNewRecursionContext(self, localctx:ParserRuleContext, state:int, ruleIndex:int):
        previous = self._ctx
        previous.parentCtx = localctx
        previous.invokingState = state
        previous.stop = self._input.LT(-1)

        self._ctx = localctx
        self._ctx.start = previous.start
        if self.buildParseTrees:
            self._ctx.addChild(previous)

        if self._parseListeners is not None:
            self.triggerEnterRuleEvent() # simulates rule entry for left-recursive rules

    def unrollRecursionContexts(self, parentCtx:ParserRuleContext):
        self._precedenceStack.pop()
        self._ctx.stop = self._input.LT(-1)
        retCtx = self._ctx # save current ctx (return value)
        # unroll so _ctx is as it was before call to recursive method
        if self._parseListeners is not None:
            while self._ctx is not parentCtx:
                self.triggerExitRuleEvent()
                self._ctx = self._ctx.parentCtx
        else:
            self._ctx = parentCtx

        # hook into tree
        retCtx.parentCtx = parentCtx

        if self.buildParseTrees and parentCtx is not None:
            # add return ctx into invoking rule's tree
            parentCtx.addChild(retCtx)

    def getInvokingContext(self, ruleIndex:int):
        ctx = self._ctx
        while ctx is not None:
            if ctx.getRuleIndex() == ruleIndex:
                return ctx
            ctx = ctx.parentCtx
        return None


    def precpred(self, localctx:RuleContext , precedence:int):
        return precedence >= self._precedenceStack[-1]

    def inContext(self, context:str):
        # TODO: useful in parser?
        return False

    #
    # Checks whether or not {@code symbol} can follow the current state in the
    # ATN. The behavior of self method is equivalent to the following, but is
    # implemented such that the complete context-sensitive follow set does not
    # need to be explicitly constructed.
    #
    # <pre>
    # return getExpectedTokens().contains(symbol);
    # </pre>
    #
    # @param symbol the symbol type to check
    # @return {@code true} if {@code symbol} can follow the current state in
    # the ATN, otherwise {@code false}.
    #
    def isExpectedToken(self, symbol:int):
        atn = self._interp.atn
        ctx = self._ctx
        s = atn.states[self.state]
        following = atn.nextTokens(s)
        if symbol in following:
            return True
        if not Token.EPSILON in following:
            return False

        while ctx is not None and ctx.invokingState>=0 and Token.EPSILON in following:
            invokingState = atn.states[ctx.invokingState]
            rt = invokingState.transitions[0]
            following = atn.nextTokens(rt.followState)
            if symbol in following:
                return True
            ctx = ctx.parentCtx

        if Token.EPSILON in following and symbol == Token.EOF:
            return True
        else:
            return False

    # Computes the set of input symbols which could follow the current parser
    # state and context, as given by {@link #getState} and {@link #getContext},
    # respectively.
    #
    # @see ATN#getExpectedTokens(int, RuleContext)
    #
    def getExpectedTokens(self):
        return self._interp.atn.getExpectedTokens(self.state, self._ctx)

    def getExpectedTokensWithinCurrentRule(self):
        atn = self._interp.atn
        s = atn.states[self.state]
        return atn.nextTokens(s)

    # Get a rule's index (i.e., {@code RULE_ruleName} field) or -1 if not found.#
    def getRuleIndex(self, ruleName:str):
        ruleIndex = self.getRuleIndexMap().get(ruleName, None)
        if ruleIndex is not None:
            return ruleIndex
        else:
            return -1

    # Return List&lt;String&gt; of the rule names in your parser instance
    #  leading up to a call to the current rule.  You could override if
    #  you want more details such as the file/line info of where
    #  in the ATN a rule is invoked.
    #
    #  this is very useful for error messages.
    #
    def getRuleInvocationStack(self, p:RuleContext=None):
        if p is None:
            p = self._ctx
        stack = list()
        while p is not None:
            # compute what follows who invoked us
            ruleIndex = p.getRuleIndex()
            if ruleIndex<0:
                stack.append("n/a")
            else:
                stack.append(self.ruleNames[ruleIndex])
            p = p.parentCtx
        return stack

    # For debugging and other purposes.#
    def getDFAStrings(self):
        return [ str(dfa) for dfa in self._interp.decisionToDFA]

    # For debugging and other purposes.#
    def dumpDFA(self):
        seenOne = False
        for i in range(0, len(self._interp.decisionToDFA)):
            dfa = self._interp.decisionToDFA[i]
            if len(dfa.states)>0:
                if seenOne:
                    print(file=self._output)
                print("Decision " + str(dfa.decision) + ":", file=self._output)
                print(dfa.toString(self.literalNames, self.symbolicNames), end='', file=self._output)
                seenOne = True


    def getSourceName(self):
        return self._input.sourceName

    # During a parse is sometimes useful to listen in on the rule entry and exit
    #  events as well as token matches. self is for quick and dirty debugging.
    #
    def setTrace(self, trace:bool):
        if not trace:
            self.removeParseListener(self._tracer)
            self._tracer = None
        else:
            if self._tracer is not None:
                self.removeParseListener(self._tracer)
            self._tracer = TraceListener(self)
            self.addParseListener(self._tracer)


// File: venv\Lib\site-packages\antlr4\ParserInterpreter.py
----------------------------------------
#
# Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
# Use of this file is governed by the BSD 3-clause license that
# can be found in the LICENSE.txt file in the project root.
#

# A parser simulator that mimics what ANTLR's generated
#  parser code does. A ParserATNSimulator is used to make
#  predictions via adaptivePredict but this class moves a pointer through the
#  ATN to simulate parsing. ParserATNSimulator just
#  makes us efficient rather than having to backtrack, for example.
#
#  This properly creates parse trees even for left recursive rules.
#
#  We rely on the left recursive rule invocation and special predicate
#  transitions to make left recursive rules work.
#
#  See TestParserInterpreter for examples.
#
from antlr4.dfa.DFA import DFA
from antlr4.BufferedTokenStream import TokenStream
from antlr4.Lexer import Lexer
from antlr4.Parser import Parser
from antlr4.ParserRuleContext import InterpreterRuleContext, ParserRuleContext
from antlr4.Token import Token
from antlr4.atn.ATN import ATN
from antlr4.atn.ATNState import StarLoopEntryState, ATNState, LoopEndState
from antlr4.atn.ParserATNSimulator import ParserATNSimulator
from antlr4.PredictionContext import PredictionContextCache
from antlr4.atn.Transition import Transition
from antlr4.error.Errors import RecognitionException, UnsupportedOperationException, FailedPredicateException


class ParserInterpreter(Parser):
    __slots__ = (
        'grammarFileName', 'atn', 'tokenNames', 'ruleNames', 'decisionToDFA',
        'sharedContextCache', '_parentContextStack',
        'pushRecursionContextStates'
    )

    def __init__(self, grammarFileName:str, tokenNames:list, ruleNames:list, atn:ATN, input:TokenStream):
        super().__init__(input)
        self.grammarFileName = grammarFileName
        self.atn = atn
        self.tokenNames = tokenNames
        self.ruleNames = ruleNames
        self.decisionToDFA = [ DFA(state) for state in atn.decisionToState ]
        self.sharedContextCache = PredictionContextCache()
        self._parentContextStack = list()
        # identify the ATN states where pushNewRecursionContext must be called
        self.pushRecursionContextStates = set()
        for state in atn.states:
            if not isinstance(state, StarLoopEntryState):
                continue
            if state.isPrecedenceDecision:
                self.pushRecursionContextStates.add(state.stateNumber)
        # get atn simulator that knows how to do predictions
        self._interp = ParserATNSimulator(self, atn, self.decisionToDFA, self.sharedContextCache)

    # Begin parsing at startRuleIndex#
    def parse(self, startRuleIndex:int):
        startRuleStartState = self.atn.ruleToStartState[startRuleIndex]
        rootContext = InterpreterRuleContext(None, ATNState.INVALID_STATE_NUMBER, startRuleIndex)
        if startRuleStartState.isPrecedenceRule:
            self.enterRecursionRule(rootContext, startRuleStartState.stateNumber, startRuleIndex, 0)
        else:
            self.enterRule(rootContext, startRuleStartState.stateNumber, startRuleIndex)
        while True:
            p = self.getATNState()
            if p.stateType==ATNState.RULE_STOP :
                # pop; return from rule
                if len(self._ctx)==0:
                    if startRuleStartState.isPrecedenceRule:
                        result = self._ctx
                        parentContext = self._parentContextStack.pop()
                        self.unrollRecursionContexts(parentContext.a)
                        return result
                    else:
                        self.exitRule()
                        return rootContext
                self.visitRuleStopState(p)

            else:
                try:
                    self.visitState(p)
                except RecognitionException as e:
                    self.state = self.atn.ruleToStopState[p.ruleIndex].stateNumber
                    self._ctx.exception = e
                    self._errHandler.reportError(self, e)
                    self._errHandler.recover(self, e)

    def enterRecursionRule(self, localctx:ParserRuleContext, state:int, ruleIndex:int, precedence:int):
        self._parentContextStack.append((self._ctx, localctx.invokingState))
        super().enterRecursionRule(localctx, state, ruleIndex, precedence)

    def getATNState(self):
        return self.atn.states[self.state]

    def visitState(self, p:ATNState):
        edge = 0
        if len(p.transitions) > 1:
            self._errHandler.sync(self)
            edge = self._interp.adaptivePredict(self._input, p.decision, self._ctx)
        else:
            edge = 1

        transition = p.transitions[edge - 1]
        tt = transition.serializationType
        if tt==Transition.EPSILON:

            if self.pushRecursionContextStates[p.stateNumber] and not isinstance(transition.target, LoopEndState):
                t = self._parentContextStack[-1]
                ctx = InterpreterRuleContext(t[0], t[1], self._ctx.ruleIndex)
                self.pushNewRecursionContext(ctx, self.atn.ruleToStartState[p.ruleIndex].stateNumber, self._ctx.ruleIndex)

        elif tt==Transition.ATOM:

            self.match(transition.label)

        elif tt in [ Transition.RANGE, Transition.SET, Transition.NOT_SET]:

            if not transition.matches(self._input.LA(1), Token.MIN_USER_TOKEN_TYPE, Lexer.MAX_CHAR_VALUE):
                self._errHandler.recoverInline(self)
            self.matchWildcard()

        elif tt==Transition.WILDCARD:

            self.matchWildcard()

        elif tt==Transition.RULE:

            ruleStartState = transition.target
            ruleIndex = ruleStartState.ruleIndex
            ctx = InterpreterRuleContext(self._ctx, p.stateNumber, ruleIndex)
            if ruleStartState.isPrecedenceRule:
                self.enterRecursionRule(ctx, ruleStartState.stateNumber, ruleIndex, transition.precedence)
            else:
                self.enterRule(ctx, transition.target.stateNumber, ruleIndex)

        elif tt==Transition.PREDICATE:

            if not self.sempred(self._ctx, transition.ruleIndex, transition.predIndex):
                raise FailedPredicateException(self)

        elif tt==Transition.ACTION:

            self.action(self._ctx, transition.ruleIndex, transition.actionIndex)

        elif tt==Transition.PRECEDENCE:

            if not self.precpred(self._ctx, transition.precedence):
                msg = "precpred(_ctx, " + str(transition.precedence) + ")"
                raise FailedPredicateException(self, msg)

        else:
            raise UnsupportedOperationException("Unrecognized ATN transition type.")

        self.state = transition.target.stateNumber

    def visitRuleStopState(self, p:ATNState):
        ruleStartState = self.atn.ruleToStartState[p.ruleIndex]
        if ruleStartState.isPrecedenceRule:
            parentContext = self._parentContextStack.pop()
            self.unrollRecursionContexts(parentContext.a)
            self.state = parentContext[1]
        else:
            self.exitRule()

        ruleTransition = self.atn.states[self.state].transitions[0]
        self.state = ruleTransition.followState.stateNumber


// File: venv\Lib\site-packages\antlr4\ParserRuleContext.py
----------------------------------------
# Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
# Use of this file is governed by the BSD 3-clause license that
# can be found in the LICENSE.txt file in the project root.

#* A rule invocation record for parsing.
#
#  Contains all of the information about the current rule not stored in the
#  RuleContext. It handles parse tree children list, Any ATN state
#  tracing, and the default values available for rule indications:
#  start, stop, rule index, current alt number, current
#  ATN state.
#
#  Subclasses made for each rule and grammar track the parameters,
#  return values, locals, and labels specific to that rule. These
#  are the objects that are returned from rules.
#
#  Note text is not an actual field of a rule return value; it is computed
#  from start and stop using the input stream's toString() method.  I
#  could add a ctor to this so that we can pass in and store the input
#  stream, but I'm not sure we want to do that.  It would seem to be undefined
#  to get the .text property anyway if the rule matches tokens from multiple
#  input streams.
#
#  I do not use getters for fields of objects that are used simply to
#  group values such as this aggregate.  The getters/setters are there to
#  satisfy the superclass interface.

from antlr4.RuleContext import RuleContext
from antlr4.Token import Token
from antlr4.tree.Tree import ParseTreeListener, ParseTree, TerminalNodeImpl, ErrorNodeImpl, TerminalNode, \
    INVALID_INTERVAL

# need forward declaration
ParserRuleContext = None

class ParserRuleContext(RuleContext):
    __slots__ = ('children', 'start', 'stop', 'exception')
    def __init__(self, parent:ParserRuleContext = None, invokingStateNumber:int = None ):
        super().__init__(parent, invokingStateNumber)
        #* If we are debugging or building a parse tree for a visitor,
        #  we need to track all of the tokens and rule invocations associated
        #  with this rule's context. This is empty for parsing w/o tree constr.
        #  operation because we don't the need to track the details about
        #  how we parse this rule.
        #/
        self.children = None
        self.start = None
        self.stop = None
        # The exception that forced this rule to return. If the rule successfully
        # completed, this is {@code null}.
        self.exception = None

    #* COPY a ctx (I'm deliberately not using copy constructor)#/
    #
    # This is used in the generated parser code to flip a generic XContext
    # node for rule X to a YContext for alt label Y. In that sense, it is
    # not really a generic copy function.
    #
    # If we do an error sync() at start of a rule, we might add error nodes
    # to the generic XContext so this function must copy those nodes to
    # the YContext as well else they are lost!
    #/
    def copyFrom(self, ctx:ParserRuleContext):
        # from RuleContext
        self.parentCtx = ctx.parentCtx
        self.invokingState = ctx.invokingState
        self.children = None
        self.start = ctx.start
        self.stop = ctx.stop

        # copy any error nodes to alt label node
        if ctx.children is not None:
            self.children = []
            # reset parent pointer for any error nodes
            for child in ctx.children:
                if isinstance(child, ErrorNodeImpl):
                    self.children.append(child)
                    child.parentCtx = self

    # Double dispatch methods for listeners
    def enterRule(self, listener:ParseTreeListener):
        pass

    def exitRule(self, listener:ParseTreeListener):
        pass

    #* Does not set parent link; other add methods do that#/
    def addChild(self, child:ParseTree):
        if self.children is None:
            self.children = []
        self.children.append(child)
        return child

    #* Used by enterOuterAlt to toss out a RuleContext previously added as
    #  we entered a rule. If we have # label, we will need to remove
    #  generic ruleContext object.
    #/
    def removeLastChild(self):
        if self.children is not None:
            del self.children[len(self.children)-1]

    def addTokenNode(self, token:Token):
        node = TerminalNodeImpl(token)
        self.addChild(node)
        node.parentCtx = self
        return node

    def addErrorNode(self, badToken:Token):
        node = ErrorNodeImpl(badToken)
        self.addChild(node)
        node.parentCtx = self
        return node

    def getChild(self, i:int, ttype:type = None):
        if ttype is None:
            return self.children[i] if len(self.children)>i else None
        else:
            for child in self.getChildren():
                if not isinstance(child, ttype):
                    continue
                if i==0:
                    return child
                i -= 1
            return None

    def getChildren(self, predicate = None):
        if self.children is not None:
            for child in self.children:
                if predicate is not None and not predicate(child):
                    continue
                yield child

    def getToken(self, ttype:int, i:int):
        for child in self.getChildren():
            if not isinstance(child, TerminalNode):
                continue
            if child.symbol.type != ttype:
                continue
            if i==0:
                return child
            i -= 1
        return None

    def getTokens(self, ttype:int ):
        if self.getChildren() is None:
            return []
        tokens = []
        for child in self.getChildren():
            if not isinstance(child, TerminalNode):
                continue
            if child.symbol.type != ttype:
                continue
            tokens.append(child)
        return tokens

    def getTypedRuleContext(self, ctxType:type, i:int):
        return self.getChild(i, ctxType)

    def getTypedRuleContexts(self, ctxType:type):
        children = self.getChildren()
        if children is None:
            return []
        contexts = []
        for child in children:
            if not isinstance(child, ctxType):
                continue
            contexts.append(child)
        return contexts

    def getChildCount(self):
        return len(self.children) if self.children else 0

    def getSourceInterval(self):
        if self.start is None or self.stop is None:
            return INVALID_INTERVAL
        else:
            return (self.start.tokenIndex, self.stop.tokenIndex)


RuleContext.EMPTY = ParserRuleContext()

class InterpreterRuleContext(ParserRuleContext):

    def __init__(self, parent:ParserRuleContext, invokingStateNumber:int, ruleIndex:int):
        super().__init__(parent, invokingStateNumber)
        self.ruleIndex = ruleIndex


// File: venv\Lib\site-packages\antlr4\PredictionContext.py
----------------------------------------
#
# Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
# Use of this file is governed by the BSD 3-clause license that
# can be found in the LICENSE.txt file in the project root.
#/
from io import StringIO

from antlr4.error.Errors import IllegalStateException

from antlr4.RuleContext import RuleContext
from antlr4.atn.ATN import ATN
from antlr4.atn.ATNState import ATNState


class PredictionContext(object):

    # Represents {@code $} in local context prediction, which means wildcard.
    # {@code#+x =#}.
    #/
    EMPTY = None

    # Represents {@code $} in an array in full context mode, when {@code $}
    # doesn't mean wildcard: {@code $ + x = [$,x]}. Here,
    # {@code $} = {@link #EMPTY_RETURN_STATE}.
    #/
    EMPTY_RETURN_STATE = 0x7FFFFFFF

    globalNodeCount = 1
    id = globalNodeCount

    # Stores the computed hash code of this {@link PredictionContext}. The hash
    # code is computed in parts to match the following reference algorithm.
    #
    # <pre>
    #  private int referenceHashCode() {
    #      int hash = {@link MurmurHash#initialize MurmurHash.initialize}({@link #INITIAL_HASH});
    #
    #      for (int i = 0; i &lt; {@link #size()}; i++) {
    #          hash = {@link MurmurHash#update MurmurHash.update}(hash, {@link #getParent getParent}(i));
    #      }
    #
    #      for (int i = 0; i &lt; {@link #size()}; i++) {
    #          hash = {@link MurmurHash#update MurmurHash.update}(hash, {@link #getReturnState getReturnState}(i));
    #      }
    #
    #      hash = {@link MurmurHash#finish MurmurHash.finish}(hash, 2# {@link #size()});
    #      return hash;
    #  }
    # </pre>
    #/

    def __init__(self, cachedHashCode:int):
        self.cachedHashCode = cachedHashCode

    def __len__(self):
        return 0

    # This means only the {@link #EMPTY} context is in set.
    def isEmpty(self):
        return self is self.EMPTY

    def hasEmptyPath(self):
        return self.getReturnState(len(self) - 1) == self.EMPTY_RETURN_STATE

    def getReturnState(self, index:int):
        raise IllegalStateException("illegal!")

    def __hash__(self):
        return self.cachedHashCode

def calculateHashCode(parent:PredictionContext, returnState:int):
    return hash("") if parent is None else hash((hash(parent), returnState))

def calculateListsHashCode(parents:[], returnStates:[] ):
    h = 0
    for parent, returnState in zip(parents, returnStates):
        h = hash((h, calculateHashCode(parent, returnState)))
    return h

#  Used to cache {@link PredictionContext} objects. Its used for the shared
#  context cash associated with contexts in DFA states. This cache
#  can be used for both lexers and parsers.

class PredictionContextCache(object):

    def __init__(self):
        self.cache = dict()

    #  Add a context to the cache and return it. If the context already exists,
    #  return that one instead and do not add a new context to the cache.
    #  Protect shared cache from unsafe thread access.
    #
    def add(self, ctx:PredictionContext):
        if ctx==PredictionContext.EMPTY:
            return PredictionContext.EMPTY
        existing = self.cache.get(ctx, None)
        if existing is not None:
            return existing
        self.cache[ctx] = ctx
        return ctx

    def get(self, ctx:PredictionContext):
        return self.cache.get(ctx, None)

    def __len__(self):
        return len(self.cache)


class SingletonPredictionContext(PredictionContext):

    @staticmethod
    def create(parent:PredictionContext , returnState:int ):
        if returnState == PredictionContext.EMPTY_RETURN_STATE and parent is None:
            # someone can pass in the bits of an array ctx that mean $
            return SingletonPredictionContext.EMPTY
        else:
            return SingletonPredictionContext(parent, returnState)

    def __init__(self, parent:PredictionContext, returnState:int):
        hashCode = calculateHashCode(parent, returnState)
        super().__init__(hashCode)
        self.parentCtx = parent
        self.returnState = returnState

    def __len__(self):
        return 1

    def getParent(self, index:int):
        return self.parentCtx

    def getReturnState(self, index:int):
        return self.returnState

    def __eq__(self, other):
        if self is other:
            return True
        elif other is None:
            return False
        elif not isinstance(other, SingletonPredictionContext):
            return False
        else:
            return self.returnState == other.returnState and self.parentCtx == other.parentCtx

    def __hash__(self):
        return self.cachedHashCode

    def __str__(self):
        up = "" if self.parentCtx is None else str(self.parentCtx)
        if len(up)==0:
            if self.returnState == self.EMPTY_RETURN_STATE:
                return "$"
            else:
                return str(self.returnState)
        else:
            return str(self.returnState) + " " + up


class EmptyPredictionContext(SingletonPredictionContext):

    def __init__(self):
        super().__init__(None, PredictionContext.EMPTY_RETURN_STATE)

    def isEmpty(self):
        return True

    def __eq__(self, other):
        return self is other

    def __hash__(self):
        return self.cachedHashCode

    def __str__(self):
        return "$"


PredictionContext.EMPTY = EmptyPredictionContext()

class ArrayPredictionContext(PredictionContext):
    # Parent can be null only if full ctx mode and we make an array
    #  from {@link #EMPTY} and non-empty. We merge {@link #EMPTY} by using null parent and
    #  returnState == {@link #EMPTY_RETURN_STATE}.

    def __init__(self, parents:list, returnStates:list):
        super().__init__(calculateListsHashCode(parents, returnStates))
        self.parents = parents
        self.returnStates = returnStates

    def isEmpty(self):
        # since EMPTY_RETURN_STATE can only appear in the last position, we
        # don't need to verify that size==1
        return self.returnStates[0]==PredictionContext.EMPTY_RETURN_STATE

    def __len__(self):
        return len(self.returnStates)

    def getParent(self, index:int):
        return self.parents[index]

    def getReturnState(self, index:int):
        return self.returnStates[index]

    def __eq__(self, other):
        if self is other:
            return True
        elif not isinstance(other, ArrayPredictionContext):
            return False
        elif hash(self) != hash(other):
            return False # can't be same if hash is different
        else:
            return self.returnStates==other.returnStates and self.parents==other.parents

    def __str__(self):
        if self.isEmpty():
            return "[]"
        with StringIO() as buf:
            buf.write("[")
            for i in range(0,len(self.returnStates)):
                if i>0:
                    buf.write(", ")
                if self.returnStates[i]==PredictionContext.EMPTY_RETURN_STATE:
                    buf.write("$")
                    continue
                buf.write(str(self.returnStates[i]))
                if self.parents[i] is not None:
                    buf.write(' ')
                    buf.write(str(self.parents[i]))
                else:
                    buf.write("null")
            buf.write("]")
            return buf.getvalue()

    def __hash__(self):
        return self.cachedHashCode



#  Convert a {@link RuleContext} tree to a {@link PredictionContext} graph.
#  Return {@link #EMPTY} if {@code outerContext} is empty or null.
#/
def PredictionContextFromRuleContext(atn:ATN, outerContext:RuleContext=None):
    if outerContext is None:
        outerContext = RuleContext.EMPTY

    # if we are in RuleContext of start rule, s, then PredictionContext
    # is EMPTY. Nobody called us. (if we are empty, return empty)
    if outerContext.parentCtx is None or outerContext is RuleContext.EMPTY:
        return PredictionContext.EMPTY

    # If we have a parent, convert it to a PredictionContext graph
    parent = PredictionContextFromRuleContext(atn, outerContext.parentCtx)
    state = atn.states[outerContext.invokingState]
    transition = state.transitions[0]
    return SingletonPredictionContext.create(parent, transition.followState.stateNumber)


def merge(a:PredictionContext, b:PredictionContext, rootIsWildcard:bool, mergeCache:dict):

    # share same graph if both same
    if a==b:
        return a

    if isinstance(a, SingletonPredictionContext) and isinstance(b, SingletonPredictionContext):
        return mergeSingletons(a, b, rootIsWildcard, mergeCache)

    # At least one of a or b is array
    # If one is $ and rootIsWildcard, return $ as# wildcard
    if rootIsWildcard:
        if isinstance( a, EmptyPredictionContext ):
            return a
        if isinstance( b, EmptyPredictionContext ):
            return b

    # convert singleton so both are arrays to normalize
    if isinstance( a, SingletonPredictionContext ):
        a = ArrayPredictionContext([a.parentCtx], [a.returnState])
    if isinstance( b, SingletonPredictionContext):
        b = ArrayPredictionContext([b.parentCtx], [b.returnState])
    return mergeArrays(a, b, rootIsWildcard, mergeCache)


#
# Merge two {@link SingletonPredictionContext} instances.
#
# <p>Stack tops equal, parents merge is same; return left graph.<br>
# <embed src="images/SingletonMerge_SameRootSamePar.svg" type="image/svg+xml"/></p>
#
# <p>Same stack top, parents differ; merge parents giving array node, then
# remainders of those graphs. A new root node is created to point to the
# merged parents.<br>
# <embed src="images/SingletonMerge_SameRootDiffPar.svg" type="image/svg+xml"/></p>
#
# <p>Different stack tops pointing to same parent. Make array node for the
# root where both element in the root point to the same (original)
# parent.<br>
# <embed src="images/SingletonMerge_DiffRootSamePar.svg" type="image/svg+xml"/></p>
#
# <p>Different stack tops pointing to different parents. Make array node for
# the root where each element points to the corresponding original
# parent.<br>
# <embed src="images/SingletonMerge_DiffRootDiffPar.svg" type="image/svg+xml"/></p>
#
# @param a the first {@link SingletonPredictionContext}
# @param b the second {@link SingletonPredictionContext}
# @param rootIsWildcard {@code true} if this is a local-context merge,
# otherwise false to indicate a full-context merge
# @param mergeCache
#/
def mergeSingletons(a:SingletonPredictionContext, b:SingletonPredictionContext, rootIsWildcard:bool, mergeCache:dict):
    if mergeCache is not None:
        previous = mergeCache.get((a,b), None)
        if previous is not None:
            return previous
        previous = mergeCache.get((b,a), None)
        if previous is not None:
            return previous

    merged = mergeRoot(a, b, rootIsWildcard)
    if merged is not None:
        if mergeCache is not None:
            mergeCache[(a, b)] = merged
        return merged

    if a.returnState==b.returnState:
        parent = merge(a.parentCtx, b.parentCtx, rootIsWildcard, mergeCache)
        # if parent is same as existing a or b parent or reduced to a parent, return it
        if parent == a.parentCtx:
            return a # ax + bx = ax, if a=b
        if parent == b.parentCtx:
            return b # ax + bx = bx, if a=b
        # else: ax + ay = a'[x,y]
        # merge parents x and y, giving array node with x,y then remainders
        # of those graphs.  dup a, a' points at merged array
        # new joined parent so create new singleton pointing to it, a'
        merged = SingletonPredictionContext.create(parent, a.returnState)
        if mergeCache is not None:
            mergeCache[(a, b)] = merged
        return merged
    else: # a != b payloads differ
        # see if we can collapse parents due to $+x parents if local ctx
        singleParent = None
        if a is b or (a.parentCtx is not None and a.parentCtx==b.parentCtx): # ax + bx = [a,b]x
            singleParent = a.parentCtx
        if singleParent is not None:	# parents are same
            # sort payloads and use same parent
            payloads = [ a.returnState, b.returnState ]
            if a.returnState > b.returnState:
                payloads = [ b.returnState, a.returnState ]
            parents = [singleParent, singleParent]
            merged = ArrayPredictionContext(parents, payloads)
            if mergeCache is not None:
                mergeCache[(a, b)] = merged
            return merged
        # parents differ and can't merge them. Just pack together
        # into array; can't merge.
        # ax + by = [ax,by]
        payloads = [ a.returnState, b.returnState ]
        parents = [ a.parentCtx, b.parentCtx ]
        if a.returnState > b.returnState: # sort by payload
            payloads = [ b.returnState, a.returnState ]
            parents = [ b.parentCtx, a.parentCtx ]
        merged = ArrayPredictionContext(parents, payloads)
        if mergeCache is not None:
            mergeCache[(a, b)] = merged
        return merged


#
# Handle case where at least one of {@code a} or {@code b} is
# {@link #EMPTY}. In the following diagrams, the symbol {@code $} is used
# to represent {@link #EMPTY}.
#
# <h2>Local-Context Merges</h2>
#
# <p>These local-context merge operations are used when {@code rootIsWildcard}
# is true.</p>
#
# <p>{@link #EMPTY} is superset of any graph; return {@link #EMPTY}.<br>
# <embed src="images/LocalMerge_EmptyRoot.svg" type="image/svg+xml"/></p>
#
# <p>{@link #EMPTY} and anything is {@code #EMPTY}, so merged parent is
# {@code #EMPTY}; return left graph.<br>
# <embed src="images/LocalMerge_EmptyParent.svg" type="image/svg+xml"/></p>
#
# <p>Special case of last merge if local context.<br>
# <embed src="images/LocalMerge_DiffRoots.svg" type="image/svg+xml"/></p>
#
# <h2>Full-Context Merges</h2>
#
# <p>These full-context merge operations are used when {@code rootIsWildcard}
# is false.</p>
#
# <p><embed src="images/FullMerge_EmptyRoots.svg" type="image/svg+xml"/></p>
#
# <p>Must keep all contexts; {@link #EMPTY} in array is a special value (and
# null parent).<br>
# <embed src="images/FullMerge_EmptyRoot.svg" type="image/svg+xml"/></p>
#
# <p><embed src="images/FullMerge_SameRoot.svg" type="image/svg+xml"/></p>
#
# @param a the first {@link SingletonPredictionContext}
# @param b the second {@link SingletonPredictionContext}
# @param rootIsWildcard {@code true} if this is a local-context merge,
# otherwise false to indicate a full-context merge
#/
def mergeRoot(a:SingletonPredictionContext, b:SingletonPredictionContext, rootIsWildcard:bool):
    if rootIsWildcard:
        if a == PredictionContext.EMPTY:
            return PredictionContext.EMPTY  ## + b =#
        if b == PredictionContext.EMPTY:
            return PredictionContext.EMPTY  # a +# =#
    else:
        if a == PredictionContext.EMPTY and b == PredictionContext.EMPTY:
            return PredictionContext.EMPTY # $ + $ = $
        elif a == PredictionContext.EMPTY: # $ + x = [$,x]
            payloads = [ b.returnState, PredictionContext.EMPTY_RETURN_STATE ]
            parents = [ b.parentCtx, None ]
            return ArrayPredictionContext(parents, payloads)
        elif b == PredictionContext.EMPTY: # x + $ = [$,x] ($ is always first if present)
            payloads = [ a.returnState, PredictionContext.EMPTY_RETURN_STATE ]
            parents = [ a.parentCtx, None ]
            return ArrayPredictionContext(parents, payloads)
    return None


#
# Merge two {@link ArrayPredictionContext} instances.
#
# <p>Different tops, different parents.<br>
# <embed src="images/ArrayMerge_DiffTopDiffPar.svg" type="image/svg+xml"/></p>
#
# <p>Shared top, same parents.<br>
# <embed src="images/ArrayMerge_ShareTopSamePar.svg" type="image/svg+xml"/></p>
#
# <p>Shared top, different parents.<br>
# <embed src="images/ArrayMerge_ShareTopDiffPar.svg" type="image/svg+xml"/></p>
#
# <p>Shared top, all shared parents.<br>
# <embed src="images/ArrayMerge_ShareTopSharePar.svg" type="image/svg+xml"/></p>
#
# <p>Equal tops, merge parents and reduce top to
# {@link SingletonPredictionContext}.<br>
# <embed src="images/ArrayMerge_EqualTop.svg" type="image/svg+xml"/></p>
#/
def mergeArrays(a:ArrayPredictionContext, b:ArrayPredictionContext, rootIsWildcard:bool, mergeCache:dict):
    if mergeCache is not None:
        previous = mergeCache.get((a,b), None)
        if previous is not None:
            return previous
        previous = mergeCache.get((b,a), None)
        if previous is not None:
            return previous

    # merge sorted payloads a + b => M
    i = 0 # walks a
    j = 0 # walks b
    k = 0 # walks target M array

    mergedReturnStates = [None] * (len(a.returnStates) + len( b.returnStates))
    mergedParents = [None] * len(mergedReturnStates)
    # walk and merge to yield mergedParents, mergedReturnStates
    while i<len(a.returnStates) and j<len(b.returnStates):
        a_parent = a.parents[i]
        b_parent = b.parents[j]
        if a.returnStates[i]==b.returnStates[j]:
            # same payload (stack tops are equal), must yield merged singleton
            payload = a.returnStates[i]
            # $+$ = $
            bothDollars = payload == PredictionContext.EMPTY_RETURN_STATE and \
                            a_parent is None and b_parent is None
            ax_ax = (a_parent is not None and b_parent is not None) and a_parent==b_parent # ax+ax -> ax
            if bothDollars or ax_ax:
                mergedParents[k] = a_parent # choose left
                mergedReturnStates[k] = payload
            else: # ax+ay -> a'[x,y]
                mergedParent = merge(a_parent, b_parent, rootIsWildcard, mergeCache)
                mergedParents[k] = mergedParent
                mergedReturnStates[k] = payload
            i += 1 # hop over left one as usual
            j += 1 # but also skip one in right side since we merge
        elif a.returnStates[i]<b.returnStates[j]: # copy a[i] to M
            mergedParents[k] = a_parent
            mergedReturnStates[k] = a.returnStates[i]
            i += 1
        else: # b > a, copy b[j] to M
            mergedParents[k] = b_parent
            mergedReturnStates[k] = b.returnStates[j]
            j += 1
        k += 1

    # copy over any payloads remaining in either array
    if i < len(a.returnStates):
        for p in range(i, len(a.returnStates)):
            mergedParents[k] = a.parents[p]
            mergedReturnStates[k] = a.returnStates[p]
            k += 1
    else:
        for p in range(j, len(b.returnStates)):
            mergedParents[k] = b.parents[p]
            mergedReturnStates[k] = b.returnStates[p]
            k += 1

    # trim merged if we combined a few that had same stack tops
    if k < len(mergedParents): # write index < last position; trim
        if k == 1: # for just one merged element, return singleton top
            merged = SingletonPredictionContext.create(mergedParents[0], mergedReturnStates[0])
            if mergeCache is not None:
                mergeCache[(a,b)] = merged
            return merged
        mergedParents = mergedParents[0:k]
        mergedReturnStates = mergedReturnStates[0:k]

    merged = ArrayPredictionContext(mergedParents, mergedReturnStates)

    # if we created same array as a or b, return that instead
    # TODO: track whether this is possible above during merge sort for speed
    if merged==a:
        if mergeCache is not None:
            mergeCache[(a,b)] = a
        return a
    if merged==b:
        if mergeCache is not None:
            mergeCache[(a,b)] = b
        return b
    combineCommonParents(mergedParents)

    if mergeCache is not None:
        mergeCache[(a,b)] = merged
    return merged


#
# Make pass over all <em>M</em> {@code parents}; merge any {@code equals()}
# ones.
#/
def combineCommonParents(parents:list):
    uniqueParents = dict()

    for p in range(0, len(parents)):
        parent = parents[p]
        if uniqueParents.get(parent, None) is None:
            uniqueParents[parent] = parent

    for p in range(0, len(parents)):
        parents[p] = uniqueParents[parents[p]]

def getCachedPredictionContext(context:PredictionContext, contextCache:PredictionContextCache, visited:dict):
    if context.isEmpty():
        return context
    existing = visited.get(context)
    if existing is not None:
        return existing
    existing = contextCache.get(context)
    if existing is not None:
        visited[context] = existing
        return existing
    changed = False
    parents = [None] * len(context)
    for i in range(0, len(parents)):
        parent = getCachedPredictionContext(context.getParent(i), contextCache, visited)
        if changed or parent is not context.getParent(i):
            if not changed:
                parents = [context.getParent(j) for j in range(len(context))]
                changed = True
            parents[i] = parent
    if not changed:
        contextCache.add(context)
        visited[context] = context
        return context

    updated = None
    if len(parents) == 0:
        updated = PredictionContext.EMPTY
    elif len(parents) == 1:
        updated = SingletonPredictionContext.create(parents[0], context.getReturnState(0))
    else:
        updated = ArrayPredictionContext(parents, context.returnStates)

    contextCache.add(updated)
    visited[updated] = updated
    visited[context] = updated

    return updated


#	# extra structures, but cut/paste/morphed works, so leave it.
#	# seems to do a breadth-first walk
#	public static List<PredictionContext> getAllNodes(PredictionContext context) {
#		Map<PredictionContext, PredictionContext> visited =
#			new IdentityHashMap<PredictionContext, PredictionContext>();
#		Deque<PredictionContext> workList = new ArrayDeque<PredictionContext>();
#		workList.add(context);
#		visited.put(context, context);
#		List<PredictionContext> nodes = new ArrayList<PredictionContext>();
#		while (!workList.isEmpty()) {
#			PredictionContext current = workList.pop();
#			nodes.add(current);
#			for (int i = 0; i < current.size(); i++) {
#				PredictionContext parent = current.getParent(i);
#				if ( parent!=null && visited.put(parent, parent) == null) {
#					workList.push(parent);
#				}
#			}
#		}
#		return nodes;
#	}

# ter's recursive version of Sam's getAllNodes()
def getAllContextNodes(context:PredictionContext, nodes:list=None, visited:dict=None):
    if nodes is None:
        nodes = list()
        return getAllContextNodes(context, nodes, visited)
    elif visited is None:
        visited = dict()
        return getAllContextNodes(context, nodes, visited)
    else:
        if context is None or visited.get(context, None) is not None:
            return nodes
        visited.put(context, context)
        nodes.add(context)
        for i in range(0, len(context)):
            getAllContextNodes(context.getParent(i), nodes, visited)
        return nodes



// File: venv\Lib\site-packages\antlr4\Recognizer.py
----------------------------------------
#
# Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
# Use of this file is governed by the BSD 3-clause license that
# can be found in the LICENSE.txt file in the project root.
#
from antlr4.RuleContext import RuleContext
from antlr4.Token import Token
from antlr4.error.ErrorListener import ProxyErrorListener, ConsoleErrorListener

# need forward delcaration
RecognitionException = None

class Recognizer(object):
    __slots__ = ('_listeners', '_interp', '_stateNumber')

    tokenTypeMapCache = dict()
    ruleIndexMapCache = dict()

    def __init__(self):
        self._listeners = [ ConsoleErrorListener.INSTANCE ]
        self._interp = None
        self._stateNumber = -1

    def extractVersion(self, version):
        pos = version.find(".")
        major = version[0:pos]
        version = version[pos+1:]
        pos = version.find(".")
        if pos==-1:
            pos = version.find("-")
        if pos==-1:
            pos = len(version)
        minor = version[0:pos]
        return major, minor

    def checkVersion(self, toolVersion):
        runtimeVersion = "4.9.3"
        rvmajor, rvminor = self.extractVersion(runtimeVersion)
        tvmajor, tvminor = self.extractVersion(toolVersion)
        if rvmajor!=tvmajor or rvminor!=tvminor:
            print("ANTLR runtime and generated code versions disagree: "+runtimeVersion+"!="+toolVersion)

    def addErrorListener(self, listener):
        self._listeners.append(listener)

    def removeErrorListener(self, listener):
        self._listeners.remove(listener)

    def removeErrorListeners(self):
        self._listeners = []

    def getTokenTypeMap(self):
        tokenNames = self.getTokenNames()
        if tokenNames is None:
            from antlr4.error.Errors import UnsupportedOperationException
            raise UnsupportedOperationException("The current recognizer does not provide a list of token names.")
        result = self.tokenTypeMapCache.get(tokenNames, None)
        if result is None:
            result = zip( tokenNames, range(0, len(tokenNames)))
            result["EOF"] = Token.EOF
            self.tokenTypeMapCache[tokenNames] = result
        return result

    # Get a map from rule names to rule indexes.
    #
    # <p>Used for XPath and tree pattern compilation.</p>
    #
    def getRuleIndexMap(self):
        ruleNames = self.getRuleNames()
        if ruleNames is None:
            from antlr4.error.Errors import UnsupportedOperationException
            raise UnsupportedOperationException("The current recognizer does not provide a list of rule names.")
        result = self.ruleIndexMapCache.get(ruleNames, None)
        if result is None:
            result = zip( ruleNames, range(0, len(ruleNames)))
            self.ruleIndexMapCache[ruleNames] = result
        return result

    def getTokenType(self, tokenName:str):
        ttype = self.getTokenTypeMap().get(tokenName, None)
        if ttype is not None:
            return ttype
        else:
            return Token.INVALID_TYPE


    # What is the error header, normally line/character position information?#
    def getErrorHeader(self, e:RecognitionException):
        line = e.getOffendingToken().line
        column = e.getOffendingToken().column
        return "line "+line+":"+column


    # How should a token be displayed in an error message? The default
    #  is to display just the text, but during development you might
    #  want to have a lot of information spit out.  Override in that case
    #  to use t.toString() (which, for CommonToken, dumps everything about
    #  the token). This is better than forcing you to override a method in
    #  your token objects because you don't have to go modify your lexer
    #  so that it creates a new Java type.
    #
    # @deprecated This method is not called by the ANTLR 4 Runtime. Specific
    # implementations of {@link ANTLRErrorStrategy} may provide a similar
    # feature when necessary. For example, see
    # {@link DefaultErrorStrategy#getTokenErrorDisplay}.
    #
    def getTokenErrorDisplay(self, t:Token):
        if t is None:
            return "<no token>"
        s = t.text
        if s is None:
            if t.type==Token.EOF:
                s = "<EOF>"
            else:
                s = "<" + str(t.type) + ">"
        s = s.replace("\n","\\n")
        s = s.replace("\r","\\r")
        s = s.replace("\t","\\t")
        return "'" + s + "'"

    def getErrorListenerDispatch(self):
        return ProxyErrorListener(self._listeners)

    # subclass needs to override these if there are sempreds or actions
    # that the ATN interp needs to execute
    def sempred(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        return True

    def precpred(self, localctx:RuleContext , precedence:int):
        return True

    @property
    def state(self):
        return self._stateNumber

    # Indicate that the recognizer has changed internal state that is
    #  consistent with the ATN state passed in.  This way we always know
    #  where we are in the ATN as the parser goes along. The rule
    #  context objects form a stack that lets us see the stack of
    #  invoking rules. Combine this and we have complete ATN
    #  configuration information.

    @state.setter
    def state(self, atnState:int):
        self._stateNumber = atnState

del RecognitionException


// File: venv\Lib\site-packages\antlr4\RuleContext.py
----------------------------------------
# Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
# Use of this file is governed by the BSD 3-clause license that
# can be found in the LICENSE.txt file in the project root.
#/


#  A rule context is a record of a single rule invocation. It knows
#  which context invoked it, if any. If there is no parent context, then
#  naturally the invoking state is not valid.  The parent link
#  provides a chain upwards from the current rule invocation to the root
#  of the invocation tree, forming a stack. We actually carry no
#  information about the rule associated with this context (except
#  when parsing). We keep only the state number of the invoking state from
#  the ATN submachine that invoked this. Contrast this with the s
#  pointer inside ParserRuleContext that tracks the current state
#  being "executed" for the current rule.
#
#  The parent contexts are useful for computing lookahead sets and
#  getting error information.
#
#  These objects are used during parsing and prediction.
#  For the special case of parsers, we use the subclass
#  ParserRuleContext.
#
#  @see ParserRuleContext
#/
from io import StringIO
from antlr4.tree.Tree import RuleNode, INVALID_INTERVAL, ParseTreeVisitor
from antlr4.tree.Trees import Trees

# need forward declarations
RuleContext = None
Parser = None

class RuleContext(RuleNode):
    __slots__ = ('parentCtx', 'invokingState')
    EMPTY = None

    def __init__(self, parent:RuleContext=None, invokingState:int=-1):
        super().__init__()
        # What context invoked this rule?
        self.parentCtx = parent
        # What state invoked the rule associated with this context?
        #  The "return address" is the followState of invokingState
        #  If parent is null, this should be -1.
        self.invokingState = invokingState


    def depth(self):
        n = 0
        p = self
        while p is not None:
            p = p.parentCtx
            n += 1
        return n

    # A context is empty if there is no invoking state; meaning nobody call
    #  current context.
    def isEmpty(self):
        return self.invokingState == -1

    # satisfy the ParseTree / SyntaxTree interface

    def getSourceInterval(self):
        return INVALID_INTERVAL

    def getRuleContext(self):
        return self

    def getPayload(self):
        return self

   # Return the combined text of all child nodes. This method only considers
    #  tokens which have been added to the parse tree.
    #  <p>
    #  Since tokens on hidden channels (e.g. whitespace or comments) are not
    #  added to the parse trees, they will not appear in the output of this
    #  method.
    #/
    def getText(self):
        if self.getChildCount() == 0:
            return ""
        with StringIO() as builder:
            for child in self.getChildren():
                builder.write(child.getText())
            return builder.getvalue()

    def getRuleIndex(self):
        return -1

    # For rule associated with this parse tree internal node, return
    # the outer alternative number used to match the input. Default
    # implementation does not compute nor store this alt num. Create
    # a subclass of ParserRuleContext with backing field and set
    # option contextSuperClass.
    # to set it.
    def getAltNumber(self):
        return 0 # should use ATN.INVALID_ALT_NUMBER but won't compile

    # Set the outer alternative number for this context node. Default
    # implementation does nothing to avoid backing field overhead for
    # trees that don't need it.  Create
    # a subclass of ParserRuleContext with backing field and set
    # option contextSuperClass.
    def setAltNumber(self, altNumber:int):
        pass

    def getChild(self, i:int):
        return None

    def getChildCount(self):
        return 0

    def getChildren(self):
        for c in []:
            yield c

    def accept(self, visitor:ParseTreeVisitor):
        return visitor.visitChildren(self)

   # # Call this method to view a parse tree in a dialog box visually.#/
   #  public Future<JDialog> inspect(@Nullable Parser parser) {
   #      List<String> ruleNames = parser != null ? Arrays.asList(parser.getRuleNames()) : null;
   #      return inspect(ruleNames);
   #  }
   #
   #  public Future<JDialog> inspect(@Nullable List<String> ruleNames) {
   #      TreeViewer viewer = new TreeViewer(ruleNames, this);
   #      return viewer.open();
   #  }
   #
   # # Save this tree in a postscript file#/
   #  public void save(@Nullable Parser parser, String fileName)
   #      throws IOException, PrintException
   #  {
   #      List<String> ruleNames = parser != null ? Arrays.asList(parser.getRuleNames()) : null;
   #      save(ruleNames, fileName);
   #  }
   #
   # # Save this tree in a postscript file using a particular font name and size#/
   #  public void save(@Nullable Parser parser, String fileName,
   #                   String fontName, int fontSize)
   #      throws IOException
   #  {
   #      List<String> ruleNames = parser != null ? Arrays.asList(parser.getRuleNames()) : null;
   #      save(ruleNames, fileName, fontName, fontSize);
   #  }
   #
   # # Save this tree in a postscript file#/
   #  public void save(@Nullable List<String> ruleNames, String fileName)
   #      throws IOException, PrintException
   #  {
   #      Trees.writePS(this, ruleNames, fileName);
   #  }
   #
   # # Save this tree in a postscript file using a particular font name and size#/
   #  public void save(@Nullable List<String> ruleNames, String fileName,
   #                   String fontName, int fontSize)
   #      throws IOException
   #  {
   #      Trees.writePS(this, ruleNames, fileName, fontName, fontSize);
   #  }
   #
   # # Print out a whole tree, not just a node, in LISP format
   #  #  (root child1 .. childN). Print just a node if this is a leaf.
   #  #  We have to know the recognizer so we can get rule names.
   #  #/
   #  @Override
   #  public String toStringTree(@Nullable Parser recog) {
   #      return Trees.toStringTree(this, recog);
   #  }
   #
   # Print out a whole tree, not just a node, in LISP format
   #  (root child1 .. childN). Print just a node if this is a leaf.
   #
    def toStringTree(self, ruleNames:list=None, recog:Parser=None):
        return Trees.toStringTree(self, ruleNames=ruleNames, recog=recog)
   #  }
   #
   #  @Override
   #  public String toStringTree() {
   #      return toStringTree((List<String>)null);
   #  }
   #
    def __str__(self):
        return self.toString(None, None)

   #  @Override
   #  public String toString() {
   #      return toString((List<String>)null, (RuleContext)null);
   #  }
   #
   #  public final String toString(@Nullable Recognizer<?,?> recog) {
   #      return toString(recog, ParserRuleContext.EMPTY);
   #  }
   #
   #  public final String toString(@Nullable List<String> ruleNames) {
   #      return toString(ruleNames, null);
   #  }
   #
   #  // recog null unless ParserRuleContext, in which case we use subclass toString(...)
   #  public String toString(@Nullable Recognizer<?,?> recog, @Nullable RuleContext stop) {
   #      String[] ruleNames = recog != null ? recog.getRuleNames() : null;
   #      List<String> ruleNamesList = ruleNames != null ? Arrays.asList(ruleNames) : null;
   #      return toString(ruleNamesList, stop);
   #  }

    def toString(self, ruleNames:list, stop:RuleContext)->str:
        with StringIO() as buf:
            p = self
            buf.write("[")
            while p is not None and p is not stop:
                if ruleNames is None:
                    if not p.isEmpty():
                        buf.write(str(p.invokingState))
                else:
                    ri = p.getRuleIndex()
                    ruleName = ruleNames[ri] if ri >= 0 and ri < len(ruleNames) else str(ri)
                    buf.write(ruleName)

                if p.parentCtx is not None and (ruleNames is not None or not p.parentCtx.isEmpty()):
                    buf.write(" ")

                p = p.parentCtx

            buf.write("]")
            return buf.getvalue()


// File: venv\Lib\site-packages\antlr4\StdinStream.py
----------------------------------------
import codecs
import sys

from antlr4.InputStream import InputStream


class StdinStream(InputStream):
    def __init__(self, encoding:str='ascii', errors:str='strict') -> None:
        bytes = sys.stdin.buffer.read()
        data = codecs.decode(bytes, encoding, errors)
        super().__init__(data)


// File: venv\Lib\site-packages\antlr4\Token.py
----------------------------------------
# Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
# Use of this file is governed by the BSD 3-clause license that
# can be found in the LICENSE.txt file in the project root.
#

# A token has properties: text, type, line, character position in the line
# (so we can ignore tabs), token channel, index, and source from which
# we obtained this token.
from io import StringIO


class Token (object):
    __slots__ = ('source', 'type', 'channel', 'start', 'stop', 'tokenIndex', 'line', 'column', '_text')

    INVALID_TYPE = 0

    # During lookahead operations, this "token" signifies we hit rule end ATN state
    # and did not follow it despite needing to.
    EPSILON = -2

    MIN_USER_TOKEN_TYPE = 1

    EOF = -1

    # All tokens go to the parser (unless skip() is called in that rule)
    # on a particular "channel".  The parser tunes to a particular channel
    # so that whitespace etc... can go to the parser on a "hidden" channel.

    DEFAULT_CHANNEL = 0

    # Anything on different channel than DEFAULT_CHANNEL is not parsed
    # by parser.

    HIDDEN_CHANNEL = 1

    def __init__(self):
        self.source = None
        self.type = None # token type of the token
        self.channel = None # The parser ignores everything not on DEFAULT_CHANNEL
        self.start = None # optional; return -1 if not implemented.
        self.stop = None  # optional; return -1 if not implemented.
        self.tokenIndex = None # from 0..n-1 of the token object in the input stream
        self.line = None # line=1..n of the 1st character
        self.column = None # beginning of the line at which it occurs, 0..n-1
        self._text = None # text of the token.

    @property
    def text(self):
        return self._text

    # Explicitly set the text for this token. If {code text} is not
    # {@code null}, then {@link #getText} will return this value rather than
    # extracting the text from the input.
    #
    # @param text The explicit text of the token, or {@code null} if the text
    # should be obtained from the input along with the start and stop indexes
    # of the token.

    @text.setter
    def text(self, text:str):
        self._text = text


    def getTokenSource(self):
        return self.source[0]

    def getInputStream(self):
        return self.source[1]

class CommonToken(Token):

    # An empty {@link Pair} which is used as the default value of
    # {@link #source} for tokens that do not have a source.
    EMPTY_SOURCE = (None, None)

    def __init__(self, source:tuple = EMPTY_SOURCE, type:int = None, channel:int=Token.DEFAULT_CHANNEL, start:int=-1, stop:int=-1):
        super().__init__()
        self.source = source
        self.type = type
        self.channel = channel
        self.start = start
        self.stop = stop
        self.tokenIndex = -1
        if source[0] is not None:
            self.line = source[0].line
            self.column = source[0].column
        else:
            self.column = -1

    # Constructs a new {@link CommonToken} as a copy of another {@link Token}.
    #
    # <p>
    # If {@code oldToken} is also a {@link CommonToken} instance, the newly
    # constructed token will share a reference to the {@link #text} field and
    # the {@link Pair} stored in {@link #source}. Otherwise, {@link #text} will
    # be assigned the result of calling {@link #getText}, and {@link #source}
    # will be constructed from the result of {@link Token#getTokenSource} and
    # {@link Token#getInputStream}.</p>
    #
    # @param oldToken The token to copy.
     #
    def clone(self):
        t = CommonToken(self.source, self.type, self.channel, self.start, self.stop)
        t.tokenIndex = self.tokenIndex
        t.line = self.line
        t.column = self.column
        t.text = self.text
        return t

    @property
    def text(self):
        if self._text is not None:
            return self._text
        input = self.getInputStream()
        if input is None:
            return None
        n = input.size
        if self.start < n and self.stop < n:
            return input.getText(self.start, self.stop)
        else:
            return "<EOF>"

    @text.setter
    def text(self, text:str):
        self._text = text

    def __str__(self):
        with StringIO() as buf:
            buf.write("[@")
            buf.write(str(self.tokenIndex))
            buf.write(",")
            buf.write(str(self.start))
            buf.write(":")
            buf.write(str(self.stop))
            buf.write("='")
            txt = self.text
            if txt is not None:
                txt = txt.replace("\n","\\n")
                txt = txt.replace("\r","\\r")
                txt = txt.replace("\t","\\t")
            else:
                txt = "<no text>"
            buf.write(txt)
            buf.write("',<")
            buf.write(str(self.type))
            buf.write(">")
            if self.channel > 0:
                buf.write(",channel=")
                buf.write(str(self.channel))
            buf.write(",")
            buf.write(str(self.line))
            buf.write(":")
            buf.write(str(self.column))
            buf.write("]")
            return buf.getvalue()


// File: venv\Lib\site-packages\antlr4\TokenStreamRewriter.py
----------------------------------------
#
# Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
# Use of this file is governed by the BSD 3-clause license that
# can be found in the LICENSE.txt file in the project root.
#

from io import StringIO
from antlr4.Token import Token

from antlr4.CommonTokenStream import CommonTokenStream


class TokenStreamRewriter(object):
    __slots__ = ('tokens', 'programs', 'lastRewriteTokenIndexes')

    DEFAULT_PROGRAM_NAME = "default"
    PROGRAM_INIT_SIZE = 100
    MIN_TOKEN_INDEX = 0

    def __init__(self, tokens):
        """
        :type  tokens: antlr4.BufferedTokenStream.BufferedTokenStream
        :param tokens:
        :return:
        """
        super(TokenStreamRewriter, self).__init__()
        self.tokens = tokens
        self.programs = {self.DEFAULT_PROGRAM_NAME: []}
        self.lastRewriteTokenIndexes = {}

    def getTokenStream(self):
        return self.tokens

    def rollback(self, instruction_index, program_name):
        ins = self.programs.get(program_name, None)
        if ins:
            self.programs[program_name] = ins[self.MIN_TOKEN_INDEX: instruction_index]

    def deleteProgram(self, program_name=DEFAULT_PROGRAM_NAME):
        self.rollback(self.MIN_TOKEN_INDEX, program_name)

    def insertAfterToken(self, token, text, program_name=DEFAULT_PROGRAM_NAME):
        self.insertAfter(token.tokenIndex, text, program_name)

    def insertAfter(self, index, text, program_name=DEFAULT_PROGRAM_NAME):
        op = self.InsertAfterOp(self.tokens, index + 1, text)
        rewrites = self.getProgram(program_name)
        op.instructionIndex = len(rewrites)
        rewrites.append(op)

    def insertBeforeIndex(self, index, text):
        self.insertBefore(self.DEFAULT_PROGRAM_NAME, index, text)

    def insertBeforeToken(self, token, text, program_name=DEFAULT_PROGRAM_NAME):
        self.insertBefore(program_name, token.tokenIndex, text)

    def insertBefore(self, program_name, index, text):
        op = self.InsertBeforeOp(self.tokens, index, text)
        rewrites = self.getProgram(program_name)
        op.instructionIndex = len(rewrites)
        rewrites.append(op)

    def replaceIndex(self, index, text):
        self.replace(self.DEFAULT_PROGRAM_NAME, index, index, text)

    def replaceRange(self, from_idx, to_idx, text):
        self.replace(self.DEFAULT_PROGRAM_NAME, from_idx, to_idx, text)

    def replaceSingleToken(self, token, text):
        self.replace(self.DEFAULT_PROGRAM_NAME, token.tokenIndex, token.tokenIndex, text)

    def replaceRangeTokens(self, from_token, to_token, text, program_name=DEFAULT_PROGRAM_NAME):
        self.replace(program_name, from_token.tokenIndex, to_token.tokenIndex, text)

    def replace(self, program_name, from_idx, to_idx, text):
        if any((from_idx > to_idx, from_idx < 0, to_idx < 0, to_idx >= len(self.tokens.tokens))):
            raise ValueError(
                'replace: range invalid: {}..{}(size={})'.format(from_idx, to_idx, len(self.tokens.tokens)))
        op = self.ReplaceOp(from_idx, to_idx, self.tokens, text)
        rewrites = self.getProgram(program_name)
        op.instructionIndex = len(rewrites)
        rewrites.append(op)

    def deleteToken(self, token):
        self.delete(self.DEFAULT_PROGRAM_NAME, token, token)

    def deleteIndex(self, index):
        self.delete(self.DEFAULT_PROGRAM_NAME, index, index)

    def delete(self, program_name, from_idx, to_idx):
        if isinstance(from_idx, Token):
            self.replace(program_name, from_idx.tokenIndex, to_idx.tokenIndex, "")
        else:
            self.replace(program_name, from_idx, to_idx, "")

    def lastRewriteTokenIndex(self, program_name=DEFAULT_PROGRAM_NAME):
        return self.lastRewriteTokenIndexes.get(program_name, -1)

    def setLastRewriteTokenIndex(self, program_name, i):
        self.lastRewriteTokenIndexes[program_name] = i

    def getProgram(self, program_name):
        return self.programs.setdefault(program_name, [])

    def getDefaultText(self):
        return self.getText(self.DEFAULT_PROGRAM_NAME, 0, len(self.tokens.tokens) - 1)

    def getText(self, program_name, start:int, stop:int):
        """
        :return: the text in tokens[start, stop](closed interval)
        """
        rewrites = self.programs.get(program_name)

        # ensure start/end are in range
        if stop > len(self.tokens.tokens) - 1:
            stop = len(self.tokens.tokens) - 1
        if start < 0:
            start = 0

        # if no instructions to execute
        if not rewrites: return self.tokens.getText(start, stop)
        buf = StringIO()
        indexToOp = self._reduceToSingleOperationPerIndex(rewrites)
        i = start
        while all((i <= stop, i < len(self.tokens.tokens))):
            op = indexToOp.pop(i, None)
            token = self.tokens.get(i)
            if op is None:
                if token.type != Token.EOF: buf.write(token.text)
                i += 1
            else:
                i = op.execute(buf)

        if stop == len(self.tokens.tokens)-1:
            for op in indexToOp.values():
                if op.index >= len(self.tokens.tokens)-1: buf.write(op.text)

        return buf.getvalue()

    def _reduceToSingleOperationPerIndex(self, rewrites):
        # Walk replaces
        for i, rop in enumerate(rewrites):
            if any((rop is None, not isinstance(rop, TokenStreamRewriter.ReplaceOp))):
                continue
            # Wipe prior inserts within range
            inserts = [op for op in rewrites[:i] if isinstance(op, TokenStreamRewriter.InsertBeforeOp)]
            for iop in inserts:
                if iop.index == rop.index:
                    rewrites[iop.instructionIndex] = None
                    rop.text = '{}{}'.format(iop.text, rop.text)
                elif all((iop.index > rop.index, iop.index <= rop.last_index)):
                    rewrites[iop.instructionIndex] = None

            # Drop any prior replaces contained within
            prevReplaces = [op for op in rewrites[:i] if isinstance(op, TokenStreamRewriter.ReplaceOp)]
            for prevRop in prevReplaces:
                if all((prevRop.index >= rop.index, prevRop.last_index <= rop.last_index)):
                    rewrites[prevRop.instructionIndex] = None
                    continue
                isDisjoint = any((prevRop.last_index<rop.index, prevRop.index>rop.last_index))
                if all((prevRop.text is None, rop.text is None, not isDisjoint)):
                    rewrites[prevRop.instructionIndex] = None
                    rop.index = min(prevRop.index, rop.index)
                    rop.last_index = min(prevRop.last_index, rop.last_index)
                    print('New rop {}'.format(rop))
                elif (not(isDisjoint)):
                    raise ValueError("replace op boundaries of {} overlap with previous {}".format(rop, prevRop))

        # Walk inserts
        for i, iop in enumerate(rewrites):
            if any((iop is None, not isinstance(iop, TokenStreamRewriter.InsertBeforeOp))):
                continue
            prevInserts = [op for op in rewrites[:i] if isinstance(op, TokenStreamRewriter.InsertBeforeOp)]
            for prev_index, prevIop in enumerate(prevInserts):
                if prevIop.index == iop.index and type(prevIop) is TokenStreamRewriter.InsertBeforeOp:
                    iop.text += prevIop.text
                    rewrites[prev_index] = None
                elif prevIop.index == iop.index and type(prevIop) is TokenStreamRewriter.InsertAfterOp:
                    iop.text = prevIop.text + iop.text
                    rewrites[prev_index] = None
            # look for replaces where iop.index is in range; error
            prevReplaces = [op for op in rewrites[:i] if isinstance(op, TokenStreamRewriter.ReplaceOp)]
            for rop in prevReplaces:
                if iop.index == rop.index:
                    rop.text = iop.text + rop.text
                    rewrites[i] = None
                    continue
                if all((iop.index >= rop.index, iop.index <= rop.last_index)):
                    raise ValueError("insert op {} within boundaries of previous {}".format(iop, rop))

        reduced = {}
        for i, op in enumerate(rewrites):
            if op is None: continue
            if reduced.get(op.index): raise ValueError('should be only one op per index')
            reduced[op.index] = op

        return reduced

    class RewriteOperation(object):
        __slots__ = ('tokens', 'index', 'text', 'instructionIndex')

        def __init__(self, tokens, index, text=""):
            """
            :type tokens: CommonTokenStream
            :param tokens:
            :param index:
            :param text:
            :return:
            """
            self.tokens = tokens
            self.index = index
            self.text = text
            self.instructionIndex = 0

        def execute(self, buf):
            """
            :type buf: StringIO.StringIO
            :param buf:
            :return:
            """
            return self.index

        def __str__(self):
            return '<{}@{}:"{}">'.format(self.__class__.__name__, self.tokens.get(self.index), self.text)

    class InsertBeforeOp(RewriteOperation):

        def __init__(self, tokens, index, text=""):
            super(TokenStreamRewriter.InsertBeforeOp, self).__init__(tokens, index, text)

        def execute(self, buf):
            buf.write(self.text)
            if self.tokens.get(self.index).type != Token.EOF:
                buf.write(self.tokens.get(self.index).text)
            return self.index + 1

    class InsertAfterOp(InsertBeforeOp):
        pass

    class ReplaceOp(RewriteOperation):
        __slots__ = 'last_index'

        def __init__(self, from_idx, to_idx, tokens, text):
            super(TokenStreamRewriter.ReplaceOp, self).__init__(tokens, from_idx, text)
            self.last_index = to_idx

        def execute(self, buf):
            if self.text:
                buf.write(self.text)
            return self.last_index + 1

        def __str__(self):
            if self.text:
                return '<ReplaceOp@{}..{}:"{}">'.format(self.tokens.get(self.index), self.tokens.get(self.last_index),
                                                        self.text)


// File: venv\Lib\site-packages\antlr4\tree\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\antlr4\tree\Chunk.py
----------------------------------------
#
# Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
# Use of this file is governed by the BSD 3-clause license that
# can be found in the LICENSE.txt file in the project root.
#

class Chunk(object):
    pass

class TagChunk(Chunk):
    __slots__ = ('tag', 'label')

    def __init__(self, tag:str, label:str=None):
        self.tag = tag
        self.label = label

    def __str__(self):
        if self.label is None:
            return self.tag
        else:
            return self.label + ":" + self.tag

class TextChunk(Chunk):
    __slots__ = 'text'

    def __init__(self, text:str):
        self.text = text

    def __str__(self):
        return "'" + self.text + "'"


// File: venv\Lib\site-packages\antlr4\tree\ParseTreeMatch.py
----------------------------------------
#
# Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
# Use of this file is governed by the BSD 3-clause license that
# can be found in the LICENSE.txt file in the project root.
#


#
# Represents the result of matching a {@link ParseTree} against a tree pattern.
#
from io import StringIO
from antlr4.tree.ParseTreePattern import ParseTreePattern
from antlr4.tree.Tree import ParseTree


class ParseTreeMatch(object):
    __slots__ = ('tree', 'pattern', 'labels', 'mismatchedNode')
    #
    # Constructs a new instance of {@link ParseTreeMatch} from the specified
    # parse tree and pattern.
    #
    # @param tree The parse tree to match against the pattern.
    # @param pattern The parse tree pattern.
    # @param labels A mapping from label names to collections of
    # {@link ParseTree} objects located by the tree pattern matching process.
    # @param mismatchedNode The first node which failed to match the tree
    # pattern during the matching process.
    #
    # @exception IllegalArgumentException if {@code tree} is {@code null}
    # @exception IllegalArgumentException if {@code pattern} is {@code null}
    # @exception IllegalArgumentException if {@code labels} is {@code null}
    #
    def __init__(self, tree:ParseTree, pattern:ParseTreePattern, labels:dict, mismatchedNode:ParseTree):
        if tree is None:
            raise Exception("tree cannot be null")
        if pattern is None:
            raise Exception("pattern cannot be null")
        if labels is None:
            raise Exception("labels cannot be null")
        self.tree = tree
        self.pattern = pattern
        self.labels = labels
        self.mismatchedNode = mismatchedNode

    #
    # Get the last node associated with a specific {@code label}.
    #
    # <p>For example, for pattern {@code <id:ID>}, {@code get("id")} returns the
    # node matched for that {@code ID}. If more than one node
    # matched the specified label, only the last is returned. If there is
    # no node associated with the label, this returns {@code null}.</p>
    #
    # <p>Pattern tags like {@code <ID>} and {@code <expr>} without labels are
    # considered to be labeled with {@code ID} and {@code expr}, respectively.</p>
    #
    # @param label The label to check.
    #
    # @return The last {@link ParseTree} to match a tag with the specified
    # label, or {@code null} if no parse tree matched a tag with the label.
    #
    def get(self, label:str):
        parseTrees = self.labels.get(label, None)
        if parseTrees is None or len(parseTrees)==0:
            return None
        else:
            return parseTrees[len(parseTrees)-1]

    #
    # Return all nodes matching a rule or token tag with the specified label.
    #
    # <p>If the {@code label} is the name of a parser rule or token in the
    # grammar, the resulting list will contain both the parse trees matching
    # rule or tags explicitly labeled with the label and the complete set of
    # parse trees matching the labeled and unlabeled tags in the pattern for
    # the parser rule or token. For example, if {@code label} is {@code "foo"},
    # the result will contain <em>all</em> of the following.</p>
    #
    # <ul>
    # <li>Parse tree nodes matching tags of the form {@code <foo:anyRuleName>} and
    # {@code <foo:AnyTokenName>}.</li>
    # <li>Parse tree nodes matching tags of the form {@code <anyLabel:foo>}.</li>
    # <li>Parse tree nodes matching tags of the form {@code <foo>}.</li>
    # </ul>
    #
    # @param label The label.
    #
    # @return A collection of all {@link ParseTree} nodes matching tags with
    # the specified {@code label}. If no nodes matched the label, an empty list
    # is returned.
    #
    def getAll(self, label:str):
        nodes = self.labels.get(label, None)
        if nodes is None:
            return list()
        else:
            return nodes


    #
    # Gets a value indicating whether the match operation succeeded.
    #
    # @return {@code true} if the match operation succeeded; otherwise,
    # {@code false}.
    #
    def succeeded(self):
        return self.mismatchedNode is None

    #
    # {@inheritDoc}
    #
    def __str__(self):
        with StringIO() as buf:
            buf.write("Match ")
            buf.write("succeeded" if self.succeeded() else "failed")
            buf.write("; found ")
            buf.write(str(len(self.labels)))
            buf.write(" labels")
            return buf.getvalue()


// File: venv\Lib\site-packages\antlr4\tree\ParseTreePattern.py
----------------------------------------
#
# Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
# Use of this file is governed by the BSD 3-clause license that
# can be found in the LICENSE.txt file in the project root.
#

#
# A pattern like {@code <ID> = <expr>;} converted to a {@link ParseTree} by
# {@link ParseTreePatternMatcher#compile(String, int)}.
#
from antlr4.tree.ParseTreePatternMatcher import ParseTreePatternMatcher
from antlr4.tree.Tree import ParseTree
from antlr4.xpath.XPath import XPath


class ParseTreePattern(object):
    __slots__ = ('matcher', 'patternRuleIndex', 'pattern', 'patternTree')

    # Construct a new instance of the {@link ParseTreePattern} class.
    #
    # @param matcher The {@link ParseTreePatternMatcher} which created this
    # tree pattern.
    # @param pattern The tree pattern in concrete syntax form.
    # @param patternRuleIndex The parser rule which serves as the root of the
    # tree pattern.
    # @param patternTree The tree pattern in {@link ParseTree} form.
    #
    def __init__(self, matcher:ParseTreePatternMatcher, pattern:str, patternRuleIndex:int , patternTree:ParseTree):
        self.matcher = matcher
        self.patternRuleIndex = patternRuleIndex
        self.pattern = pattern
        self.patternTree = patternTree

    #
    # Match a specific parse tree against this tree pattern.
    #
    # @param tree The parse tree to match against this tree pattern.
    # @return A {@link ParseTreeMatch} object describing the result of the
    # match operation. The {@link ParseTreeMatch#succeeded()} method can be
    # used to determine whether or not the match was successful.
    #
    def match(self, tree:ParseTree):
        return self.matcher.match(tree, self)

    #
    # Determine whether or not a parse tree matches this tree pattern.
    #
    # @param tree The parse tree to match against this tree pattern.
    # @return {@code true} if {@code tree} is a match for the current tree
    # pattern; otherwise, {@code false}.
    #
    def matches(self, tree:ParseTree):
        return self.matcher.match(tree, self).succeeded()

    # Find all nodes using XPath and then try to match those subtrees against
    # this tree pattern.
    #
    # @param tree The {@link ParseTree} to match against this pattern.
    # @param xpath An expression matching the nodes
    #
    # @return A collection of {@link ParseTreeMatch} objects describing the
    # successful matches. Unsuccessful matches are omitted from the result,
    # regardless of the reason for the failure.
    #
    def findAll(self, tree:ParseTree, xpath:str):
        subtrees = XPath.findAll(tree, xpath, self.matcher.parser)
        matches = list()
        for t in subtrees:
            match = self.match(t)
            if match.succeeded():
                matches.append(match)
        return matches


// File: venv\Lib\site-packages\antlr4\Utils.py
----------------------------------------
# Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
# Use of this file is governed by the BSD 3-clause license that
# can be found in the LICENSE.txt file in the project root.
#

from io import StringIO

def str_list(val):
    with StringIO() as buf:
        buf.write('[')
        first = True
        for item in val:
            if not first:
                buf.write(', ')
            buf.write(str(item))
            first = False
        buf.write(']')
        return buf.getvalue()

def escapeWhitespace(s:str, escapeSpaces:bool):
    with StringIO() as buf:
        for c in s:
            if c==' ' and escapeSpaces:
                buf.write('\u00B7')
            elif c=='\t':
                buf.write("\\t")
            elif c=='\n':
                buf.write("\\n")
            elif c=='\r':
                buf.write("\\r")
            else:
                buf.write(c)
        return buf.getvalue()


// File: venv\Lib\site-packages\antlr4\xpath\__init__.py
----------------------------------------
__author__ = 'ericvergnaud'


// File: venv\Lib\site-packages\antlr4_python3_runtime-4.9.3.dist-info\INSTALLER
----------------------------------------
pip


// File: venv\Lib\site-packages\antlr4_python3_runtime-4.9.3.dist-info\top_level.txt
----------------------------------------
antlr4


// File: venv\Lib\site-packages\cffi-1.17.1.dist-info\INSTALLER
----------------------------------------
pip


// File: venv\Lib\site-packages\cffi-1.17.1.dist-info\top_level.txt
----------------------------------------
_cffi_backend
cffi


// File: venv\Lib\site-packages\cloudpickle-3.1.1.dist-info\INSTALLER
----------------------------------------
pip


// File: venv\Lib\site-packages\colorama-0.4.6.dist-info\INSTALLER
----------------------------------------
pip


// File: venv\Lib\site-packages\demucs\py.typed
----------------------------------------


// File: venv\Lib\site-packages\demucs\remote\htdemucs.yaml
----------------------------------------
models: ['955717e8']


// File: venv\Lib\site-packages\demucs-4.0.1.dist-info\REQUESTED
----------------------------------------


// File: venv\Lib\site-packages\dora\py.typed
----------------------------------------


// File: venv\Lib\site-packages\dora\tests\integ\grids\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\einops\experimental\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\einops\py.typed
----------------------------------------


// File: venv\Lib\site-packages\filelock\py.typed
----------------------------------------


// File: venv\Lib\site-packages\fsspec\implementations\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\functorch\_src\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\jinja2\py.typed
----------------------------------------


// File: venv\Lib\site-packages\julius\py.typed
----------------------------------------


// File: venv\Lib\site-packages\markupsafe\py.typed
----------------------------------------


// File: venv\Lib\site-packages\mpmath\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\networkx\algorithms\approximation\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\networkx\algorithms\assortativity\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\networkx\algorithms\bipartite\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\networkx\algorithms\centrality\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\networkx\algorithms\coloring\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\networkx\algorithms\community\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\networkx\algorithms\components\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\networkx\algorithms\connectivity\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\networkx\algorithms\flow\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\networkx\algorithms\isomorphism\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\networkx\algorithms\link_analysis\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\networkx\algorithms\operators\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\networkx\algorithms\shortest_paths\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\networkx\algorithms\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\networkx\algorithms\traversal\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\networkx\algorithms\tree\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\networkx\classes\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\networkx\drawing\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\networkx\generators\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\networkx\linalg\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\networkx\readwrite\json_graph\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\networkx\readwrite\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\networkx\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\networkx\utils\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\numpy\_pyinstaller\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\numpy\compat\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\numpy\core\__init__.pyi
----------------------------------------


// File: venv\Lib\site-packages\numpy\fft\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\numpy\lib\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\numpy\linalg\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\numpy\ma\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\numpy\matrixlib\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\numpy\polynomial\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\numpy\py.typed
----------------------------------------


// File: venv\Lib\site-packages\numpy\random\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\numpy\random\tests\data\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\numpy\testing\_private\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\numpy\testing\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\numpy\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\numpy\typing\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\numpy-2.2.2-cp312-cp312-win_amd64.whl
----------------------------------------


// File: venv\Lib\site-packages\numpy-2.2.2.dist-info\REQUESTED
----------------------------------------


// File: venv\Lib\site-packages\omegaconf\grammar\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\omegaconf\grammar\gen\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\omegaconf\py.typed
----------------------------------------


// File: venv\Lib\site-packages\pip\_internal\operations\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\pip\_internal\resolution\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\pip\_internal\resolution\legacy\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\pip\_internal\resolution\resolvelib\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\pip\_internal\utils\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\pip\_vendor\cachecontrol\py.typed
----------------------------------------


// File: venv\Lib\site-packages\pip\_vendor\certifi\py.typed
----------------------------------------


// File: venv\Lib\site-packages\pip\_vendor\distro\py.typed
----------------------------------------


// File: venv\Lib\site-packages\pip\_vendor\idna\py.typed
----------------------------------------


// File: venv\Lib\site-packages\pip\_vendor\packaging\py.typed
----------------------------------------


// File: venv\Lib\site-packages\pip\_vendor\platformdirs\py.typed
----------------------------------------


// File: venv\Lib\site-packages\pip\_vendor\resolvelib\compat\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\pip\_vendor\resolvelib\py.typed
----------------------------------------


// File: venv\Lib\site-packages\pip\_vendor\rich\py.typed
----------------------------------------


// File: venv\Lib\site-packages\pip\_vendor\truststore\py.typed
----------------------------------------


// File: venv\Lib\site-packages\pip\_vendor\urllib3\contrib\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\pip\_vendor\urllib3\contrib\_securetransport\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\pip\_vendor\urllib3\packages\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\pip\_vendor\urllib3\packages\backports\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\pip-24.3.1.dist-info\REQUESTED
----------------------------------------


// File: venv\Lib\site-packages\pkg_resources\_vendor\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\pkg_resources\_vendor\backports\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\pkg_resources\_vendor\importlib_resources\py.typed
----------------------------------------


// File: venv\Lib\site-packages\pkg_resources\_vendor\jaraco\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\pkg_resources\_vendor\jaraco\functools\py.typed
----------------------------------------


// File: venv\Lib\site-packages\pkg_resources\_vendor\more_itertools\py.typed
----------------------------------------


// File: venv\Lib\site-packages\pkg_resources\_vendor\packaging\py.typed
----------------------------------------


// File: venv\Lib\site-packages\pkg_resources\_vendor\platformdirs\py.typed
----------------------------------------


// File: venv\Lib\site-packages\setuptools\_vendor\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\setuptools\_vendor\backports\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\setuptools\_vendor\importlib_metadata\py.typed
----------------------------------------


// File: venv\Lib\site-packages\setuptools\_vendor\importlib_resources\py.typed
----------------------------------------


// File: venv\Lib\site-packages\setuptools\_vendor\jaraco\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\setuptools\_vendor\jaraco\functools\py.typed
----------------------------------------


// File: venv\Lib\site-packages\setuptools\_vendor\more_itertools\py.typed
----------------------------------------


// File: venv\Lib\site-packages\setuptools\_vendor\packaging\py.typed
----------------------------------------


// File: venv\Lib\site-packages\setuptools\compat\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\soundfile-0.13.1.dist-info\REQUESTED
----------------------------------------


// File: venv\Lib\site-packages\submitit\py.typed
----------------------------------------


// File: venv\Lib\site-packages\sympy\algebras\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\sympy\assumptions\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\sympy\benchmarks\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\sympy\calculus\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\sympy\categories\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\sympy\codegen\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\sympy\combinatorics\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\sympy\concrete\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\sympy\core\benchmarks\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\sympy\core\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\sympy\crypto\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\sympy\diffgeom\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\sympy\discrete\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\sympy\external\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\sympy\functions\combinatorial\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\sympy\functions\elementary\benchmarks\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\sympy\functions\elementary\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\sympy\functions\special\benchmarks\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\sympy\functions\special\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\sympy\geometry\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\sympy\holonomic\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\sympy\integrals\benchmarks\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\sympy\integrals\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\sympy\interactive\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\sympy\liealgebras\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\sympy\logic\algorithms\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\sympy\logic\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\sympy\matrices\benchmarks\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\sympy\matrices\expressions\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\sympy\matrices\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\sympy\multipledispatch\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\sympy\ntheory\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\sympy\parsing\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\sympy\physics\biomechanics\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\sympy\physics\continuum_mechanics\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\sympy\physics\control\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\sympy\physics\hep\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\sympy\physics\hep\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\sympy\physics\mechanics\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\sympy\physics\optics\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\sympy\physics\quantum\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\sympy\physics\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\sympy\physics\units\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\sympy\physics\vector\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\sympy\plotting\backends\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\sympy\plotting\intervalmath\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\sympy\plotting\pygletplot\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\sympy\plotting\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\sympy\polys\agca\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\sympy\polys\benchmarks\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\sympy\polys\domains\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\sympy\polys\matrices\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\sympy\polys\numberfields\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\sympy\polys\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\sympy\printing\pretty\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\sympy\printing\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\sympy\sandbox\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\sympy\series\benchmarks\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\sympy\series\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\sympy\sets\handlers\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\sympy\sets\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\sympy\simplify\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\sympy\solvers\benchmarks\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\sympy\solvers\diophantine\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\sympy\solvers\ode\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\sympy\solvers\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\sympy\stats\sampling\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\sympy\stats\sampling\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\sympy\stats\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\sympy\strategies\branch\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\sympy\strategies\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\sympy\tensor\array\expressions\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\sympy\tensor\array\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\sympy\tensor\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\sympy\testing\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\sympy\unify\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\sympy\utilities\_compilation\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\sympy\utilities\mathml\data\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\sympy\utilities\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\sympy\vector\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torch\_custom_op\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torch\_dispatch\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torch\_dynamo\backends\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torch\_dynamo\repro\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torch\_export\pass_infra\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torch\_export\serde\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torch\_inductor\autoheuristic\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torch\_inductor\autoheuristic\artifacts\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torch\_inductor\codegen\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torch\_inductor\codegen\cuda\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torch\_inductor\codegen\cuda\cutlass_lib_extensions\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torch\_inductor\codegen\rocm\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torch\_inductor\codegen\xpu\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torch\_inductor\compile_worker\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torch\_inductor\fx_passes\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torch\_inductor\fx_passes\serialized_patterns\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torch\_inductor\runtime\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torch\_strobelight\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torch\_vendor\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torch\ao\ns\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torch\ao\ns\fx\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torch\ao\pruning\_experimental\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torch\ao\pruning\_experimental\activation_sparsifier\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torch\ao\pruning\_experimental\data_sparsifier\lightning\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torch\ao\pruning\_experimental\data_sparsifier\lightning\callbacks\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torch\ao\pruning\scheduler\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torch\ao\pruning\sparsifier\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torch\ao\quantization\backend_config\observation_type.py
----------------------------------------


// File: venv\Lib\site-packages\torch\ao\quantization\fx\_model_report\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torch\ao\quantization\pt2e\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torch\backends\_coreml\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torch\backends\_nnapi\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torch\backends\xeon\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torch\contrib\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torch\cuda\error.py
----------------------------------------


// File: venv\Lib\site-packages\torch\distributed\_shard\sharding_spec\chunk_sharding_spec_ops\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torch\distributed\algorithms\_checkpoint\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torch\distributed\algorithms\_quantization\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torch\distributed\algorithms\model_averaging\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torch\distributed\elastic\agent\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torch\distributed\nn\api\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torch\distributed\nn\jit\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torch\distributed\nn\jit\templates\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torch\fx\experimental\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torch\fx\experimental\migrate_gradual_types\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torch\fx\passes\backends\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torch\fx\passes\dialect\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torch\fx\passes\dialect\common\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torch\fx\passes\tests\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torch\include\ATen\cudnn\Exceptions.h
----------------------------------------


// File: venv\Lib\site-packages\torch\jit\_passes\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torch\nested\_internal\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torch\nn\backends\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torch\onnx\_internal\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torch\py.typed
----------------------------------------


// File: venv\Lib\site-packages\torch\testing\_internal\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torch\testing\_internal\distributed\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torch\testing\_internal\distributed\_tensor\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torch\testing\_internal\distributed\nn\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torch\testing\_internal\distributed\nn\api\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torch\testing\_internal\distributed\rpc\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torch\testing\_internal\distributed\rpc\examples\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torch\testing\_internal\distributed\rpc\jit\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torch\testing\_internal\generated\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torch\testing\_internal\test_module\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torch\utils\_strobelight\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torch\utils\_sympy\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torch\utils\benchmark\examples\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torch\utils\benchmark\op_fuzzers\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torch\utils\benchmark\utils\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torch\utils\benchmark\utils\valgrind_wrapper\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torch\utils\bottleneck\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torch\utils\data\datapipes\utils\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torch\utils\jit\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torch\utils\viz\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torch-2.5.1+cpu.dist-info\REQUESTED
----------------------------------------


// File: venv\Lib\site-packages\torchaudio\lib\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torchaudio\pipelines\_wav2vec2\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torchaudio\prototype\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torchaudio-2.5.1+cpu.dist-info\REQUESTED
----------------------------------------


// File: venv\Lib\site-packages\torchgen\aoti\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torchgen\api\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torchgen\executorch\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torchgen\executorch\api\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torchgen\operator_versions\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torchgen\packaged\autograd\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torchgen\selective_build\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torchgen\static_runtime\__init__.py
----------------------------------------


// File: venv\Lib\site-packages\torio\lib\__init__.py
----------------------------------------




---
## Summary

Total included files: 400
Total excluded files: 21032
Total included content size: 1048576 bytes
